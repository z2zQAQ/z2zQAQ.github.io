<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>keng</title>
    <link href="/2023/12/31/keng/"/>
    <url>/2023/12/31/keng/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8a5b2e7d40c3c408bdfa75719c4e1f26e9bc5695040ac08da4cec257088dbef8">4ba0d8cee6ec92d526646647fa60b6f0169a3219a03aaae9a3495c13a95bd849acd6d525de219883845cc682adb6e59d86db3349e69a9bc870a4f1c0cc7263a05b4fe0539b884ab96b3c912f6c6233d345b5c4c8ba640b9ed042daf16fbfbcd812e8440e77d7a27b7c02917ffb33032cab55e7452b77b04ea5e70fca6a192f6a106573a3479d8eaec79b390fccd6657953527c861ba2a29b754d9385e6c6620e2f624fbe4f1078a993558762cc7196e889679fa6e4126c4b80ce1af734ab0ce5d32d6226bcf6a3f9bf8ee4faaa7aa6023bf148ea7f3eb3fb3b973e8b845a173edfba2e2a4e64fd590bd15158ec7712a266caeea7c2d8fcca28031cbd7fa7e8c03f1bfb1355cd7d0ba57572d2eb53c4cefeffb920dbd793022947e821aae57152552dcf68a8770380da485b3c7d5a235ed82512c4e75594573576ae03faabd4f54b11995d38dc7cddf9f76c5db6c35d7a01a0a6fbc2e6f58126f7a561b0b1fbd8b1e679d7d9f340ffbbe8f0f0f6cf840c9dd4622ab157d5dac2fef01ac51b6c1f4ebdbec687b9b078f0e62e6aa2d213ada3f6468ef1053c55ee2418853e4116fa17231920c9f1371b64a5dcfce93103953b9e81d08b26b932e0ce6dbbf1ae7a88ff68a6eb8f78987c21dee413865680e7ef1fa162926069c0533e6a6d3a0ec9ecea6eac3f8ff8f60f4b4281819434e0d89b20f9f77eb520aef3e28446a0ed232a7b37e8be73bf096bff3cc8e4d70ccce4636770a5d01408f35ace7a24a4c2062c2e0857d0a716e72a22901eb0c096944a987ce01e19c0332142943bdb773b606c647204a0f1903060713b6c8e7b7f5c4309141761b982281c0648f130e7067c0fbfa6afccc019be7151d172909e0f51b1c3b5bc75c4c980249d89e3dbe1f47338a4b62d1ed705f2b8a14772b179adb9a3ed3be7a9b9f78eff7a8394627b011577108a12b00957989ab97ab5ef36487a266842966b3a031e34570d9aec82aa34fb4440e9b695f0cbe86b0bf0957ce58a35e1b0f55baf25c4119eb5abe1fd5d08b0f3e2bebfcca4b98d257e8d153547be62e91c4f1fb965eb21b2c0a5929164401e9adb43a5e8a09c6b6adfa674aa0068e5b5a91e1fcc4af1068c880fb7185561142ab4bd5a38eaf2580e1ca5c016857004f0020cd9d85a6cd37f627cacf8f63e325e745d21c64312d58c21749d1a354aa4f75f7bb51a54e446d4a14a4e760e0d6aeb7b7c758ae4e4127559a0538dbc1028d4663e15198156368111a6a4a71bf90599c2f5566ae13664333a2b3468bf4ff810a6fec28583ad2269ad55b3a6689c583a6359ffb0cb5c2b367e2478e4a727141fab9a111e92e94eec38f9391b51ccfe5ebc51b985eac9a0ff6a8a1271664bb088a6383dcacc85989279b329424b0ba223317221c5104979e5b1ce230e0c9fef8bf4b761ee5430a1d0623d31164cc06b7ade51c286c5b00c57c0d9a58b4673c1196281fc1f90c263f231794583238dd20910f89618aa5162b1bb6d94cac0223e9f3dd89d62165121b9e1da1776127a2847ee58dfaeb4d417d9d15e4638e2704e65350e362703e69139ca5d39a92db39a61330535ee3a4ed11b1efcd5980e91bdfb06deafb7daa92856c70e040970f6776d0cbb34f967ee42f9ecbff28b77ac3cf143148f0f58349c104e63c9b433c7dddac14e16494c223cb3608680c92db4b9966654b9ab5bf6047cf923e0361e44191ee08effc822e5617d26f65edde44bb181fb99fd08623930a7ad1f5c317e00a6869d8e9d4d6a4edbbca9562a39d4319e7903309bc6fc62ef12a5dee85aa501c100804ca2c0bf8a872304db0fb83666fb95c3d9813225f69860825f3bf7d41421625b86cc52bcd46568b2b1b0d7784d45dd28b53a9ca7c2180207ec0323878fb3f058efa568746045ce2bb12da9001cd7cf94b697d2337027ca1ad6fd0dc3196e62a422befd893a54e3d446e5d09a776e200b4b6d66ee962d586e81899d070466fb4d1badebd897a44229f726ef81b7a6c708cbcd429d73ec914e94109bbf2a3cd66809de45ba56fac6f702032867b790ebada1eb8f604d36d67dd3d75964a0b8a625030a5dff9d2a63d8d3b8e31adaee234f64b6764d07c93a8427b9c576a3c7eca8d67a76eb93b810b85a187ceb522b6af64df174dc2d7f22a633cddd19bde970fcfd12059a3c5d580707ae699d31066ff00bedda1d8f5e08117747027792072c19520f83de5cfd1f2239f41f1220288cc0148f4d0f3d3029fcd1b2618a1ab781c18fc1fd2a496f98bd18c3e6c1d2fedaeeb05a4a3abe01152f29fa4e9b2bbef5428325bc6907e25604d4d47b285b313bb2fd3c7c570e6134f9dad2613ac35e1b10d49bc8227692f46a122ee8b35526d54e13710764f102a97b9df8664996f7cda3e974b152d6bf8deb6bf89e294b54abdcb3fbc668323969649cbff05ba89fb052f0a8fd7f6f95c0acb4d0a5969b7e9405231a04d93c5b5e1e2329ed38d13d82fc21ee18aa19176847d57583c9fc415078bd63a6af5d1fb05b9576a82f30fa3a93314745946b3019996aa855a759724677fa58732a0ce1b264b9dff222d86da09089a199ddeadd9aa9cc37f362aa372e3ac7726c1c06fd875df13d336bc8b8df9b0738f63c1fd86abb373256be9a7cc950a03dc1736f68d5670a8d1ee65d5cb1c4778f09afd46996815bd25f0320bfb4b2e5342c3812063f9629a4d721b3d3b4f2a8153061aa3f290f1ca99c1381e1f07978bcc9738f432b71c6b140c7c555bdbbbe2f41cb979c26eb45efaf1ee14fbb0d521e277a8b4be3ea4040c0585f1b68b944895955b5670a6782cc85f5e34239eff872862703788491c72e4f1b80dd8bd4af068d292a25813f614ae9ff0018db4f6c36e0a93ff4f709a8aeb6840813174df962b637e17dfe09788192728c1b60f769c8bec7cfb36ac69881ffb059939fe6e0e749188c1c54158f277c26d0ed3226d87a13921d5a67a473e675736dd1bd32e9a9f81d55d4b78ce8b3c0e95a108f54d74556244ff896171a8dab17ccea4861247660912051daf310f430e40e2d308ec1aeee63c0770a02c298231278f368865ca9cbb9f688bf9323b5f6f884bbe5786096c4661d39bf6f47c60a4162ab2859d01b9fc94ec5beca08920281ff4890971362e504983c038251f0d55254fb207ce3d38384a1142e69176f98044401192872e00c2c51c88a1a83104c0296ac9091d365b636708c2e59203f30754773ce24aff830d386a1622c773be49c0413cd848130ed8792b8c8c92ee3fccc6dd647372d78eb1ec124193297b5060f5bfbc894fb0f75cfe021c9057033dc130dccea4291e26d60a9380914b6fb9929a5c0f6f847857160de1ea94fd5fbffa2eb003dcd202ee6bf26fbeb5db936e7e858f26ac6ac7dc6db36a0772b991aeb203f7b0ec9f2165bca7639318b59e18d398a5e26da7ad24f0fbb56548ca3ae55ac221a0a1dacaac848180548bd2df5fe2bc74615d70e7049f825064d9a6c3acaa8baa54cbbb867074bfca169d72bb0f33ec35f60ab47c0f8217efb0255a5eafd522ce554d8d72cbbf575f53163e8009e20bee4f30cfe3fb3f30b4b57d18b6421b8c54ed5f6f76b4ad6a1a6841cb9c3aa95a65e632f0d6dd75dfa45edcdc6ceab9e060f59575bb4b457bb5144c9c26e257a81b99bbd96dbce6af8662f4a59497cf1b11b2fc6fcc0e6d30bd836bec6ccc04f0a7345829847ffd479467a2acc4ece48f9228a8f6c2aa617bc1c35daae3309b7ef4dc509bc31108496d845520cb0accc7b61a1e95c6d90857c8493ab7437333a457224ff9c7ad7b561d1b91ca95d9c8ed0107ac8bb15ddbeb13a2dce106a2443338bd549d73635cf0d7fdbbe73d916a51b875321d0bc5cfe6d2c3d6010854c39b807b27ca4cfa43d6a4f9c186e34b0c521794ce7c5501ac6cb8195d17fc7d61316195b4c0c21215ae449ab5647f3c9cd7c1a36b7c7495f89b7bc58c39a841776d07f95b7d7c4cab129b51d67ed036a44328c87ab29415918ac8b1b9a34973ec7e64b8aa329e91fa9cd7dd833f84cb4efdc3cb0c4bf13fe2046ce17f9d8532635d6972ee34122eb49b23b9b2efd1f22282c0e4a613ee51c00a46cedcb48df42b58d1bbb05da8cc9a45a4c23da053bcd9bf07bd5d2d9efec52d639cc0e1de1e4e2142d177766197983b22f41d59919c9af4acae952fe782750f80b487b98d7f6477fb1c08e602b9fa330af9b52909d02ed11e81bbe64c1a711122da644df584a38a8feb6a4afddef969dd67a010e3745d44dcd5fda15eb8b2879577e16721fe4d99d7a21a44dba15050d55563858464543aeb62ee43b9b1f7fe5f9dc3e56ed6ac869d063d773e929ab54c7bf5ec610296b10f13dce462b918ac1c41e7608691b9b08ed36799aaeb7613a74caf14d8c489db3ab4cde9bf3c0765576c19ca49559610d351bc0c6316d41b5f95e5cb01ae57ad36a647ce91d0a0553f71365d0078935a86e2dc3740571182c982a9923f317defecec6d9815964022f533fdf186a53bfbace3cf511ee30c6ad0af64f16a8a4a44a2c537cb2f91f56cd8f6313f8542647bc6d0666145d50b18ff8a1e04c5f4ad840fab0a198f3b20c862c44e8eccfccb10aebc8f6202ffc8adbeb9894c76a43e794bc60d71faff7b9b5cb182d41c9ed590ff69d777fcf985a83574d31ec14b059f2d1a1150fa04d238d75d7b2b8de7cd357a0d3d3836579ff9377324e19d5bbcc65590f1da3e259c2ffd810445c54e57f610c194d37731564984550a92a0bd83c963e64b0d0ae2e292c17e107390d5df50cc085f4faaf6521519bc167d4344b61f862dc2e35f8c4bb589f8487fa853a16cd71404fc7ff67ec26c54b0b9c1ff9dd428a0c52fdc60feaa11da0d9f322c72f8caf8271377d6ff8ed21b717672112beb352181ad521a233b22db35542be4ac119ed42fecc477f4d826d4d2d9035a1b65692769690b05ae03a844141a18e8b7b4620477703aab36fcf5fa9a9a770fe340152b69d48864c48f20d4ef919cf225ff9e9da7b77e63333151a24d46fae534e26642280c58716d1aa708ca7f21161b0eecc984217d0412f5b5ae223efa6dcd85d6c8f0cb31e7c5b9915eedd5e13a95c0fac9ec8f1834f1c1a400b922cba2144e2327034768fb7a73fdd524e07bc43ce074f728d220ac4284edd070fb1c34ff2bcf78277ebbe113e276ed6442bbebfe86801a48dbb5649514f7af902921fa092f335d5ae87bb2c160c43828cc0291a966c197efbf3ff9740cb0dc9cf519a7574bc164ca5c526a9877192dcb83036d68d8b1a165be7d5d762fe8a5e99db95c4857ab68bb0750ba923e81114d217ccecb328b3bdf741917290d801ef8e9131619c85048f7039c2c068f19b95bfe31b95abfac9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fumo_backdoor复现</title>
    <link href="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>php代码审计，phpsession反序列化利用</p><h2 id="Imgaick类"><a href="#Imgaick类" class="headerlink" title="Imgaick类"></a>Imgaick类</h2><p>（vid:msl与mvg协议)</p><h3 id="msl语法基础"><a href="#msl语法基础" class="headerlink" title="msl语法基础"></a>msl语法基础</h3><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/1fcf8e22a17c633d348dc10bd2451570.png" alt="截图"></p><h3 id="vid特性"><a href="#vid特性" class="headerlink" title="vid特性"></a>vid特性</h3><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/848906440bfb201ccc0ce5f5689e741c.png" alt="截图"></p><h3 id="3-msl脚本标签"><a href="#3-msl脚本标签" class="headerlink" title="3 msl脚本标签"></a>3 msl脚本标签</h3><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/dfd6fe5579b65520eaa4e8505e571de5.png" alt="截图">.</p><p>这题用到了上面的base64解密，据博客所说还可以直接使用inline:data:text&#x2F;8BIM;base64实现不符合PPM协议的数据写入</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/7498bfd512dd2684b33f562988997a92.png" alt="截图"></p><br/><p>接受两个参数，cmd可以实现清除&#x2F;tmp目录与反序列化。</p><p>data构造的链子很简单，__sleep绕过waf后可以实现任意文件读取可以无法触发（需要序列化），__wakeup存在new $class($argv),想到原生类，这里利用了Imagick类</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>三个利用点：需要触发sleep魔术方法来读取文件，同时wakeup会导致无参rce（并不可以直接利用）以及原生类利用（这里用到imagick）</p><p>利用imgick漏洞将flag移动到&#x2F;tmp目录之后</p><p>将一段恶意数据设置到&#x2F;tmp&#x2F;sessxxx目录下，path设置在flag相应目录</p><p>利用vid:msl:&#x2F;tmp&#x2F;php*上传上面的数据到&#x2F;tmp&#x2F;sess_user中</p><p>触发phpsess反序列化来调用wakeup</p><h2 id="0"><a href="#0" class="headerlink" title="0"></a>0</h2><p>清空tmp目录</p><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/f8b8571bcb7f9390f01b8c83d0e69bb2.png" alt="截图"></p><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>创建一个写入了脏数据的PPM图片，末尾是复制之后的flag路径，最终用来触发readfile函数</p><blockquote><p><a href="https://github.com/ImageMagick/ImageMagick/blob/main/www/formats.html">https://github.com/ImageMagick/ImageMagick/blob/main/www/formats.html</a></p></blockquote><p>（PPM图片允许末尾写入脏数据并且不被imagic忽略）</p><br/><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/185f0736880412afc3b83c963e308892.png" alt="截图"></p><p>则在末尾写入数据,重要的是数据的大小要符合PPM要求</p><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/7f6a7e609d6b27fbb324b2960149bef6.png" alt="截图"></p><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/cf76657af9f1518ef05dc60103b468bc.png" alt="截图"></p><br/><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>触发wakeup魔术方法利用imagick把上面的图片存入sess_user中</p><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/3f1d0fb4e117b8c3449602b3ec5765c5.png" alt="截图"></p><p>将上面的图片数据修改为对应格式<img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/db561b80a3827e9584b64354f5ee767d.png" alt="截图"></p><p>本身是想用postman上传的，但是没找着发包的内容导致检查不了，就直接用bp发包了</p><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/1d902bf270a623ee5e8132229547abc5.png" alt="截图"></p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>imagick的mvg协议将flag复制到res中</p><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/c1860808ffa62ecfc54d11a4936bff0e.png" alt="截图"></p><br/><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>启动session传入PHPSESSION反序列化sess_user来触发__sleep方法</p><p><img src="/2023/10/28/fumo-backdoor%E5%A4%8D%E7%8E%B0/e247883ae9dc771e95c8ffe6abbbfa1b.png" alt="截图"></p><pre><code class="hljs">    最后发包就应该能获取flag的，这里可能本地环境有点问题....复现的大佬也说有时候要多试几次，我这边一直没出![截图](93b0dda5e3dba6abe80ceccaf4d888b3.png)</code></pre><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>最后整理一下漏洞触发的流程</p><p>当我们开启session并且访问对应的php_user文件时会将他的内容反序列化，</p><p>这个文件是先前被攻击者利用imagick恶意写入的，因此存在脏数据（反序列化时会访问&#x2F;tmp&#x2F;xxx文件）</p><p>并且攻击者已经利用imagick协议将flag写入到&#x2F;tmp&#x2F;xxx文件中</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.yuque.com/dat0u/ctf/utr6r6bhaltes2yv">https://www.yuque.com/dat0u/ctf/utr6r6bhaltes2yv</a></p><p><a href="https://aecous.github.io/2023/06/27/Imagick%E8%A7%A6%E5%8F%91msl/#%E6%A0%B7%E9%A2%98-ciscn2022-backdoor">https://aecous.github.io/2023/06/27/Imagick%E8%A7%A6%E5%8F%91msl/#%E6%A0%B7%E9%A2%98-ciscn2022-backdoor</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>ctf</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习</title>
    <link href="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>雕刻：决定项目内容，界定范围</p><p>收集数据，确认标签</p><p>训练，错误分析，迭代</p><p>监控性能，维持</p><h3 id="监督学习和非监督学习"><a href="#监督学习和非监督学习" class="headerlink" title="监督学习和非监督学习"></a>监督学习和非监督学习</h3><p>前者给出明确数据集，后者自动优化算法实现分类</p><h3 id="多类特征"><a href="#多类特征" class="headerlink" title="多类特征"></a>多类特征</h3><p>上标 i 说明是第几组数据（一个列表），下标 j 是一组数据中的第几个的特征值</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Mthzb7XIUogEntxwU92c5gh6nTd.png"></p><h3 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h3><p>通过对数据权重的缩放来保证机器学习的合理性</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/S53fbcb1Vo1dWFxtoBtcGvFgnqd.png"></p><p>例如上图数据，x1 权重高导致 x 的轻微改变都会导致数据变化过大，从而成本函数等高线图是一个椭圆，梯度下降难以进行，总体上让数据接近 1</p><p>方法：</p><p>除以最大值</p><p>均值归一  减去平均值然后除以最大最小值的差</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/K2j7btkf6o6zAIxggI2czn8ynjf.png"></p><p>z-score 归一化 减去平均值除以标准差</p><h3 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h3><p>例如房子使用 wx1+wx2+b 来估测，x1 与 x2 是长和宽 可以建立一个 x3 为面积 然后用 w3+wx1+wx2+ 估测</p><h3 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h3><p>改变数据（例如旋转图片，给图片加底噪）来增大数据集</p><h3 id="基线"><a href="#基线" class="headerlink" title="基线"></a>基线</h3><p>选择一个值来作为误差的参考值，例如识别图像时人的正确率</p><h3 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h3><p>利用已经训练过的神经网络，通过改变输出层的参数或者改变所有参数来应用于自身的模型</p><h3 id="误差度量"><a href="#误差度量" class="headerlink" title="误差度量"></a>误差度量</h3><p>例如现在有一个罕见的疾病，其发生率是百分之零点五，如今有多个算法，其中一个算法永远输出“没有疾病”，他的误差就只有百分之零点五，但是显然这个算法是没有意义的</p><p>精度：成功预测病人有病&#x2F;共预测病人有病数量</p><p>(预测的病人大概率是真的）</p><p>召回：成功预测病人有病&#x2F;真实病人有病数量</p><p>（有病的病人大概率被预测出来）</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/L6wTbAWiBoHRGIx8AwCc8T87nPc.png"></p><p>逻辑回归：当门槛升高，意味着需要更高的预测值才会判断有病，这会导致精度更高，同时召回更低</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/CJFNb11uAoD6oMxeOJPcMVNPnih.png"></p><p>计算 f1 score（调和平均数），较小的数据会导致分母过大，然后去总体大的数据</p><h2 id="监督学习算法"><a href="#监督学习算法" class="headerlink" title="监督学习算法"></a>监督学习算法</h2><h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><p>w 变化率，b 常数</p><h3 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h3><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/LrgPbMSqxowHACxh2RJcraXMnBb.png"></p><p>决策边界：wx+b＝0 也就是令 sigmoid 函数的参数为零，通过选择更合适的 z 函数会使得决策边界更加合理，从而良好的预测数据</p><p>g：sigmoid function</p><h3 id="softmax-回归"><a href="#softmax-回归" class="headerlink" title="softmax 回归"></a>softmax 回归</h3><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/QV6sbAN70oBsHFxhVqFcvyGKnog.png"></p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/ZV1IbrIHgoiIOOxKZHVcU9T5n6e.png"></p><h3 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h3><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/XlLlbccPqoDHuUxHkvRcYzw4ngr.png"></p><p>（输入层）特征向量 x 在隐藏层的作用下变成了激活值（此过程是多次重复的，次数取决于有几个隐藏层，输出的激活值个数取决于这一层中有多少个神经元，其本质类似于特征工程，是通过特定小逻辑回归（g 是 sigmoid function 也叫做激活函数，也可以是其他算法）</p><p>单元&#x2F;函数将输入的向量转化为几个激活值，例如：价格与运输费在一个神经元的作用下转换为“可负担性”）</p><p>最终进入输出层并给出结果（逻辑运算，这一步的算法取决于输出的需要是什么结果，例如二分法就可以用 sigmoid 函数）。层数&#x3D;隐藏 + 输出，</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/LlC0bTreBoli2axPe9bcjPzqnlZ.png"></p><p>上下标理解：如图层 3，w b 是第三层的参数，第一个 a 是第三层的输出值也是第四层的输入，第二个 a 是第二层的输出也是第三层的输入，下标代表第几个神经元</p><p>前向传播：神经元减少</p><p>多标签分类：对于某一组输入值需要进行多个二元判断，如有无汽车，有无单车，输出一个 01 数组</p><p>多成本分类：对于某一组输入值需要判断他的类型吗，如可以是汽车，单车，行人而非输出是与不是</p><h4 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h4><p>将图像矩阵二进制化，根据多个特征制作出多个卷积核，矩阵相乘实现卷积化，接下来对数据进行压缩同时避免过拟合的发生（池化），对一个区域内的数据取一个特定的值，最后来到激活层，一般使用 Relu 函数</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/LbcLbE39Zod5BkxjEZzc71FmnDg.png"></p><h4 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h4><p>当我们想要神经元根据输入的输出得到不同的输出的时候就需要考虑激活函数的使用</p><p>sigmoid 函数</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/TD2Hbd8M3oTMaYxep4gckhC3nlg.png"></p><p>ReLU 函数</p><p>隐藏层最多见的激活函数，其运算简单，坡度大便于进行梯度下降</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/LjYxbtFKconA38x7x4hcowAdnbd.png"></p><p>线性激活函数（无激活函数）</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/KxwJbMT0EoSlNrxYuLmcfMk8nKf.png"></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h3><p>根节点，决策节点，叶节点</p><h4 id="信息增益（熵的减少）"><a href="#信息增益（熵的减少）" class="headerlink" title="信息增益（熵的减少）"></a>信息增益（熵的减少）</h4><p>选择减少最多的</p><p>P：目标在这个分组中的数目   w：这个分组的总数除以分组前总数</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/H3NJbonoFoz3gSxxmdBcQfa9neL.png"></p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NPuObTtrIo1SWWxvZjScgDyVneb.png"></p><h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><p>为了避免过度拟合，需要有终止条件</p><p>1.完全纯洁</p><p>2.限制最大深度</p><p>3.信息增益太小（熵减少的少）</p><p>4.某个节点例子过少</p><h4 id="树集合（Ensembles-tree）"><a href="#树集合（Ensembles-tree）" class="headerlink" title="树集合（Ensembles tree）"></a>树集合（Ensembles tree）</h4><p>由于原本的决策树会受到某个数据的改变而产生巨大变化，则通过不同数据创建多个树</p><p>替换：例如在十个样例中，每次抽取一个样例，然后再放回，再在十个之中抽取一个</p><p>xgboost：增大下次决策时抽取上次失败的样例的概率</p><h4 id="回归树"><a href="#回归树" class="headerlink" title="回归树"></a>回归树</h4><p>例如要预测 xx 脸 xx 耳朵动物的体重，则根据方差权重后的差值来选择</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/ZD1rbCYIlor2ggxULDKch0ognhc.png"></p><h2 id="无监督学习算法"><a href="#无监督学习算法" class="headerlink" title="无监督学习算法"></a>无监督学习算法</h2><h3 id="k-means-聚类算法"><a href="#k-means-聚类算法" class="headerlink" title="k-means 聚类算法"></a>k-means 聚类算法</h3><p>在数据集中随机取 n 个点（簇质心），对于所有数据，选择离得最近的点，然后将 n 个点移到最近的点的平均值上，重复以上步骤直到这 n 个点不再变化</p><h2 id="代价"><a href="#代价" class="headerlink" title="代价"></a>代价</h2><h3 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h3><p>j 来代表数据与预测值之间的差</p><h4 id="平方误差成本函数"><a href="#平方误差成本函数" class="headerlink" title="平方误差成本函数"></a>平方误差成本函数</h4><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Iwptb7HaFozSF4x1qdOcEdEPncb.png"></p><p>在计算逻辑回归的时候会导致代价函数变成如下，就不能使用梯度下降来得到合理值了</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/IW5jballao1cT6xGf0XcDBEAnNg.png"></p><h4 id="逻辑回归损失函数"><a href="#逻辑回归损失函数" class="headerlink" title="逻辑回归损失函数"></a>逻辑回归损失函数</h4><p>也叫 binary cross-entropy function 二进制交叉熵</p><p>根据预估是 1 还是 0 来选择自己的模型 L 是 loss 函数</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Z5QJbPxRCoRezaxA55ocri3qn6e.png"></p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/G37bbpRaYof7YexLBHWcHgDtnng.png"></p><p>例如 y&#x3D;1，预估值为</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/YzaNbkVRFogThnxm4edcTI3RnAf.png"></p><p>会得到如下函数，越接近 1 计算出来的成本 loss 就会越小，越接近 0loss 越大而且增长率高</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/MNbUb1A4Io7E5KxsvUtcEnTfnsh.png"></p><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="softmax-回归损失函数"><a href="#softmax-回归损失函数" class="headerlink" title="softmax 回归损失函数"></a>softmax 回归损失函数</h4><p>Sparse categorical cross-entropy 稀疏范畴交叉熵</p><p>可以输出多种结果而非二分</p><p>与上同理，当 y&#x3D;1，得到的 a1 越接近 1 损失越小</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/KcDWbrGQJoSbv6xB3JKcyPtXnJb.png"></p><h4 id="熵"><a href="#熵" class="headerlink" title="熵"></a>熵</h4><p>用来衡量纯洁度，越接近百分之五十的时候熵越高，即越不纯洁</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/HsgTbjCLoo7Q6Gx7aJ8cG65YnAf.png"></p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Qr2ybCcuiouDR8x1xyAcIK0LnQh.png"></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h4><p>在坡顶找一个下坡最快的位置走上一小步</p><p>学习率 α 太高导致跳过最低点，太低导致运行速度慢：寻找最大合理值</p><p>偏导数通过斜率来决定这一步走多长，随着接近局部最小值，变化率降低</p><p>如何检测是代码错误还是学习率不当？ –&gt; 将学习率设置的非常小来检查</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/EUF0blAYUog6FLxqK6McsrTAnAg.png"></p><p>检查是否收敛：j-迭代次数图或者自动收敛测试</p><h5 id="亚当算法（优化器）"><a href="#亚当算法（优化器）" class="headerlink" title="亚当算法（优化器）"></a>亚当算法（优化器）</h5><p>修改学习率</p><h4 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h4><p>无需迭代，但是只适用于线性回归 速度慢</p><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h2 id="拟合问题"><a href="#拟合问题" class="headerlink" title="拟合问题"></a>拟合问题</h2><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/T49Gb1Wqlon1hKxoX25cQCA0nLm.png"></p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/EDbBbism1oFAEJxkDKPcj8W9no1.png"></p><h3 id="欠拟合（高偏差）-high-bias"><a href="#欠拟合（高偏差）-high-bias" class="headerlink" title="欠拟合（高偏差） high bias"></a>欠拟合（高偏差） high bias</h3><p>算法不准确</p><h3 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h3><p>让算法在处理未测试的数据集的时候仍有优秀的预测</p><h3 id="过拟合（高方差）-high-variance"><a href="#过拟合（高方差）-high-variance" class="headerlink" title="过拟合（高方差） high variance"></a>过拟合（高方差） high variance</h3><p>算法对数据集中所有数据精确处理但是失去了预测的能力</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/RJjvbf5ilojXJ0xWFu8ceFW9nSc.png"></p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><p>减少与增加</p><h4 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h4><p>改变 x 的次数</p><h4 id="增加数据集"><a href="#增加数据集" class="headerlink" title="增加数据集"></a>增加数据集</h4><p>一味地增加数据集效果有限，对高方差的效果会好</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/ENppbIPl2oNdsVxhxU3c9WaxnNc.png"></p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/SPidbbN8kodoyqxaklhcaXQenHh.png"></p><p>特征选择：减少相关性弱的特征，避免多项式表达能力过强</p><h4 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h4><p>保留相关特征，减少权重</p><p>使用场景：特征多但是不能确认哪个特征是有用或者无用的 lambda 需要选择合适的大小</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Jv6cbzReHonIutx3XtIca0fXn2N.png"></p><p>正则化线性回归梯度下降</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/ExehbmkdzoUmJrxkqggcqNq3nHh.png"></p><p>正则化逻辑回归梯度下降</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/SiX6bNCCOoEPOXxGow6c8eR7n4c.png"></p><h4 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h4><p>增大 lambda 导致模型简化</p><p><img src="/2023/10/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/IqLAbUt1SoRgZQxK2YLcvBQcnJe.png"></p><p>lambda 增大会导致 j train 不断增大（越来越偏离测试集）</p><p>lanbda 过大—过拟合  过小—近似常数方程</p><h3 id="诊断"><a href="#诊断" class="headerlink" title="诊断"></a>诊断</h3><p>训练：得到 j train 和多组已经完成了拟合的参数</p><p>选择模型（交叉验证）：得到 j cv 函数查看哪一组参数的误差小然后做出选择</p><p>测试：模拟现实情况来评估泛化能力</p><p>高偏差：在训练集上存在较大误差</p><p>高方差：j cv 远大于 j train 在交叉验证集中的误差远大于训练集上的误差（训练误差小，其他大）</p><p>高方差 + 高偏差：j cv 远大于 j train 而且 j train 很高</p><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><h2 id="-4"><a href="#-4" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《局外人》--意义</title>
    <link href="/2023/09/24/%E3%80%8A%E5%B1%80%E5%A4%96%E4%BA%BA%E3%80%8B-%E6%84%8F%E4%B9%89/"/>
    <url>/2023/09/24/%E3%80%8A%E5%B1%80%E5%A4%96%E4%BA%BA%E3%80%8B-%E6%84%8F%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e588d9c9b1e40ab10f3579eb2ed3590c375938f075225dacd17257e5e55601aa"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">需要密码才可以访问噢</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>阅读笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读笔记</tag>
      
      <tag>think</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-commons-collections-3.1反序列化漏洞学习</title>
    <link href="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA反序列化分析思路"><a href="#JAVA反序列化分析思路" class="headerlink" title="JAVA反序列化分析思路"></a>JAVA反序列化分析思路</h1><p>从危险函数出发开始寻找不同类的同名函数实现任意方法调用（反射&#x2F;动态加载字节码）</p><h1 id="反射基础"><a href="#反射基础" class="headerlink" title="反射基础"></a>反射基础</h1><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/af6f7ed4fa494b017fd94674d1acac2b.png" alt="截图"></p><p>r是一个Runtime实例，c是一个Runtime类，对c使用反射（getMethod）来获取exec方法，然后在r上调用这个方法</p><h1 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApacheSerialize</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>] &#125;),<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>     &#125;; <span class="hljs-comment">//将transformers数组存入ChaniedTransformer这个继承类</span><br> <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br></code></pre></td></tr></table></figure><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/76c5bf29875d23dd7251f61ea7166a4e.png" alt="截图"> </p><br/><h1 id="漏洞利用分析"><a href="#漏洞利用分析" class="headerlink" title="漏洞利用分析"></a>漏洞利用分析</h1><h2 id="InvokerTransformer（反射利用点）"><a href="#InvokerTransformer（反射利用点）" class="headerlink" title="InvokerTransformer（反射利用点）"></a>InvokerTransformer（反射利用点）</h2><p>首先是由InvokerTransformer类中的transform实现了任意方法调用的同时还在构造函数中导致参数可控<img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/0decef64baffec427ca8503b6055d012.png" alt="截图"></p><p>上面的java反射就相当于</p><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/451006b45403e4916ae89c1bac57168c.png" alt="截图"></p><p>（实际上自己构造的时候在IDE中直接看需要填入的变量还是挺方便的，这里不太好看懂）</p><p>如以下语句就可以实现命令执行</p><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/797821b047a0aa1970d24586a60e6e61.png" alt="截图"></p><p><strong>将Runtime实例传入transfrom，cls就获取了Runtime类，method获取了Runtime类中的exec方法，然后对Runtime实例使用传入的传输calc</strong></p><p>poc如下<img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/286bd714c894d8bf2db07f8f04e02323.png" alt="截图">效果是</p><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/63a36712d33061393ef3aa3974c6e165.png" alt="截图"> </p><p>最后的目标是回到readObject，所以此时要寻找不同的方法来调用transform（视频原话）</p><hr><h2 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h2><p>在TransformedMap类里面可以找到调用了transfrom方法的位置</p><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/78ce747963117a1a74432392b4fae2c8.png" alt="截图"></p><p>而valueTransformer是TransformedMap构造函数中的一部分，也就是可控<img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/fdb06310411b2b8c0eb1c15a9bd010a4.png" alt="截图"></p><p>如下构造就可以对invokerTransformer调用tansform方法（由于构造函数是保护的，这里用到decorate装饰器）</p><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/bbcf05b0825c29bc8168c9b99b41ed4f.png" alt="截图"></p><p>继续向上寻找发现是TransformedMap的父类的MapEntry类重写了setValue方法</p><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/1858e0f761cc2bc3e7092ea2b0a6a5ed.png" alt="截图"></p><p>则可以如下，构造一个TransformedMap并且调用setValue即可（让TransformedMap的value为构造的invokertransformer然后通过setValue调用transform）<img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/5cfdd45bdae2b2417775ed46616fd7e6.png" alt="截图"></p><p>现在则需要一个可以遍历数组的地方并且需要value可控或者不同名的调用了setValue</p><hr><h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p>pop链的最后一步<img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/3b63106246b1c42b6b3edf765722022d.png" alt="截图"></p><p>满足两个if条件后即可调用setvalue</p><p><strong>但是这个类是一个default类，需要用反射创建，并且可以看见他的构造函数中的第一个参数是一个注解类（如Override）</strong><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/1e001eb8613399c766028cca2208c03f.png" alt="截图"></p><p>此时有三个问题：</p><p><strong>1.如何通过if判断来进入这个setvalue中</strong></p><p><strong>2.setValue貌似不可控</strong></p><p><strong>3.Runtime对象本身是不可序列化的，需要通过反射</strong></p><hr><h2 id="Runtime实现反射调用"><a href="#Runtime实现反射调用" class="headerlink" title="Runtime实现反射调用"></a>Runtime实现反射调用</h2><p><u><strong>解决Runtime不可序列化的问题</strong></u><br>正常情况，由于Runtime对象构造函数是私有的，需要通过getRuntime方法来获取这个对象</p><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/e50396f2a799915ae1a443566d136c8a.png" alt="截图"></p><p>上图，<u><strong>通过.class获取了Runtime类，然后getMethod反射获取getRuntime方法，然后调用这个方法，获取r这个Runtime实例化对象，最后反射获取exec方法并且在r上调用</strong></u></p><p>转换为InvokerTransform类中则是</p><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/c98fce6b6222229e8bc9037b6b53c8bb.png" alt="截图"></p><h3 id="chainedtransformer"><a href="#chainedtransformer" class="headerlink" title="chainedtransformer"></a>chainedtransformer</h3><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/ff2051707c278f1d4568df83e5ec4438.png" alt="截图"></p><p>这时候通过chainedtransform实现循环调用来使得调用更加简洁</p><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/ade26093c15bbd94bc93ae52b3c6e75e.png" alt="截图"></p><hr><h2 id="进入if语句"><a href="#进入if语句" class="headerlink" title="进入if语句"></a>进入if语句</h2><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/13d3c235cdee3f76a831e4b5adcf462f.png" alt="截图"></p><p>1.通过getKey来获取传入的memberValue中的键是否存在于menberTypes中</p><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/950f13a925722aa8a01ef421ce1c21bc.png" alt="截图"></p><p>如上，反序列化入口获取了type参数也就是下面的Override.class<img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/96228eadb7d6edc8fcf4d351ebcbdd06.png" alt="截图"></p><p>接着获取了这个类中的成员方法，检查poc中传入的键在这个类中的成员方法终会是否存在</p><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/85b2366957f5b394f8191f99fefe59a2.png" alt="截图"></p><p>则传入一个有成员方法的类并且将key改成他的一个方法名</p><p>如Target的value方法<img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/51cc8f6c209cda4b5236f950aae54f76.png" alt="截图"></p><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/346ac98b2858372421dd9a0f353b66e2.png" alt="截图">如上修改即可</p><p>2.<img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/2814ca791e8398adc40537133b3e1e50.png" alt="截图"></p><p>即检查是否可以强转，这里不需要绕过</p><hr><h2 id="实现可控SetValue"><a href="#实现可控SetValue" class="headerlink" title="实现可控SetValue"></a>实现可控SetValue</h2><p>正常而言，这里会调用</p><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/60e389a8a285f78d23d2860b183d2f89.png" alt="截图"></p><p>也就是这里的transform的value不可控<img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/8fb0727ffebea79221cd577f1550031b.png" alt="截图"></p><p>也就相当于要把下面的语句换成上面的语句（实现value可控）</p><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/2f8471b5faf8e18282ad8fc0167cc2b1.png" alt="截图"></p><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/ff2051707c278f1d4568df83e5ec4438.png" alt="截图"></p><p>其transformer方法直接返回自身的一个变量同时可控<br>就可以利用它通过Runtime.getRuntime()创建一个Runtime实例</p><p>此时即可转换成poc中的</p><br/><p><img src="/2023/09/24/java-commons-collections-3-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/255b549250c082d6699e738adcbddce0.png" alt="截图"></p><hr><h2 id="pop链回溯"><a href="#pop链回溯" class="headerlink" title="pop链回溯"></a>pop链回溯</h2><p>通过反射实例化了AnnotationInvocationHandler类—&gt;对他的value遍历并且调用setvalue，最终来到transform方法(这一步为了实现可控SetValue借助到ConstantTransformer类)—&gt;在value中，我们恶意构造的chainTransformer类实现命令执行</p><br/><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一次看java的链子，之前连ctf的java题都没怎么做过，没啥基础，看了点反射跟基本语法就强行看完了，感觉看懂了但是让自己复现还是很困难（语法不清晰），过段时间自己再回来复习一下吧</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
